;;  <h2 id="syntax"><dfn>The HTML syntax</dfn></h2>
;;
;;  <p class="note">This section only describes the rules for resources
;;  labeled with an <span>HTML MIME type</span>. Rules for XML resources
;;  are discussed in the section below entitled "<span>The XHTML
;;  syntax</span>".</p>
;;
;;
;;  <h3 id="writing">Writing HTML documents</h3>
;;
;;  <div class="impl">
;;
;;  <p><i>This section only applies to documents, authoring tools, and
;;  markup generators. In particular, it does not apply to conformance
;;  checkers; conformance checkers must use the requirements given in
;;  the next section ("parsing HTML documents").</i></p>
;;
;;  </div>
;;
;;  <p>Documents must consist of the following parts, in the given
;;  order:</p>
;;
;;  <ol>
;;
;;   <li>Optionally, a single U+FEFF BYTE ORDER MARK (BOM) character.</li>
;;
;;   <li>Any number of <span title="syntax-comments">comments</span> and
;;   <span title="space character">space characters</span>.</li>
;;
;;   <li>A <span title="syntax-doctype">DOCTYPE</span>.
;;
;;   <li>Any number of <span title="syntax-comments">comments</span> and
;;   <span title="space character">space characters</span>.</li>
;;
;;   <li>The root element, in the form of an <code>html</code> <span
;;   title="syntax-elements">element</span>.</li>
;;
;;   <li>Any number of <span title="syntax-comments">comments</span> and
;;   <span title="space character">space characters</span>.</li>
;;
;;  </ol>
;;
;;  <p>The various types of content mentioned above are described in the
;;  next few sections.</p>
;;
;;  <p>In addition, there are some restrictions on how <span
;;  title="character encoding declaration">character encoding
;;  declarations</span> are to be serialized, as discussed in the
;;  section on that topic.</p>
;;
;;  <div class="note">
;;
;;   <p>Space characters before the root <code>html</code> element, and
;;   space characters at the start of the <code>html</code> element and
;;   before the <code>head</code> element, will be dropped when the
;;   document is parsed; space characters <em>after</em> the root
;;   <code>html</code> element will be parsed as if they were at the end
;;   of the <code>body</code> element. Thus, space characters around the
;;   root element do not round-trip.</p>
;;
;;   <p>It is suggested that newlines be inserted after the DOCTYPE,
;;   after any comments that are before the root element, after the
;;   <code>html</code> element's start tag (if it is not <span
;;   title="syntax-tag-omission">omitted</span>), and after any comments
;;   that are inside the <code>html</code> element but before the
;;   <code>head</code> element.</p>
;;
;;  </div>
;;
;;  <p>Many strings in the HTML syntax (e.g. the names of elements and
;;  their attributes) are case-insensitive, but only for characters in
;;  the ranges U+0041 to U+005A (LATIN CAPITAL LETTER A to LATIN CAPITAL
;;  LETTER Z) and U+0061 to U+007A (LATIN SMALL LETTER A to LATIN SMALL
;;  LETTER Z). For convenience, in this section this is just referred to
;;  as "case-insensitive".</p>
;;
;;
;;  <h4>The DOCTYPE</h4>
;;
;;  <p>A <dfn title="syntax-doctype">DOCTYPE</dfn> is a <!-- mostly
;;  useless but nonetheless --> required preamble.</p>
;;
;;  <p class="note">DOCTYPEs are required for legacy reasons. When
;;  omitted, browsers tend to use a different rendering mode that is
;;  incompatible with some specifications. Including the DOCTYPE in a
;;  document ensures that the browser makes a best-effort attempt at
;;  following the relevant specifications.</p>
;;
;;  <p>A DOCTYPE must consist of the following characters, in this
;;  order:</p>
;;
;;  <ol class="brief">
;;   <li>A string that is an <span>ASCII case-insensitive</span> match for the string "<code title="">&lt;!DOCTYPE</code>".</li>
;;   <li>One or more <span title="space character">space characters</span>.</li>
;;   <li>A string that is an <span>ASCII case-insensitive</span> match for the string "<code title="">HTML</code>".</li>
;;   <li>Optionally, a <span>DOCTYPE legacy string</span> or an <span>obsolete permitted DOCTYPE string</span> (defined below).</li>
;;   <li>Zero or more <span title="space character">space characters</span>.</li>
;;   <li>A U+003E GREATER-THAN SIGN character (&gt;).</li>
;;  </ol>
;;
;;  <p class="note">In other words, <code>&lt;!DOCTYPE HTML></code>,
;;  case-insensitively.</p>
;;
;;  <hr>
;;
;;  <p>For the purposes of HTML generators that cannot output HTML
;;  markup with the short DOCTYPE "<code title="">&lt;!DOCTYPE
;;  HTML></code>", a <dfn>DOCTYPE legacy string</dfn> may be inserted
;;  into the DOCTYPE (in the position defined above). This string must
;;  consist of:</p>
;;
;;  <ol class="brief">
;;   <li>One or more <span title="space character">space characters</span>.</li>
;;   <li>A string that is an <span>ASCII case-insensitive</span> match for the string "<code title="">SYSTEM</code>".</li>
;;   <li>One or more <span title="space character">space characters</span>.</li>
;;   <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>quote mark</i>).</li>
;;   <li>The literal string "<code>about:legacy-compat</code>".</li>
;;   <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>quote mark</i>).</li>
;;  </ol>
;;
;;  <p class="note">In other words, <code>&lt;!DOCTYPE HTML SYSTEM
;;  "about:legacy-compat"></code> or <code>&lt;!DOCTYPE HTML SYSTEM
;;  'about:legacy-compat'></code>, case-insensitively except for the
;;  part in single or double quotes.</p>
;;
;;  <p>The <span>DOCTYPE legacy string</span> should not be used unless
;;  the document is generated from a system that cannot output the
;;  shorter string.</p>
;;
;;  <hr>
;;
;;  <!-- see the parser section before changing this bit -->
;;
;;  <p>To help authors transition from HTML4 and XHTML1, an
;;  <dfn>obsolete permitted DOCTYPE string</dfn> can be inserted into
;;  the DOCTYPE (in the position defined above). This string must
;;  consist of:</p>
;;
;;  <ol class="brief">
;;   <li>One or more <span title="space character">space characters</span>.</li>
;;   <li>A string that is an <span>ASCII case-insensitive</span> match for the string "<code title="">PUBLIC</code>".</li>
;;   <li>One or more <span title="space character">space characters</span>.</li>
;;   <li>A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>first quote mark</i>).</li>
;;   <li>The string from one of the cells in the first column of the table below. The row to which this cell belongs is the <i>selected row</i>.</li>
;;   <li>A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>first quote mark</i>).</li>
;;   <li>If the cell in the second column of the <i>selected row</i> is not blank, one or more <span title="space character">space characters</span>.</li>
;;   <li>If the cell in the second column of the <i>selected row</i> is not blank, a U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the <i>third quote mark</i>).</li>
;;   <li>If the cell in the second column of the <i>selected row</i> is not blank, the string from the cell in the second column of the <i>selected row</i>.</li>
;;   <li>If the cell in the second column of the <i>selected row</i> is not blank, a matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled <i>third quote mark</i>).</li>
;;  </ol>
;;
;;  <table>
;;   <caption>
;;    Allowed values for public and system identifiers in an <span>obsolete permitted DOCTYPE string</span>.
;;   </caption>
;;   <thead>
;;    <tr>
;;     <th> Public identifier
;;     <th> System identifier
;;   <tbody>
;;    <tr>
;;     <td> <code title="">-//W3C//DTD&nbsp;HTML&nbsp;4.0//EN</code>
;;     <td>
;;    <tr>
;;     <td> <code title="">-//W3C//DTD&nbsp;HTML&nbsp;4.0//EN</code>
;;     <td> <code title="">http://www.w3.org/TR/REC-html40/strict.dtd</code>
;;    <tr>
;;     <td> <code title="">-//W3C//DTD&nbsp;HTML&nbsp;4.01//EN</code>
;;     <td>
;;    <tr>
;;     <td> <code title="">-//W3C//DTD&nbsp;HTML&nbsp;4.01//EN</code>
;;     <td> <code title="">http://www.w3.org/TR/html4/strict.dtd</code>
;;    <tr>
;;     <td> <code title="">-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code>
;;     <td> <code title="">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</code>
;;    <tr>
;;     <td> <code title="">-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code>
;;     <td> <code title="">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</code>
;;  </table>
;;
;;  <p>A <span title="syntax-doctype">DOCTYPE</span> containing an
;;  <span>obsolete permitted DOCTYPE string</span> is an <dfn>obsolete
;;  permitted DOCTYPE</dfn>. Authors should not use <span
;;  title="obsolete permitted DOCTYPE">obsolete permitted
;;  DOCTYPEs</span>, as they are unnecessarily long.</p>
;;
;;
;;
;;
;;  <h4>Elements</h4>
;;
;;  <p>There are five different kinds of <dfn
;;  title="syntax-elements">elements</dfn>: <span>void elements</span>,
;;  <span>raw text elements</span>, <span>RCDATA elements</span>,
;;  <span>foreign elements</span>, and <span>normal elements</span>.</p>
;;
;;  <dl>
;;
;;   <dt><dfn>Void elements</dfn></dt>
;;
;;   <dd><code>area</code>, <code>base</code>, <code>br</code>,
;;   <code>col</code>, <code>command</code>, <code>embed</code>,
;;   <code>hr</code>, <code>img</code>, <code>input</code>,
;;   <code>keygen</code>, <code>link</code>, <code>meta</code>,
;;   <code>param</code>, <code>source</code>, <code>track</code>,
;;   <code>wbr</code></dd>
;;
;;   <dt><dfn>Raw text elements</dfn></dt>
;;
;;   <dd><code>script</code>, <code>style</code></dd> <!-- iframe and
;;   noscript don't count as raw text for syntax purposes -->
;;
;;   <dt><dfn>RCDATA elements</dfn></dt>
;;
;;   <dd><code>textarea</code>, <code>title</code></dd>
;;
;;   <dt><dfn>Foreign elements</dfn></dt>
;;
;;   <dd>Elements from the <span>MathML namespace</span>
;;   and the <span>SVG namespace</span>.</dd>
;;
;;   <dt><dfn>Normal elements</dfn></dt>
;;
;;   <dd>All other allowed <span>HTML elements</span> are normal
;;   elements.</dd>
;;
;;  </dl>
;;
;;  <p><dfn title="syntax-tags">Tags</dfn> are used to delimit the start
;;  and end of elements in the markup. <span title="raw text
;;  elements">Raw text</span>, <span title="RCDATA
;;  elements">RCDATA</span>, and <span title="normal
;;  elements">normal</span> elements have a <span
;;  title="syntax-start-tag">start tag</span> to indicate where they
;;  begin, and an <span title="syntax-end-tag">end tag</span> to
;;  indicate where they end. The start and end tags of certain
;;  <span>normal elements</span> can be <span
;;  title="syntax-tag-omission">omitted</span>, as described
;;  later. Those that cannot be omitted must not be omitted. <span>Void
;;  elements</span> only have a start tag; end tags must not be
;;  specified for <span>void elements</span>. <span>Foreign
;;  elements</span> must either have a start tag and an end tag, or a
;;  start tag that is marked as self-closing, in which case they must
;;  not have an end tag.</p>
;;
;;  <p>The contents of the element must be placed between just after the
;;  start tag (which <span title="syntax-tag-omission">might be implied,
;;  in certain cases</span>) and just before the end tag (which again,
;;  <span title="syntax-tag-omission">might be implied in certain
;;  cases</span>). The exact allowed contents of each individual element
;;  depend on the content model of that element, as described earlier in
;;  this specification. Elements must not contain content that their
;;  content model disallows. In addition to the restrictions placed on
;;  the contents by those content models, however, the five types of
;;  elements have additional <em>syntactic</em> requirements.</p>
;;
;;  <p><span>Void elements</span> can't have any contents (since there's
;;  no end tag, no content can be put between the start tag and the end
;;  tag).</p>
;;
;;  <p><span>Raw text elements</span> can have <span
;;  title="syntax-text">text</span>, though it has <a
;;  href="#cdata-rcdata-restrictions">restrictions</a> described
;;  below.</p>
;;
;;  <p><span>RCDATA elements</span> can have <span
;;  title="syntax-text">text</span> and <span
;;  title="syntax-charref">character references</span>, but the text
;;  must not contain an <span
;;  title="syntax-ambiguous-ampersand">ambiguous ampersand</span>.
;;  There are also <a href="#cdata-rcdata-restrictions">further
;;  restrictions</a> described below.</p>
;;
;;  <p><span>Foreign elements</span> whose start tag is marked as
;;  self-closing can't have any contents (since, again, as there's no
;;  end tag, no content can be put between the start tag and the end
;;  tag). <span>Foreign elements</span> whose start tag is <em>not</em>
;;  marked as self-closing can have <span
;;  title="syntax-text">text</span>, <span
;;  title="syntax-charref">character references</span>, <span
;;  title="syntax-cdata">CDATA sections</span>, other <span
;;  title="syntax-elements">elements</span>, and <span
;;  title="syntax-comments">comments</span>, but the text must not
;;  contain the character U+003C LESS-THAN SIGN (&lt;) or an <span
;;  title="syntax-ambiguous-ampersand">ambiguous ampersand</span>.</p>
;;
;;  <div class="note">
;;
;;   <p>The HTML syntax does not support namespace
;;   declarations, even in <span>foreign elements</span>.</p>
;;
;;   <p>For instance, consider the following HTML fragment:</p>
;;
;;   <pre>&lt;p>
;; &lt;svg>
;;  &lt;metadata>
;;   &lt;!-- this is invalid -->
;;   &lt;cdr:license xmlns:cdr="http://www.example.com/cdr/metadata" name="MIT"/>
;;  &lt;/metadata>
;; &lt;/svg>
;;&lt;/p></pre>
;;
;;   <p>The innermost element, <code title="">cdr:license</code>, is
;;   actually in the SVG namespace, as the "<code
;;   title="">xmlns:cdr</code>" attribute has no effect (unlike in
;;   XML). In fact, as the comment in the fragment above says, the
;;   fragment is actually non-conforming. This is because the SVG
;;   specification does not define any elements called "<code
;;   title="">cdr:license</code>" in the SVG namespace.</p>
;;
;;  </div>
;;
;;  <p><span>Normal elements</span> can have <span
;;  title="syntax-text">text</span>, <span
;;  title="syntax-charref">character references</span>, other <span
;;  title="syntax-elements">elements</span>, and <span
;;  title="syntax-comments">comments</span>, but the text must not
;;  contain the character U+003C LESS-THAN SIGN (&lt;) or an <span
;;  title="syntax-ambiguous-ampersand">ambiguous ampersand</span>. Some
;;  <span>normal elements</span> also have <a
;;  href="#element-restrictions">yet more restrictions</a> on what
;;  content they are allowed to hold, beyond the restrictions imposed by
;;  the content model and those described in this paragraph. Those
;;  restrictions are described below.</p>
;;
;;  <p>Tags contain a <dfn title="syntax-tag-name">tag name</dfn>,
;;  giving the element's name. HTML elements all have names that only
;;  use characters in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT
;;  NINE (9), U+0061 LATIN SMALL LETTER A to U+007A LATIN SMALL LETTER
;;  Z, and U+0041 LATIN CAPITAL LETTER A to U+005A LATIN CAPITAL LETTER
;;  Z. In the HTML syntax, tag names, even those for <span>foreign
;;  elements</span>, may be written with any mix of lower- and uppercase
;;  letters that, when converted to all-lowercase, matches the element's
;;  tag name; tag names are case-insensitive.</p>
;;
;;
;;  <h5>Start tags</h5>
;;
;;  <p><dfn title="syntax-start-tag">Start tags</dfn> must have the
;;  following format:</p>
;;
;;  <ol>
;;
;;   <li>The first character of a start tag must be a U+003C LESS-THAN
;;   SIGN character (&lt;).</li>
;;
;;   <li>The next few characters of a start tag must be the element's
;;   <span title="syntax-tag-name">tag name</span>.</li>
;;
;;   <li>If there are to be any attributes in the next step, there must
;;   first be one or more <span title="space character">space
;;   characters</span>.</li>
;;
;;   <li>Then, the start tag may have a number of attributes, the <span
;;   title="syntax-attributes">syntax for which</span> is described
;;   below. Attributes must be separated from each other by one or more
;;   <span title="space character">space characters</span>.</li>
;;
;;   <li>After the attributes, or after the <span
;;   title="syntax-tag-name">tag name</span> if there are no attributes,
;;   there may be one or more <span title="space character">space
;;   characters</span>. (Some attributes are required to be followed by
;;   a space. See the <span title="syntax-attributes">attributes
;;   section</span> below.)</li>
;;
;;   <li>Then, if the element is one of the <span>void elements</span>,
;;   or if the element is a <span title="foreign elements">foreign
;;   element</span>, then there may be a single U+002F SOLIDUS character
;;   (/). This character has no effect on <span>void elements</span>,
;;   but on <span>foreign elements</span> it marks the start tag as
;;   self-closing.</li>
;;
;;   <li>Finally, start tags must be closed by a U+003E GREATER-THAN
;;   SIGN character (&gt;).</li>
;;
;;  </ol>
;;
;;
;;  <h5>End tags</h5>
;;
;;  <p><dfn title="syntax-end-tag">End tags</dfn> must have the
;;  following format:</p>
;;
;;  <ol>
;;
;;   <li>The first character of an end tag must be a U+003C LESS-THAN
;;   SIGN character (&lt;).</li>
;;
;;   <li>The second character of an end tag must be a U+002F SOLIDUS
;;   character (/).</li>
;;
;;   <li>The next few characters of an end tag must be the element's
;;   <span title="syntax-tag-name">tag name</span>.</li>
;;
;;   <li>After the tag name, there may be one or more <span title="space
;;   character">space characters</span>.</li>
;;
;;   <li>Finally, end tags must be closed by a U+003E GREATER-THAN SIGN
;;   character (&gt;).</li>
;;
;;  </ol>
;;
;;
;;  <h5>Attributes</h5>
;;
;;  <p><dfn title="syntax-attributes">Attributes</dfn> for an element
;;  are expressed inside the element's start tag.</p>
;;
;;  <p>Attributes have a name and a value. <dfn
;;  title="syntax-attribute-name">Attribute names</dfn> must consist of
;;  one or more characters other than the <span title="space
;;  character">space characters</span>, U+0000 NULL, U+0022 QUOTATION
;;  MARK (&#x22;), U+0027 APOSTROPHE (&#x27;), U+003E GREATER-THAN SIGN
;;  (&gt;), U+002F SOLIDUS (/), and U+003D EQUALS SIGN (=) characters,
;;  the control characters, and any characters that are not defined by
;;  Unicode. In the HTML syntax, attribute names, even those for
;;  <span>foreign elements</span>, may be written with any mix of lower-
;;  and uppercase letters that are an <span>ASCII
;;  case-insensitive</span> match for the attribute's name.</p>
;;
;;  <p><dfn title="syntax-attribute-value">Attribute values</dfn> are a
;;  mixture of <span title="syntax-text">text</span> and <span
;;  title="syntax-charref">character references</span>, except with the
;;  additional restriction that the text cannot contain an <span
;;  title="syntax-ambiguous-ampersand">ambiguous ampersand</span>.</p>
;;
;;  <p>Attributes can be specified in four different ways:</p>
;;
;;  <dl>
;;
;;   <dt>Empty attribute syntax</dt>
;;
;;   <dd>
;;
;;    <p>Just the <span title="syntax-attribute-name">attribute
;;    name</span>. The value is implicitly the empty string.</p>
;;
;;    <div class="example">
;;
;;     <p>In the following example, the <code
;;     title="attr-fe-disabled">disabled</code> attribute is given with
;;     the empty attribute syntax:</p>
;;
;;     <pre>&lt;input <em>disabled</em>&gt;</pre>
;;
;;    </div>
;;
;;    <p>If an attribute using the empty attribute syntax is to be
;;    followed by another attribute, then there must be a <span>space
;;    character</span> separating the two.</p>
;;
;;   </dd>
;;
;;   <dt id="unquoted">Unquoted attribute value syntax</dt>
;;
;;   <dd>
;;
;;    <p>The <span title="syntax-attribute-name">attribute name</span>,
;;    followed by zero or more <span title="space character">space
;;    characters</span>, followed by a single U+003D EQUALS SIGN
;;    character, followed by zero or more <span title="space
;;    character">space characters</span>, followed by the <span
;;    title="syntax-attribute-value">attribute value</span>, which, in
;;    addition to the requirements given above for attribute values,
;;    must not contain any literal <span title="space character">space
;;    characters</span>, any U+0022 QUOTATION MARK characters (&#x22;),
;;    U+0027 APOSTROPHE characters (&#x27;), U+003D EQUALS SIGN
;;    characters (=), U+003C LESS-THAN SIGN characters (&lt;), U+003E
;;    GREATER-THAN SIGN characters (&gt;), or U+0060 GRAVE ACCENT
;;    characters (`), and must not be the empty string.</p>
;;
;;    <!-- The ` character is in this list on a temporary basis, waiting
;;         for IE to fix its parsing bug whereby it treats ` as an
;;         attribute value delimiter. Otherwise, escaping software that
;;         tries to be clever and not use quotes when it doesn't need to
;;         could be tricked by an attacker.
;;
;;         Posit a site that allows the user to input text that is used
;;         verbatim in two attributes, such that the user can set the
;;         first attribute's value to:
;;
;;            `
;;
;;         ...and the second to:
;;
;;            ` onload='...payload...' end=x
;;
;;         ...with the assumption that the site is going to not quote
;;         the first one, and quote the second one with double quotes:
;;
;;            <body title=` class="` onload='...payload...' end=x">
;;
;;         In IE, this is treated as:
;;
;;            <body title=' class="'
;;                  onload='...payload...'
;;                  end='x"'>
;;
;;    -->
;;
;;
;;    <div class="example">
;;
;;     <p>In the following example, the <code
;;     title="attr-input-value">value</code> attribute is given
;;     with the unquoted attribute value syntax:</p>
;;
;;     <pre>&lt;input <em>value=yes</em>&gt;</pre>
;;
;;    </div>
;;
;;    <p>If an attribute using the unquoted attribute syntax is to be
;;    followed by another attribute or by the optional U+002F SOLIDUS
;;    character (/) allowed in step 6 of the <span
;;    title="syntax-start-tag">start tag</span> syntax above, then there
;;    must be a <span>space character</span> separating the two.</p>
;;
;;   </dd>
;;
;;   <dt>Single-quoted attribute value syntax</dt>
;;
;;   <dd>
;;
;;    <p>The <span title="syntax-attribute-name">attribute name</span>,
;;    followed by zero or more <span title="space character">space
;;    characters</span>, followed by a single U+003D EQUALS SIGN
;;    character, followed by zero or more <span title="space
;;    character">space characters</span>, followed by a single U+0027
;;    APOSTROPHE character ('), followed by the <span
;;    title="syntax-attribute-value">attribute value</span>, which, in
;;    addition to the requirements given above for attribute values,
;;    must not contain any literal U+0027 APOSTROPHE characters ('), and
;;    finally followed by a second single U+0027 APOSTROPHE character
;;    (').</p>
;;
;;    <div class="example">
;;
;;     <p>In the following example, the <code
;;     title="attr-input-type">type</code> attribute is given with the
;;     single-quoted attribute value syntax:</p>
;;
;;     <pre>&lt;input <em>type='checkbox'</em>&gt;</pre>
;;
;;    </div>
;;
;;    <p>If an attribute using the single-quoted attribute syntax is to
;;    be followed by another attribute, then there must be a <span>space
;;    character</span> separating the two.</p>
;;
;;   </dd>
;;
;;   <dt>Double-quoted attribute value syntax</dt>
;;
;;   <dd>
;;
;;    <p>The <span title="syntax-attribute-name">attribute name</span>,
;;    followed by zero or more <span title="space character">space
;;    characters</span>, followed by a single U+003D EQUALS SIGN
;;    character, followed by zero or more <span title="space
;;    character">space characters</span>, followed by a single U+0022
;;    QUOTATION MARK character ("), followed by the <span
;;    title="syntax-attribute-value">attribute value</span>, which, in
;;    addition to the requirements given above for attribute values,
;;    must not contain any literal U+0022 QUOTATION MARK characters ("),
;;    and finally followed by a second single U+0022 QUOTATION MARK
;;    character (").</p>
;;
;;    <div class="example">
;;
;;     <p>In the following example, the <code
;;     title="attr-fe-name">name</code> attribute is given with the
;;     double-quoted attribute value syntax:</p>
;;
;;     <pre>&lt;input <em>name="be evil"</em>&gt;</pre>
;;
;;    </div>
;;
;;    <p>If an attribute using the double-quoted attribute syntax is to
;;    be followed by another attribute, then there must be a <span>space
;;    character</span> separating the two.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;  <p>There must never be two or more attributes on the same start tag
;;  whose names are an <span>ASCII case-insensitive</span> match for
;;  each other.</p>
;;
;;  <hr>
;;
;;  <p>When a <span title="foreign elements">foreign element</span> has
;;  one of the namespaced attributes given by the local name and
;;  namespace of the first and second cells of a row from the following
;;  table, it must be written using the name given by the third cell
;;  from the same row.</p>
;;
;;  <table>
;;   <thead>
;;    <tr> <th> Local name <th> Namespace <th> Attribute name
;;   <tbody>
;;    <tr> <td> <code title="">actuate</code> <td> <span>XLink namespace</span> <td> <code title="">xlink:actuate</code>
;;    <tr> <td> <code title="">arcrole</code> <td> <span>XLink namespace</span> <td> <code title="">xlink:arcrole</code>
;;    <tr> <td> <code title="">href</code> <td> <span>XLink namespace</span> <td> <code title="">xlink:href</code>
;;    <tr> <td> <code title="">role</code> <td> <span>XLink namespace</span> <td> <code title="">xlink:role</code>
;;    <tr> <td> <code title="">show</code> <td> <span>XLink namespace</span> <td> <code title="">xlink:show</code>
;;    <tr> <td> <code title="">title</code> <td> <span>XLink namespace</span> <td> <code title="">xlink:title</code>
;;    <tr> <td> <code title="">type</code> <td> <span>XLink namespace</span> <td> <code title="">xlink:type</code>
;;    <tr> <td> <code title="">base</code> <td> <span>XML namespace</span> <!-- attr-xml-base --> <td> <code title="">xml:base</code>
;;    <tr> <td> <code title="">lang</code> <td> <span>XML namespace</span> <td> <code title="">xml:lang</code>
;;    <tr> <td> <code title="">space</code> <td> <span>XML namespace</span> <td> <code title="">xml:space</code>
;;    <tr> <td> <code title="">xmlns</code> <td> <span>XMLNS namespace</span> <td> <code title="">xmlns</code>
;;    <tr> <td> <code title="">xlink</code> <td> <span>XMLNS namespace</span> <td> <code title="">xmlns:xlink</code>
;;  </table>
;;
;;  <p>No other namespaced attribute can be expressed in <span>the
;;  HTML syntax</span>.</p>
;;
;;
;;  <h5>Optional tags</h5>
;;
;;  <p>Certain tags can be <dfn
;;  title="syntax-tag-omission">omitted</dfn>.</p>
;;
;;  <p class="note">Omitting an element's <span
;;  title="syntax-start-tag">start tag</span> does not mean the element
;;  is not present; it is implied, but it is still there. An HTML
;;  document always has a root <code>html</code> element, even if the
;;  string <code title="">&lt;html></code> doesn't appear anywhere in
;;  the markup.</p>
;;
;;  <!-- <html> -->
;;  <p>An <code>html</code> element's <span
;;  title="syntax-start-tag">start tag</span> may be omitted if the
;;  first thing inside the <code>html</code> element is not a <span
;;  title="syntax-comments">comment</span>.</p>
;;
;;  <!-- </html> -->
;;  <p>An <code>html</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>html</code> element is not
;;  immediately followed by a <span
;;  title="syntax-comments">comment</span>.</p>
;;
;;  <!-- <head> -->
;;  <p>A <code>head</code> element's <span
;;  title="syntax-start-tag">start tag</span> may be omitted if the
;;  element is empty, or if the first thing inside the
;;  <code>head</code> element is an element.</p>
;;
;;  <!-- </head> -->
;;  <p>A <code>head</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>head</code> element is not
;;  immediately followed by a <span>space character</span> or a <span
;;  title="syntax-comments">comment</span>.</p>
;;
;;  <!-- <body> -->
;;  <p>A <code>body</code> element's <span
;;  title="syntax-start-tag">start tag</span> may be omitted if the
;;  element is empty, or if the first thing inside the <code>body</code>
;;  element is not a <span>space character</span> or a <span
;;  title="syntax-comments">comment</span>, except if the first thing
;;  inside the <code>body</code> element is a <code>script</code> or
;;  <code>style</code> element. <!-- Note that even if the </head> end
;;  tag is present, the parser makes <style> and <script> elements
;;  between </head> and <body> end up in the <head> instead of implying
;;  the <body> --></p>
;;
;;  <!-- </body> -->
;;  <p>A <code>body</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>body</code> element is not
;;  immediately followed by a <span
;;  title="syntax-comments">comment</span>.</p>
;;
;;  <!-- </li> -->
;;  <p>A <code>li</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>li</code> element is
;;  immediately followed by another <code>li</code> element or if there
;;  is no more content in the parent element.</p>
;;
;;  <!-- </dt> -->
;;  <p>A <code>dt</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>dt</code> element is
;;  immediately followed by another <code>dt</code> element or a
;;  <code>dd</code> element.</p>
;;
;;  <!-- </dd> -->
;;  <p>A <code>dd</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>dd</code> element is
;;  immediately followed by another <code>dd</code> element or a
;;  <code>dt</code> element, or if there is no more content in the
;;  parent element.</p>
;;
;;  <!-- </p> -->
;;  <p>A <code>p</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>p</code> element is
;;  immediately followed by an <code>address</code>,
;;  <code>article</code>, <code>aside</code>, <code>blockquote</code>,
;;  <!--v2DATAGRID <code>datagrid</code>,--> <code>dir</code>,
;;  <code>div</code>, <code>dl</code>, <code>fieldset</code>,
;;  <code>footer</code>, <code>form</code>, <code>h1</code>,
;;  <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>,
;;  <code>h6</code>, <code>header</code>, <code>hgroup</code>,
;;  <code>hr</code>, <code>menu</code>, <code>nav</code>,
;;  <code>ol</code>, <code>p</code>, <code>pre</code>,
;;  <code>section</code>, <code>table</code>, or <code>ul</code>,
;;  element, or if there is no more content in the parent element and
;;  the parent element is not an <code>a</code> element.</p>
;;
;;  <!-- </rt> -->
;;  <p>An <code>rt</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>rt</code> element is
;;  immediately followed by an <code>rt</code> or <code>rp</code>
;;  element, or if there is no more content in the parent element.</p>
;;
;;  <!-- </rp> -->
;;  <p>An <code>rp</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>rp</code> element is
;;  immediately followed by an <code>rt</code> or <code>rp</code>
;;  element, or if there is no more content in the parent element.</p>
;;
;;  <!-- </optgroup> (the text assumes <optgroup> can only be inside a
;;  <select>; commented out text below can handle the non-<select> case
;;  if we ever allow it) -->
;;  <p>An <code>optgroup</code> element's <span
;;  title="syntax-end-tag">end tag</span> may be omitted if the
;;  <code>optgroup</code> element <!--has an ancestor
;;  <code>select</code> element and--> is immediately followed by
;;  another <code>optgroup</code> element, or if <!--all of the elements
;;  that are ancestors of the <code>optgroup</code> element, up to and
;;  including the first ancestor element that is not an
;;  <code>optgroup</code> element, have no more content--> there is no
;;  more content in the parent element.</p>
;;  <!-- so e.g. the max number of </optgroup>s are omitted here:
;;   <select><optgroup></select>
;;   <p id=x><optgroup></optgroup>x</p>
;;   <p id=x><optgroup><optgroup></optgroup></optgroup>x</p>
;;   <p><optgroup id=x><optgroup></optgroup>x</p>
;;   <p><optgroup><optgroup id=x>x</p>
;;  -->
;;
;;  <!-- </option> -->
;;  <p>An <code>option</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>option</code> element is
;;  immediately followed by another <code>option</code> element, or if
;;  it is immediately followed by an <code>optgroup</code> element, or
;;  if there is no more content in the parent element.</p>
;;
;;  <!-- <colgroup> -->
;;  <p>A <code>colgroup</code> element's <span
;;  title="syntax-start-tag">start tag</span> may be omitted if the
;;  first thing inside the <code>colgroup</code> element is a
;;  <code>col</code> element, and if the element is not immediately
;;  preceded by another <code>colgroup</code> element whose <span
;;  title="syntax-end-tag">end tag</span> has been omitted. (It can't be
;;  omitted if the element is empty.)</p>
;;
;;  <!-- </colgroup> -->
;;  <p>A <code>colgroup</code> element's <span
;;  title="syntax-end-tag">end tag</span> may be omitted if the
;;  <code>colgroup</code> element is not immediately followed by a
;;  <span>space character</span> or a <span
;;  title="syntax-comments">comment</span>.</p>
;;
;;  <!-- </thead> -->
;;  <p>A <code>thead</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>thead</code> element is
;;  immediately followed by a <code>tbody</code> or <code>tfoot</code>
;;  element.</p>
;;
;;  <!-- <tbody> -->
;;  <p>A <code>tbody</code> element's <span
;;  title="syntax-start-tag">start tag</span> may be omitted if the
;;  first thing inside the <code>tbody</code> element is a
;;  <code>tr</code> element, and if the element is not immediately
;;  preceded by a <code>tbody</code>, <code>thead</code>, or
;;  <code>tfoot</code> element whose <span title="syntax-end-tag">end
;;  tag</span> has been omitted. (It can't be omitted if the element is
;;  empty.)</p>
;;
;;  <!-- </tbody> -->
;;  <p>A <code>tbody</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>tbody</code> element is
;;  immediately followed by a <code>tbody</code> or <code>tfoot</code>
;;  element, or if there is no more content in the parent element.</p>
;;
;;  <!-- </tfoot> -->
;;  <p>A <code>tfoot</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>tfoot</code> element is
;;  immediately followed by a <code>tbody</code> element, or if there is
;;  no more content in the parent element.</p>
;;
;;  <!-- </tr> -->
;;  <p>A <code>tr</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>tr</code> element is
;;  immediately followed by another <code>tr</code> element, or if there
;;  is no more content in the parent element.</p>
;;
;;  <!-- </td> -->
;;  <p>A <code>td</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>td</code> element is
;;  immediately followed by a <code>td</code> or <code>th</code>
;;  element, or if there is no more content in the parent element.</p>
;;
;;  <!-- </th> -->
;;  <p>A <code>th</code> element's <span title="syntax-end-tag">end
;;  tag</span> may be omitted if the <code>th</code> element is
;;  immediately followed by a <code>td</code> or <code>th</code>
;;  element, or if there is no more content in the parent element.</p>
;;
;;  <p><strong>However</strong>, a <span title="syntax-start-tag">start
;;  tag</span> must never be omitted if it has any attributes.</p>
;;
;;
;;  <h5 id="element-restrictions">Restrictions on content models</h5>
;;
;;  <p>For historical reasons, certain elements have extra restrictions
;;  beyond even the restrictions given by their content model.</p>
;;
;;  <p>A <code>table</code> element must not contain <code>tr</code>
;;  elements, even though these elements are technically allowed inside
;;  <code>table</code> elements according to the content models
;;  described in this specification. (If a <code>tr</code> element is
;;  put inside a <code>table</code> in the markup, it will in fact imply
;;  a <code>tbody</code> start tag before it.)</p>
;;
;;  <p>A single <span title="syntax-newlines">newline</span> may be
;;  placed immediately after the <span title="syntax-start-tag">start
;;  tag</span> of <code>pre</code> and <code>textarea</code>
;;  elements. This does not affect the processing of the element. The
;;  otherwise optional <span title="syntax-newlines">newline</span>
;;  <em>must</em> be included if the element's contents themselves start
;;  with a <span title="syntax-newlines">newline</span> (because
;;  otherwise the leading newline in the contents would be treated like
;;  the optional newline, and ignored).</p>
;;
;;  <div class="example">
;;   <p>The following two <code>pre</code> blocks are equivalent:</p>
;;   <pre>&lt;pre>Hello&lt;/pre></pre>
;;   <pre>&lt;pre><br>Hello&lt;/pre></pre>
;;  </div>
;;
;;
;;  <h5 id="cdata-rcdata-restrictions">Restrictions on the contents of raw text and RCDATA elements</h5>
;;
;;  <p>The text in <span title="raw text elements">raw text</span> and
;;  <span>RCDATA elements</span> must not contain any occurrences of the
;;  string "<code title="">&lt;/</code>" (U+003C LESS-THAN SIGN, U+002F
;;  SOLIDUS) followed by characters that case-insensitively match the
;;  tag name of the element followed by one of U+0009 CHARACTER
;;  TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF), U+000D
;;  CARRIAGE RETURN (CR), U+0020 SPACE, U+003E GREATER-THAN SIGN (>), or
;;  U+002F SOLIDUS (/).</p>
;;
;;
;;  <h4>Text</h4>
;;
;;  <p><dfn title="syntax-text">Text</dfn> is allowed inside elements,
;;  attribute values, and comments. Text must consist of Unicode
;;  characters. Text must not contain U+0000 characters. Text must not
;;  contain permanently undefined Unicode characters (noncharacters).
;;  Text must not contain control characters other than <span
;;  title="space character">space characters</span>. Extra constraints
;;  are placed on what is and what is not allowed in text based on where
;;  the text is to be put, as described in the other sections.</p>
;;
;;
;;  <h5>Newlines</h5>
;;
;;  <p><dfn title="syntax-newlines">Newlines</dfn> in HTML may be
;;  represented either as U+000D CARRIAGE RETURN (CR) characters, U+000A
;;  LINE FEED (LF) characters, or pairs of U+000D CARRIAGE RETURN (CR),
;;  U+000A LINE FEED (LF) characters in that order.</p>
;;
;;  <p>Where <span title="syntax-charref">character references</span>
;;  are allowed, a character reference of a U+000A LINE FEED (LF)
;;  character (but not a U+000D CARRIAGE RETURN (CR) character) also
;;  represents a <span title="syntax-newlines">newline</span>.</p>
;;
;;
;;  <h4>Character references</h4>
;;
;;  <p>In certain cases described in other sections, <span
;;  title="syntax-text">text</span> may be mixed with <dfn
;;  title="syntax-charref">character references</dfn>. These can be used
;;  to escape characters that couldn't otherwise legally be included in
;;  <span title="syntax-text">text</span>.</p>
;;
;;  <p>Character references must start with a U+0026 AMPERSAND character
;;  (&amp;). Following this, there are three possible kinds of character
;;  references:</p>
;;
;;  <dl>
;;
;;   <dt>Named character references</dt>
;;
;;   <dd>The ampersand must be followed by one of the names given in the
;;   <span>named character references</span> section, using the same
;;   case. <span class="impl">The name must be one that is terminated by
;;   a U+003B SEMICOLON character (;).</span></dd>
;;
;;
;;   <dt>Decimal numeric character reference</dt>
;;
;;   <dd>The ampersand must be followed by a U+0023 NUMBER SIGN
;;   character (#), followed by one or more digits in the range U+0030
;;   DIGIT ZERO (0) to U+0039 DIGIT NINE (9), representing a base-ten
;;   integer that corresponds to a Unicode code point that is allowed
;;   according to the definition below. The digits must then be followed
;;   by a U+003B SEMICOLON character (;).</dd>
;;
;;
;;   <dt>Hexadecimal numeric character reference</dt>
;;
;;   <dd>The ampersand must be followed by a U+0023 NUMBER SIGN
;;   character (#), which must be followed by either a U+0078 LATIN
;;   SMALL LETTER X character (x) or a U+0058 LATIN CAPITAL LETTER X
;;   character (X), which must then be followed by one or more digits in
;;   the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9), U+0061
;;   LATIN SMALL LETTER A to U+0066 LATIN SMALL LETTER F, and U+0041
;;   LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F,
;;   representing a base-sixteen integer that corresponds to a Unicode
;;   code point that is allowed according to the definition below. The
;;   digits must then be followed by a U+003B SEMICOLON character
;;   (;).</dd>
;;
;;  </dl>
;;
;;  <p>The numeric character reference forms described above are allowed
;;  to reference any Unicode code point other than U+0000, U+000D,
;;  permanently undefined Unicode characters (noncharacters), and
;;  control characters other than <span title="space character">space
;;  characters</span>.</p>
;;
;;  <p>An <dfn title="syntax-ambiguous-ampersand">ambiguous
;;  ampersand</dfn> is a U+0026 AMPERSAND character (&amp;) that is
;;  followed by one or more characters in the range U+0030 DIGIT ZERO
;;  (0) to U+0039 DIGIT NINE (9), U+0061 LATIN SMALL LETTER A to U+007A
;;  LATIN SMALL LETTER Z, and U+0041 LATIN CAPITAL LETTER A to U+005A
;;  LATIN CAPITAL LETTER Z, followed by a U+003B SEMICOLON character
;;  (;), where these characters do not match any of the names given in
;;  the <span>named character references</span> section.</p>
;;
;;
;;  <h4>CDATA sections</h4>
;;
;;  <p><dfn title="syntax-cdata">CDATA sections</dfn> must start with
;;  the character sequence U+003C LESS-THAN SIGN, U+0021 EXCLAMATION
;;  MARK, U+005B LEFT SQUARE BRACKET, U+0043 LATIN CAPITAL LETTER C,
;;  U+0044 LATIN CAPITAL LETTER D, U+0041 LATIN CAPITAL LETTER A, U+0054
;;  LATIN CAPITAL LETTER T, U+0041 LATIN CAPITAL LETTER A, U+005B LEFT
;;  SQUARE BRACKET (<code title="">&lt;![CDATA[</code>). Following this
;;  sequence, the CDATA section may have <span
;;  title="syntax-text">text</span>, with the additional restriction
;;  that the text must not contain the three character sequence U+005D
;;  RIGHT SQUARE BRACKET, U+005D RIGHT SQUARE BRACKET, U+003E
;;  GREATER-THAN SIGN (<code title="">]]></code>). Finally, the CDATA
;;  section must be ended by the three character sequence U+005D RIGHT
;;  SQUARE BRACKET, U+005D RIGHT SQUARE BRACKET, U+003E GREATER-THAN
;;  SIGN (<code title="">]]></code>).</p>
;;
;;  <div class="example">
;;
;;   <p>CDATA sections can only be used in foreign content (MathML or
;;   SVG). In this example, a CDATA section is used to escape the
;;   contents of an <code>ms</code> element:</p>
;;
;;   <pre>&lt;p>You can add a string to a number, but this stringifies the number:&lt;/p>
;;&lt;math>
;; &lt;ms>&lt;![CDATA[x&lt;y]]>&lt;/ms>
;; &lt;mo>+&lt;/mo>
;; &lt;mn>3&lt;/mn>
;; &lt;mo>=&lt;/mo>
;; &lt;ms>&lt;![CDATA[x&lt;y3]]>&lt;/ms>
;;&lt;/math></pre>
;;
;;  </div>
;;
;;
;;  <h4>Comments</h4>
;;
;;  <p><dfn title="syntax-comments">Comments</dfn> must start with the
;;  four character sequence U+003C LESS-THAN SIGN, U+0021 EXCLAMATION
;;  MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS (<code
;;  title="">&lt;!--</code>). Following this sequence, the comment may
;;  have <span title="syntax-text">text</span>, with the additional
;;  restriction that the text must not start with a single U+003E
;;  GREATER-THAN SIGN character (&gt;), nor start with a U+002D
;;  HYPHEN-MINUS character (-) followed by a U+003E GREATER-THAN SIGN
;;  (&gt;) character, nor contain two consecutive U+002D HYPHEN-MINUS
;;  characters (<code title="">--</code>), nor end with a U+002D
;;  HYPHEN-MINUS character (-). Finally, the comment must be ended by
;;  the three character sequence U+002D HYPHEN-MINUS, U+002D
;;  HYPHEN-MINUS, U+003E GREATER-THAN SIGN (<code
;;  title="">--&gt;</code>).</p>
;;
;;
;;  <div class="impl">
;;
;;  <h3 id="parsing">Parsing HTML documents</h3>
;;
;;  <p><i>This section only applies to user agents, data mining tools,
;;  and conformance checkers.</i></p>
;;
;;  <p class="note">The rules for parsing XML documents into DOM trees
;;  are covered by the next section, entitled "<span>The XHTML
;;  syntax</span>".</p>
;;
;;  <p>For <span>HTML documents</span>, user agents must use the parsing
;;  rules described in this section to generate the DOM trees. Together,
;;  these rules define what is referred to as the <dfn>HTML
;;  parser</dfn>.</p>
;;
;;  <div class="note">
;;
;;   <p>While the HTML syntax described in this specification bears a
;;   close resemblance to SGML and XML, it is a separate language with
;;   its own parsing rules.</p>
;;
;;   <p>Some earlier versions of HTML (in particular from HTML2 to
;;   HTML4) were based on SGML and used SGML parsing rules. However, few
;;   (if any) web browsers ever implemented true SGML parsing for HTML
;;   documents; the only user agents to strictly handle HTML as an SGML
;;   application have historically been validators. The resulting
;;   confusion &mdash; with validators claiming documents to have one
;;   representation while widely deployed Web browsers interoperably
;;   implemented a different representation &mdash; has wasted decades
;;   of productivity. This version of HTML thus returns to a non-SGML
;;   basis.</p>
;;
;;   <p>Authors interested in using SGML tools in their authoring
;;   pipeline are encouraged to use XML tools and the XML serialization
;;   of HTML.</p>
;;
;;  </div>
;;
;;  <p>This specification defines the parsing rules for HTML documents,
;;  whether they are syntactically correct or not. Certain points in the
;;  parsing algorithm are said to be <dfn title="parse error">parse
;;  errors</dfn>. The error handling for parse errors is well-defined:
;;  user agents must either act as described below when encountering
;;  such problems, or must abort processing at the first error that they
;;  encounter for which they do not wish to apply the rules described
;;  below.</p>
;;
;;  <p>Conformance checkers must report at least one parse error
;;  condition to the user if one or more parse error conditions exist in
;;  the document and must not report parse error conditions if none
;;  exist in the document. Conformance checkers may report more than one
;;  parse error condition if more than one parse error condition exists
;;  in the document. Conformance checkers are not required to recover
;;  from parse errors.</p>
;;
;;  <p class="note">Parse errors are only errors with the
;;  <em>syntax</em> of HTML. In addition to checking for parse errors,
;;  conformance checkers will also verify that the document obeys all
;;  the other conformance requirements described in this
;;  specification.</p>
;;
;;  <p>For the purposes of conformance checkers, if a resource is
;;  determined to be in <span>the HTML syntax</span>, then it is an
;;  <span title="HTML documents">HTML document</span>.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Overview of the parsing model</h4>
;;
;;  <p>The input to the HTML parsing process consists of a stream of
;;  Unicode characters, which is passed through a
;;  <span>tokenization</span> stage followed by a <span>tree
;;  construction</span> stage. The output is a <code>Document</code>
;;  object.</p>
;;
;;  <p class="note">Implementations that <a href="#non-scripted">do not
;;  support scripting</a> do not have to actually create a DOM
;;  <code>Document</code> object, but the DOM tree in such cases is
;;  still used as the model for the rest of the specification.</p>
;;
;;  <p>In the common case, the data handled by the tokenization stage
;;  comes from the network, but <span title="dynamic markup
;;  insertion">it can also come from script</span> running in the user
;;  agent, e.g. using the <code
;;  title="dom-document-write">document.write()</code> API.</p>
;;
;;  <p><img src="images/parsing-model-overview.png" width="427" height="554" alt=""></p>
;;
;;  <p id="nestedParsing">There is only one set of states for the
;;  tokenizer stage and the tree construction stage, but the tree
;;  construction stage is reentrant, meaning that while the tree
;;  construction stage is handling one token, the tokenizer might be
;;  resumed, causing further tokens to be emitted and processed before
;;  the first token's processing is complete.</p>
;;
;;  <div class="example">
;;
;;   <p>In the following example, the tree construction stage will be
;;   called upon to handle a "p" start tag token while handling the
;;   "script" start tag token:</p>
;;
;;   <pre>...
;;&lt;script>
;; document.write('&lt;p>');
;;&lt;/script>
;;...</pre>
;;
;;  </div>
;;
;;  <p>To handle these cases, parsers have a <dfn>script nesting
;;  level</dfn>, which must be initially set to zero, and a <dfn>parser
;;  pause flag</dfn>, which must be initially set to false.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <dfn>input stream</dfn></h4>
;;
;;  <p>The stream of Unicode characters that comprises the input to the
;;  tokenization stage will be initially seen by the user agent as a
;;  stream of bytes (typically coming over the network or from the local
;;  file system). The bytes encode the actual characters according to a
;;  particular <em>character encoding</em>, which the user agent must
;;  use to decode the bytes into characters.</p>
;;
;;  <p class="note">For XML documents, the algorithm user agents must
;;  use to determine the character encoding is given by the XML
;;  specification. This section does not apply to XML documents. <a
;;  href="#refsXML">[XML]</a></p>
;;
;;
;;  <h5>Determining the character encoding</h5>
;;
;;  <p>In some cases, it might be impractical to unambiguously determine
;;  the encoding before parsing the document. Because of this, this
;;  specification provides for a two-pass mechanism with an optional
;;  pre-scan. Implementations are allowed, as described below, to apply
;;  a simplified parsing algorithm to whatever bytes they have available
;;  before beginning to parse the document. Then, the real parser is
;;  started, using a tentative encoding derived from this pre-parse and
;;  other out-of-band metadata. If, while the document is being loaded,
;;  the user agent discovers an encoding declaration that conflicts with
;;  this information, then the parser can get reinvoked to perform a
;;  parse of the document with the real encoding.</p>
;;
;;  <p id="documentEncoding">User agents must use the following
;;  algorithm (the <dfn>encoding sniffing algorithm</dfn>) to determine
;;  the character encoding to use when decoding a document in the first
;;  pass. This algorithm takes as input any out-of-band metadata
;;  available to the user agent (e.g. the <span
;;  title="Content-Type">Content-Type metadata</span> of the document)
;;  and all the bytes available so far, and returns an encoding and a
;;  <dfn title="concept-encoding-confidence">confidence</dfn>. The
;;  confidence is either <i>tentative</i>, <i>certain</i>, or
;;  <i>irrelevant</i>. The encoding used, and whether the confidence in
;;  that encoding is <i>tentative</i> or <i>certain</i>, is <a
;;  href="#meta-charset-during-parse">used during the parsing</a> to
;;  determine whether to <span>change the encoding</span>. If no
;;  encoding is necessary, e.g. because the parser is operating on a
;;  stream of Unicode characters and doesn't have to use an encoding at
;;  all, then the <span
;;  title="concept-encoding-confidence">confidence</span> is
;;  <i>irrelevant</i>.</p>
;;
;;  <ol>
;;
;;   <li><p>If the user has explicitly instructed the user agent to
;;   override the document's character encoding with a specific
;;   encoding, optionally return that encoding with the <span
;;   title="concept-encoding-confidence">confidence</span>
;;   <i>certain</i> and abort these steps.</p></li>
;;
;;   <li><p>If the transport layer specifies an encoding, and it is
;;   supported, return that encoding with the <span
;;   title="concept-encoding-confidence">confidence</span>
;;   <i>certain</i>, and abort these steps.</p></li>
;;
;;   <li><p>The user agent may wait for more bytes of the resource to be
;;   available, either in this step or at any later step in this
;;   algorithm. For instance, a user agent might wait 500ms or 512
;;   bytes, whichever came first. In general preparsing the source to
;;   find the encoding improves performance, as it reduces the need to
;;   throw away the data structures used when parsing upon finding the
;;   encoding information. However, if the user agent delays too long to
;;   obtain data to determine the encoding, then the cost of the delay
;;   could outweigh any performance improvements from the
;;   preparse.</p></li>
;;
;;   <li><p>For each of the rows in the following table, starting with
;;   the first one and going down, if there are as many or more bytes
;;   available than the number of bytes in the first column, and the
;;   first bytes of the file match the bytes given in the first column,
;;   then return the encoding given in the cell in the second column of
;;   that row, with the <span
;;   title="concept-encoding-confidence">confidence</span>
;;   <i>certain</i>, and abort these steps:</p>
;;
;;    <!-- this table is present in several forms in this file; keep them in sync -->
;;    <table>
;;     <thead>
;;      <tr>
;;       <th>Bytes in Hexadecimal
;;       <th>Encoding
;;     <tbody>
;;<!-- nobody uses this
;;      <tr>
;;       <td>00 00 FE FF
;;       <td>UTF-32BE
;;      <tr>
;;       <td>FF FE 00 00
;;       <td>UTF-32LE
;;-->
;;      <tr>
;;       <td>FE FF
;;       <td>Big-endian UTF-16
;;      <tr>
;;       <td>FF FE
;;       <td>Little-endian UTF-16
;;      <tr>
;;       <td>EF BB BF
;;       <td>UTF-8
;;<!-- nobody uses this
;;      <tr>
;;       <td>DD 73 66 73
;;       <td>UTF-EBCDIC
;;-->
;;    </table>
;;
;;   <p class="note">This step looks for Unicode Byte Order Marks
;;   (BOMs).</p></li>
;;
;;   <li><p>Otherwise, the user agent will have to search for explicit
;;   character encoding information in the file itself. This should
;;   proceed as follows:
;;
;;    <p>Let <var title="">position</var> be a pointer to a byte in the
;;    input stream, initially pointing at the first byte. If at any
;;    point during these substeps the user agent either runs out of
;;    bytes or decides that scanning further bytes would not be
;;    efficient, then skip to the next step of the overall character
;;    encoding detection algorithm. User agents may decide that scanning
;;    <em>any</em> bytes is not efficient, in which case these substeps
;;    are entirely skipped.</p>
;;
;;    <p>Now, repeat the following "two" steps until the algorithm
;;    aborts (either because user agent aborts, as described above, or
;;    because a character encoding is found):</p>
;;
;;    <ol>
;;
;;     <li><p>If <var title="">position</var> points to:</p>
;;
;;      <dl class="switch">
;;
;;       <dt>A sequence of bytes starting with: 0x3C 0x21 0x2D 0x2D (ASCII '&lt;!--')</dt>
;;       <dd>
;;
;;        <p>Advance the <var title="">position</var> pointer so that it
;;        points at the first 0x3E byte which is preceded by two 0x2D
;;        bytes (i.e. at the end of an ASCII '-->' sequence) and comes
;;        after the 0x3C byte that was found. (The two 0x2D bytes can be
;;        the same as the those in the '&lt;!--' sequence.)</p>
;;
;;       </dd>
;;
;;       <dt>A sequence of bytes starting with: 0x3C, 0x4D or 0x6D, 0x45 or 0x65, 0x54 or 0x74, 0x41 or 0x61, and finally one of 0x09, 0x0A, 0x0C, 0x0D, 0x20, 0x2F (case-insensitive ASCII '&lt;meta' followed by a space or slash)</dt>
;;       <dd>
;;
;;        <ol>
;;
;;         <li><p>Advance the <var title="">position</var> pointer so
;;         that it points at the next 0x09, 0x0A, 0x0C, 0x0D, 0x20, or
;;         0x2F byte (the one in sequence of characters matched
;;         above).</p></li>
;;
;;         <li><p>Let <var title="">attribute list</var> be an empty
;;         list of strings.</p></li> <!-- so long as we only care about
;;         http-equiv, content, and charset, this can be a 3-bit
;;         bitfield -->
;;
;;         <li><p>Let <var title="">got pragma</var> be false.</p></li>
;;
;;         <li><p>Let <var title="">mode</var> be null.</p></li>
;;
;;         <li><p>Let <var title="">charset</var> be the null value
;;         (which, for the purposes of this algorithm, is distinct from
;;         an unrecognised encoding or the empty string).</p></li>
;;
;;         <li><p><i>Attributes</i>: <span
;;         title="concept-get-attributes-when-sniffing">Get an
;;         attribute</span> and its value. If no attribute was sniffed,
;;         then jump to the <i>processing</i> step below.</p></li>
;;
;;         <li><p>If the attribute's name is already in <var
;;         title="">attribute list</var>, then return to the step
;;         labeled <i>attributes</i>.</p>
;;
;;         <li>
;;
;;          <p>Run the appropriate step from the following list, if one
;;          applies:</p>
;;
;;          <dl class="switch">
;;
;;           <dt>If the attribute's name is "<code
;;           title="">http-equiv</code>"</dt>
;;
;;           <dd><p>If the attribute's value is "<code
;;           title="">content-type</code>", then set <var title="">got
;;           pragma</var> to true.</p></dd>
;;
;;           <dt>If the attribute's name is "<code
;;           title="">charset</code>"</dt>
;;
;;           <dd><p>If <var title="">charset</var> is still set to null,
;;           let <var title="">charset</var> be the encoding
;;           corresponding to the attribute's value, and set <var
;;           title="">mode</var> to "charset".</p></dd>
;;
;;           <dt>If the attribute's name is "<code
;;           title="">content</code>"</dt>
;;
;;           <dd><p>Apply the <span>algorithm for extracting an encoding
;;           from a Content-Type</span>, giving the attribute's value as
;;           the string to parse. If an encoding is returned, and if
;;           <var title="">charset</var> is still set to null, let <var
;;           title="">charset</var> be the encoding returned, and set
;;           <var title="">mode</var> to "pragma".</p></dd>
;;
;;          </dl>
;;
;;         </li>
;;
;;         <li><p>Return to the step labeled <i>attributes</i>.</p></li>
;;
;;         <li><p><i>Processing</i>: If <var title="">mode</var> is
;;         null, then jump to the second step of the overall "two step"
;;         algorithm.</p></li>
;;
;;         <li><p>If <var title="">mode</var> is "pragma" but <var
;;         title="">got pragma</var> is false, then jump to the second
;;         step of the overall "two step" algorithm.</p></li>
;;
;;         <li><p>If <var title="">charset</var> is a UTF-16 encoding,
;;         change the value of <var title="">charset</var> to
;;         UTF-8.</p></li>
;;
;;         <li><p>If <var title="">charset</var> is not a supported
;;         character encoding, then jump to the second step of the
;;         overall "two step" algorithm.</p></li>
;;
;;         <li><p>Return the encoding given by <var
;;         title="">charset</var>, with <span
;;         title="concept-encoding-confidence">confidence</span>
;;         <i>tentative</i>, and abort all these steps.</p></li>
;;
;;        </ol>
;;
;;       </dd>
;;
;;       <dt>A sequence of bytes starting with a 0x3C byte (ASCII &lt;), optionally a 0x2F byte (ASCII /), and finally a byte in the range 0x41-0x5A or 0x61-0x7A (an ASCII letter)</dt>
;;       <dd>
;;
;;        <ol>
;;
;;         <li><p>Advance the <var title="">position</var> pointer so
;;         that it points at the next 0x09 (ASCII TAB), 0x0A (ASCII LF),
;;         0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII space), or 0x3E
;;         (ASCII >) byte.</p></li>
;;
;;         <li><p>Repeatedly <span
;;         title="concept-get-attributes-when-sniffing">get an
;;         attribute</span> until no further attributes can be found,
;;         then jump to the second step in the overall "two step"
;;         algorithm.</p></li>
;;
;;        </ol>
;;
;;       </dd>
;;
;;       <dt>A sequence of bytes starting with: 0x3C 0x21 (ASCII '&lt;!')</dt>
;;       <dt>A sequence of bytes starting with: 0x3C 0x2F (ASCII '&lt;/')</dt>
;;       <dt>A sequence of bytes starting with: 0x3C 0x3F (ASCII '&lt;?')</dt>
;;       <dd>
;;
;;        <p>Advance the <var title="">position</var> pointer so that it
;;        points at the first 0x3E byte (ASCII >) that comes after the
;;        0x3C byte that was found.</p>
;;
;;       </dd>
;;
;;       <dt>Any other byte</dt>
;;       <dd>
;;
;;        <p>Do nothing with that byte.</p>
;;
;;       </dd>
;;
;;      </dl>
;;
;;     </li>
;;
;;     <li>Move <var title="">position</var> so it points at the next
;;     byte in the input stream, and return to the first step of this
;;     "two step" algorithm.</li>
;;
;;    </ol>
;;
;;    <p>When the above "two step" algorithm says to <dfn
;;    title="concept-get-attributes-when-sniffing">get an
;;    attribute</dfn>, it means doing this:</p>
;;
;;    <ol>
;;
;;     <li><p>If the byte at <var title="">position</var> is one of 0x09
;;     (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII FF), 0x0D (ASCII CR),
;;     0x20 (ASCII space), or 0x2F (ASCII /) then advance <var
;;     title="">position</var> to the next byte and redo this
;;     substep.</p></li>
;;
;;     <li><p>If the byte at <var title="">position</var> is 0x3E (ASCII
;;     >), then abort the "get an attribute" algorithm. There isn't
;;     one.</p></li>
;;
;;     <li><p>Otherwise, the byte at <var title="">position</var> is the
;;     start of the attribute name. Let <var title="">attribute
;;     name</var> and <var title="">attribute value</var> be the empty
;;     string.</p></li>
;;
;;     <li><p><i>Attribute name</i>: Process the byte at <var
;;     title="">position</var> as follows:</p>
;;
;;      <dl class="switch">
;;
;;       <dt>If it is 0x3D (ASCII =), and the <var title="">attribute
;;       name</var> is longer than the empty string</dt>
;;
;;       <dd>Advance <var title="">position</var> to the next byte and
;;       jump to the step below labeled <i>value</i>.</dd>
;;
;;       <dt>If it is 0x09 (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII
;;       FF), 0x0D (ASCII CR), or 0x20 (ASCII space)</dt>
;;
;;       <dd>Jump to the step below labeled <i>spaces</i>.</dd>
;;
;;       <dt>If it is 0x2F (ASCII /) or 0x3E (ASCII >)</dt>
;;
;;       <dd>Abort the "get an attribute" algorithm. The attribute's
;;       name is the value of <var title="">attribute name</var>, its
;;       value is the empty string.</dd>
;;
;;       <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII
;;       Z)</dt>
;;
;;       <dd>Append the Unicode character with code point <span title=""><var
;;       title="">b</var>+0x20</span> to <var title="">attribute
;;       name</var> (where <var title="">b</var> is the value of the
;;       byte at <var title="">position</var>).</dd>
;;
;;       <dt>Anything else</dt>
;;
;;       <dd>Append the Unicode character with the same code point as the
;;       value of the byte at <var title="">position</var>) to <var
;;       title="">attribute name</var>. (It doesn't actually matter how
;;       bytes outside the ASCII range are handled here, since only
;;       ASCII characters can contribute to the detection of a character
;;       encoding.)</dd>
;;
;;      </dl>
;;
;;     </li>
;;
;;     <li><p>Advance <var title="">position</var> to the next byte and
;;     return to the previous step.</p></li>
;;
;;     <li><p><i>Spaces</i>: If the byte at <var
;;     title="">position</var> is one of 0x09 (ASCII TAB), 0x0A (ASCII
;;     LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20 (ASCII space) then
;;     advance <var title="">position</var> to the next byte, then,
;;     repeat this step.</p></li>
;;
;;     <li><p>If the byte at <var title="">position</var> is
;;     <em>not</em> 0x3D (ASCII =), abort the "get an attribute"
;;     algorithm. The attribute's name is the value of <var
;;     title="">attribute name</var>, its value is the empty
;;     string.</p></li>
;;
;;     <li><p>Advance <var title="">position</var> past the 0x3D (ASCII
;;     =) byte.</p></li>
;;
;;     <li><p><i>Value</i>: If the byte at <var
;;     title="">position</var> is one of 0x09 (ASCII TAB), 0x0A (ASCII
;;     LF), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20 (ASCII space) then
;;     advance <var title="">position</var> to the next byte, then,
;;     repeat this step.</p></li>
;;
;;     <li><p>Process the byte at <var title="">position</var> as
;;     follows:</p>
;;
;;      <dl class="switch">
;;
;;       <dt>If it is 0x22 (ASCII ") or 0x27 (ASCII ')</dt>
;;
;;       <dd>
;;
;;        <ol>
;;
;;         <li>Let <var title="">b</var> be the value of the byte at
;;         <var title="">position</var>.</li>
;;
;;         <li>Advance <var title="">position</var> to the next
;;         byte.</li>
;;
;;         <li>If the value of the byte at <var title="">position</var>
;;         is the value of <var title="">b</var>, then advance <var
;;         title="">position</var> to the next byte and abort the "get
;;         an attribute" algorithm. The attribute's name is the value of
;;         <var title="">attribute name</var>, and its value is the
;;         value of <var title="">attribute value</var>.</li>
;;
;;         <li>Otherwise, if the value of the byte at <var
;;         title="">position</var> is in the range 0x41 (ASCII A) to
;;         0x5A (ASCII Z), then append a Unicode character to <var
;;         title="">attribute value</var> whose code point is 0x20 more
;;         than the value of the byte at <var
;;         title="">position</var>.</li>
;;
;;         <li>Otherwise, append a Unicode character to <var
;;         title="">attribute value</var> whose code point is the same as
;;         the value of the byte at <var title="">position</var>.</li>
;;
;;         <li>Return to the second step in these substeps.</li>
;;
;;        </ol>
;;
;;       </dd>
;;
;;       <dt>If it is 0x3E (ASCII >)</dt>
;;
;;       <dd>Abort the "get an attribute" algorithm. The attribute's
;;       name is the value of <var title="">attribute name</var>, its
;;       value is the empty string.</dd>
;;
;;
;;       <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII
;;       Z)</dt>
;;
;;       <dd>Append the Unicode character with code point <span title=""><var
;;       title="">b</var>+0x20</span> to <var title="">attribute
;;       value</var> (where <var title="">b</var> is the value of the
;;       byte at <var title="">position</var>). Advance <var
;;       title="">position</var> to the next byte.</dd>
;;
;;       <dt>Anything else</dt>
;;
;;       <dd>Append the Unicode character with the same code point as the
;;       value of the byte at <var title="">position</var>) to <var
;;       title="">attribute value</var>. Advance <var
;;       title="">position</var> to the next byte.</dd>
;;
;;      </dl>
;;
;;     </li>
;;
;;     <li><p>Process the byte at <var title="">position</var> as
;;     follows:</p>
;;
;;      <dl class="switch">
;;
;;       <dt>If it is 0x09 (ASCII TAB), 0x0A (ASCII LF), 0x0C (ASCII
;;       FF), 0x0D (ASCII CR), 0x20 (ASCII space), or 0x3E (ASCII
;;       >)</dt>
;;
;;       <dd>Abort the "get an attribute" algorithm. The attribute's
;;       name is the value of <var title="">attribute name</var> and its
;;       value is the value of <var title="">attribute value</var>.</dd>
;;
;;       <dt>If it is in the range 0x41 (ASCII A) to 0x5A (ASCII
;;       Z)</dt>
;;
;;       <dd>Append the Unicode character with code point <span title=""><var
;;       title="">b</var>+0x20</span> to <var title="">attribute
;;       value</var> (where <var title="">b</var> is the value of the
;;       byte at <var title="">position</var>).</dd>
;;
;;       <dt>Anything else</dt>
;;
;;       <dd>Append the Unicode character with the same code point as the
;;       value of the byte at <var title="">position</var>) to <var
;;       title="">attribute value</var>.</dd>
;;
;;      </dl>
;;
;;     </li>
;;
;;     <li><p>Advance <var title="">position</var> to the next byte and
;;     return to the previous step.</p></li>
;;
;;    </ol>
;;
;;    <p>For the sake of interoperability, user agents should not use a
;;    pre-scan algorithm that returns different results than the one
;;    described above. (But, if you do, please at least let us know, so
;;    that we can improve this algorithm and benefit everyone...)</p>
;;
;;   </li>
;;
;;   <li><p>If the user agent has information on the likely encoding for
;;   this page, e.g. based on the encoding of the page when it was last
;;   visited, then return that encoding, with the <span
;;   title="concept-encoding-confidence">confidence</span>
;;   <i>tentative</i>, and abort these steps.</p></li>
;;
;;   <li>
;;
;;    <p>The user agent may attempt to autodetect the character encoding
;;    from applying frequency analysis or other algorithms to the data
;;    stream. Such algorithms may use information about the resource
;;    other than the resource's contents, including the address of the
;;    resource. If autodetection succeeds in determining a character
;;    encoding, then return that encoding, with the <span
;;    title="concept-encoding-confidence">confidence</span>
;;    <i>tentative</i>, and abort these steps. <a
;;    href="#refsUNIVCHARDET">[UNIVCHARDET]</a></p>
;;
;;    <p class="note">The UTF-8 encoding has a highly detectable bit
;;    pattern. Documents that contain bytes with values greater than
;;    0x7F which match the UTF-8 pattern are very likely to be UTF-8,
;;    while documents with byte sequences that do not match it are very
;;    likely not. User-agents are therefore encouraged to search for
;;    this common encoding. <a href="#refsPPUTF8">[PPUTF8]</a> <a
;;    href="#refsUTF8DET">[UTF8DET]</a></p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>Otherwise, return an implementation-defined or user-specified
;;    default character encoding, with the <span
;;    title="concept-encoding-confidence">confidence</span>
;;    <i>tentative</i>.</p>
;;
;;    <p>In controlled environments or in environments where the
;;    encoding of documents can be prescribed (for example, for user
;;    agents intended for dedicated use in new networks), the
;;    comprehensive <code title="">UTF-8</code> encoding is
;;    suggested.</p>
;;
;;    <p>In other environments, the default encoding is typically
;;    dependent on the user's locale (an approximation of the languages,
;;    and thus often encodings, of the pages that the user is likely to
;;    frequent). The following table gives suggested defaults based on
;;    the user's locale, for compatibility with legacy content. Locales
;;    are identified by BCP 47 language tags. <a
;;    href="#refsBCP47">[BCP47]</a></p>
;;
;;    <!-- based on mozilla 1.9.1 localizations:
;;         http://mxr.mozilla.org/l10n-mozilla1.9.1/find?string=global%2Fintl.properties&tree=l10n-mozilla1.9.1&hint= -->
;;
;;    <table>
;;     <thead>
;;      <tr>
;;       <th>Locale language
;;       <th>Suggested default encoding
;;     <tbody>
;;
;;      <tr>
;;       <td>ar
;;       <td>UTF-8
;;
;;      <tr>
;;       <td>be
;;       <td>ISO-8859-5
;;
;;      <tr>
;;       <td>bg
;;       <td>windows-1251
;;
;;      <tr>
;;       <td>cs<!-- -CZ -->
;;       <td>ISO-8859-2
;;
;;      <tr>
;;       <td>cy
;;       <td>UTF-8
;;
;;      <tr>
;;       <td>fa<!-- -IR -->
;;       <td>UTF-8
;;
;;      <tr>
;;       <td>he<!-- -IL -->
;;       <td>windows-1255
;;
;;      <tr>
;;       <td>hr
;;       <td>UTF-8
;;
;;      <tr>
;;       <td>hu<!-- -HU -->
;;       <td>ISO-8859-2
;;
;;      <tr>
;;       <td>ja <!-- and ja-JP-mac -->
;;       <td>Windows-31J <!-- Shift_JIS -->
;;
;;      <tr>
;;       <td>kk
;;       <td>UTF-8
;;
;;      <tr>
;;       <td>ko<!-- -KR -->
;;       <td>windows-949 <!-- EUC-KR -->
;;
;;      <tr>
;;       <td>ku
;;       <td>windows-1254 <!-- ISO-8859-9 -->
;;
;;      <tr>
;;       <td>lt
;;       <td>windows-1257
;;
;;      <tr>
;;       <td>lv<!-- -LV -->
;;       <td>ISO-8859-13
;;
;;      <tr>
;;       <td>mk<!-- -MK -->
;;       <td>UTF-8
;;
;;      <tr>
;;       <td>or
;;       <td>UTF-8
;;
;;      <tr>
;;       <td>pl<!-- -PL -->
;;       <td>ISO-8859-2
;;
;;      <tr>
;;       <td>ro
;;       <td>UTF-8
;;
;;      <tr>
;;       <td>ru
;;       <td>windows-1251
;;
;;      <tr>
;;       <td>sk
;;       <td>windows-1250
;;
;;      <tr>
;;       <td>sl
;;       <td>ISO-8859-2
;;
;;      <tr>
;;       <td>sr
;;       <td>UTF-8
;;
;;      <tr>
;;       <td>th
;;       <td>windows-874 <!-- TIS-620 -->
;;
;;      <tr>
;;       <td>tr<!-- -TR -->
;;       <td>windows-1254 <!-- ISO-8859-9 -->
;;
;;      <tr>
;;       <td>uk
;;       <td>windows-1251
;;
;;      <tr>
;;       <td>vi
;;       <td>UTF-8
;;
;;      <tr>
;;       <td>zh-CN
;;       <td>GB18030
;;
;;      <tr>
;;       <td>zh-TW
;;       <td>Big5
;;
;;      <tr>
;;       <td>All other locales
;;       <td>windows-1252
;;
;;    </table>
;;
;;   </li>
;;
;;  </ol>
;;
;;  <p>The <span>document's character encoding</span> must immediately
;;  be set to the value returned from this algorithm, at the same time
;;  as the user agent uses the returned value to select the decoder to
;;  use for the input stream.</p>
;;
;;  <p class="note">This algorithm is a <span>willful violation</span>
;;  of the HTTP specification, which requires that the encoding be
;;  assumed to be ISO-8859-1 in the absence of a <span>character
;;  encoding declaration</span> to the contrary, and of RFC 2046,
;;  which requires that the encoding be assumed to be US-ASCII in the
;;  absence of a <span>character encoding declaration</span> to the
;;  contrary. This specification's third approach is motivated by a
;;  desire to be maximally compatible with legacy content. <a
;;  href="#refsHTTP">[HTTP]</a> <a href="#refsRFC2046">[RFC2046]</a></p>
;;
;;
;;  <h5>Character encodings</h5>
;;
;;  <p>User agents must at a minimum support the UTF-8 and Windows-1252
;;  encodings, but may support more. <a
;;  href="#refsRFC3629">[RFC3629]</a> <a
;;  href="#refsWIN1252">[WIN1252]</a></p>
;;
;;  <p class="note">It is not unusual for Web browsers to support dozens
;;  if not upwards of a hundred distinct character encodings.</p>
;;
;;  <p>User agents must support the <span>preferred MIME name</span> of
;;  every character encoding they support, and should support all the
;;  IANA-registered names and aliases of every character encoding they
;;  support. <a href="#refsIANACHARSET">[IANACHARSET]</a></p>
;;
;;  <p>When comparing a string specifying a character encoding with the
;;  name or alias of a character encoding to determine if they are
;;  equal, user agents must remove any leading or trailing <span
;;  title="space character">space characters</span> in both names, and
;;  then perform the comparison in an <span>ASCII
;;  case-insensitive</span> manner.</p>
;;
;;  <hr>
;;
;;  <p>When a user agent would otherwise use an encoding given in the
;;  first column of the following table to either convert content to
;;  Unicode characters or convert Unicode characters to bytes, it must
;;  instead use the encoding given in the cell in the second column of
;;  the same row. When a byte or sequence of bytes is treated
;;  differently due to this encoding aliasing, it is said to have been
;;  <dfn>misinterpreted for compatibility</dfn>.</p>
;;
;;  <table id="table-encoding-overrides">
;;   <caption>Character encoding overrides</caption>
;;   <thead>
;;    <tr> <th> Input encoding <th> Replacement encoding <th> References
;;   <tbody>
;;    <!-- how about EUC-JP? -->
;;    <tr> <td> EUC-KR <td> windows-949 <td>
;;         <a href="#refsEUCKR">[EUCKR]</a>
;;         <a href="#refsWIN949">[WIN949]</a>
;;    <tr> <td> GB2312 <td> GBK <td>
;;         <a href="#refsRFC1345">[RFC1345]</a>
;;         <a href="#refsGBK">[GBK]</a>
;;    <tr> <td> GB_2312-80 <td> GBK <td>
;;         <a href="#refsRFC1345">[RFC1345]</a>
;;         <a href="#refsGBK">[GBK]</a>
;;    <tr> <td> ISO-8859-1 <td> windows-1252 <td>
;;         <a href="#refsRFC1345">[RFC1345]</a>
;;         <a href="#refsWIN1252">[WIN1252]</a>
;;    <tr> <td> ISO-8859-9 <td> windows-1254 <td>
;;         <a href="#refsRFC1345">[RFC1345]</a>
;;         <a href="#refsWIN1254">[WIN1254]</a>
;;    <tr> <td> ISO-8859-11 <td> windows-874 <td>
;;         <a href="#refsISO885911">[ISO885911]</a>
;;         <a href="#refsWIN874">[WIN874]</a>
;;    <tr> <td> KS_C_5601-1987 <td> windows-949 <td>
;;         <a href="#refsRFC1345">[RFC1345]</a>
;;         <a href="#refsWIN949">[WIN949]</a>
;;    <tr> <td> Shift_JIS <td> Windows-31J <td>
;;         <a href="#refsSHIFTJIS">[SHIFTJIS]</a>
;;         <a href="#refsWIN31J">[WIN31J]</a>
;;    <tr> <td> TIS-620 <td> windows-874 <td>
;;         <a href="#refsTIS620">[TIS620]</a>
;;         <a href="#refsWIN874">[WIN874]</a>
;;    <tr> <td> US-ASCII <td> windows-1252 <td>
;;         <a href="#refsRFC1345">[RFC1345]</a>
;;         <a href="#refsWIN1252">[WIN1252]</a>
;;   </tbody>
;;  </table>
;;
;;  <p class="note">The requirement to treat certain encodings as other
;;  encodings according to the table above is a <span>willful
;;  violation</span> of the W3C Character Model specification, motivated
;;  by a desire for compatibility with legacy content. <a
;;  href="#refsCHARMOD">[CHARMOD]</a></p>
;;
;;  <p>When a user agent is to use the UTF-16 encoding but no BOM has
;;  been found, user agents must default to UTF-16LE.</p>
;;
;;  <p class="note">The requirement to default UTF-16 to LE rather than
;;  BE is a <span>willful violation</span> of RFC 2781, motivated by a
;;  desire for compatibility with legacy content. <a
;;  href="#refsRFC2781">[RFC2781]</a></p>
;;
;;  <hr>
;;
;;  <p>User agents must not support the CESU-8, UTF-7, BOCU-1 and SCSU
;;  encodings. <a href="#refsCESU8">[CESU8]</a> <a
;;  href="#refsUTF7">[UTF7]</a> <a href="#refsBOCU1">[BOCU1]</a> <a
;;  href="#refsSCSU">[SCSU]</a></p>
;;
;;  <p>Support for encodings based on EBCDIC is not recommended. This
;;  encoding is rarely used for publicly-facing Web content.</p>
;;
;;  <p>Support for UTF-32 is not recommended. This encoding is rarely
;;  used, and frequently implemented incorrectly.</p>
;;
;;  <p class="note">This specification does not make any attempt to
;;  support EBCDIC-based encodings and UTF-32 in its algorithms; support
;;  and use of these encodings can thus lead to unexpected behavior in
;;  implementations of this specification.</p>
;;
;;
;;
;;  <h5>Preprocessing the input stream</h5>
;;
;;  <p>Given an encoding, the bytes in the input stream must be
;;  converted to Unicode characters for the tokenizer, as described by
;;  the rules for that encoding, except that the leading U+FEFF BYTE
;;  ORDER MARK character, if any, must not be stripped by the encoding
;;  layer (it is stripped by the rule below).</p> <!-- this is to
;;  prevent two leading BOMs from being both stripped, once by the
;;  decoder, and once by the parser -->
;;
;;  <p>Bytes or sequences of bytes in the original byte stream that
;;  could not be converted to Unicode code points must be converted to
;;  U+FFFD REPLACEMENT CHARACTERs.</p>
;;
;;  <p class="note">Bytes or sequences of bytes in the original byte
;;  stream that did not conform to the encoding specification
;;  (e.g. invalid UTF-8 byte sequences in a UTF-8 input stream) are
;;  errors that conformance checkers are expected to report.</p>
;;
;;  <p>Any byte or sequence of bytes in the original byte stream that is
;;  <span>misinterpreted for compatibility</span> is a <span>parse
;;  error</span>.</p>
;;
;;  <p>One leading U+FEFF BYTE ORDER MARK character must be ignored if
;;  any are present.</p>
;;
;;  <p class="note">The requirement to strip a U+FEFF BYTE ORDER MARK
;;  character regardless of whether that character was used to determine
;;  the byte order is a <span>willful violation</span> of Unicode,
;;  motivated by a desire to increase the resilience of user agents in
;;  the face of na&iuml;ve transcoders.</p>
;;
;;  <p>All U+0000 NULL characters and code points in the range U+D800 to
;;  U+DFFF<!-- surrogates not allowed e.g. in UTF-8, and we don't want
;;  them to suddenly turn into codepoints when they go through a UTF-16
;;  pipe --> in the input must be replaced by U+FFFD REPLACEMENT
;;  CHARACTERs. Any occurrences of such characters and code points are
;;  <span title="parse error">parse errors</span>.</p>
;;
;;  <p>Any occurrences of any characters in the ranges U+0001 to U+0008,
;;  <!-- HT, LF allowed --> <!-- U+000B is in the next list --> <!-- FF,
;;  CR allowed --> U+000E to U+001F, <!-- ASCII allowed --> U+007F
;;  <!--to U+0084, (U+0085 NEL not allowed), U+0086--> to U+009F, U+FDD0
;;  to U+FDEF, and characters U+000B, U+FFFE, U+FFFF, U+1FFFE, U+1FFFF,
;;  U+2FFFE, U+2FFFF, U+3FFFE, U+3FFFF, U+4FFFE, U+4FFFF, U+5FFFE,
;;  U+5FFFF, U+6FFFE, U+6FFFF, U+7FFFE, U+7FFFF, U+8FFFE, U+8FFFF,
;;  U+9FFFE, U+9FFFF, U+AFFFE, U+AFFFF, U+BFFFE, U+BFFFF, U+CFFFE,
;;  U+CFFFF, U+DFFFE, U+DFFFF, U+EFFFE, U+EFFFF, U+FFFFE, U+FFFFF,
;;  U+10FFFE, and U+10FFFF are <span title="parse error">parse
;;  errors</span>. These are all control characters or permanently
;;  undefined Unicode characters (noncharacters).</p>
;;
;;  <p>U+000D CARRIAGE RETURN (CR) characters and U+000A LINE FEED (LF)
;;  characters are treated specially. Any CR characters that are
;;  followed by LF characters must be removed, and any CR characters not
;;  followed by LF characters must be converted to LF characters. Thus,
;;  newlines in HTML DOMs are represented by LF characters, and there
;;  are never any CR characters in the input to the
;;  <span>tokenization</span> stage.</p>
;;
;;  <p>The <dfn>next input character</dfn> is the first character in the
;;  input stream that has not yet been <dfn>consumed</dfn>. Initially,
;;  the <i>next input character</i> is the first character in the
;;  input. The <dfn>current input character</dfn> is the last character
;;  to have been <i>consumed</i>.</p>
;;
;;  <p>The <dfn>insertion point</dfn> is the position (just before a
;;  character or just before the end of the input stream) where content
;;  inserted using <code
;;  title="dom-document-write">document.write()</code> is actually
;;  inserted. The insertion point is relative to the position of the
;;  character immediately after it, it is not an absolute offset into
;;  the input stream. Initially, the insertion point is
;;  undefined.</p>
;;
;;  <p>The "EOF" character in the tables below is a conceptual character
;;  representing the end of the <span>input stream</span>. If the parser
;;  is a <span>script-created parser</span>, then the end of the
;;  <span>input stream</span> is reached when an <dfn>explicit "EOF"
;;  character</dfn> (inserted by the <code
;;  title="dom-document-close">document.close()</code> method) is
;;  consumed. Otherwise, the "EOF" character is not a real character in
;;  the stream, but rather the lack of any further characters.</p>
;;
;;
;;  <h5>Changing the encoding while parsing</h5>
;;
;;  <p>When the parser requires the user agent to <dfn>change the
;;  encoding</dfn>, it must run the following steps. This might happen
;;  if the <span>encoding sniffing algorithm</span> described above
;;  failed to find an encoding, or if it found an encoding that was not
;;  the actual encoding of the file.</p>
;;
;;  <ol>
;;
;;   <li>If the new encoding is identical or equivalent to the encoding
;;   that is already being used to interpret the input stream, then set
;;   the <span title="concept-encoding-confidence">confidence</span> to
;;   <i>certain</i> and abort these steps. This happens when the
;;   encoding information found in the file matches what the
;;   <span>encoding sniffing algorithm</span> determined to be the
;;   encoding, and in the second pass through the parser if the first
;;   pass found that the encoding sniffing algorithm described in the
;;   earlier section failed to find the right encoding.</li>
;;
;;   <li>If the encoding that is already being used to interpret the
;;   input stream is a UTF-16 encoding, then set the <span
;;   title="concept-encoding-confidence">confidence</span> to
;;   <i>certain</i> and abort these steps. The new encoding is ignored;
;;   if it was anything but the same encoding, then it would be clearly
;;   incorrect.</li>
;;
;;   <li>If the new encoding is a UTF-16 encoding, change it to
;;   UTF-8.</li>
;;
;;   <li>If all the bytes up to the last byte converted by the current
;;   decoder have the same Unicode interpretations in both the current
;;   encoding and the new encoding, and if the user agent supports
;;   changing the converter on the fly, then the user agent may change
;;   to the new converter for the encoding on the fly. Set the
;;   <span>document's character encoding</span> and the encoding used to
;;   convert the input stream to the new encoding, set the <span
;;   title="concept-encoding-confidence">confidence</span> to
;;   <i>certain</i>, and abort these steps.</li>
;;
;;   <li>Otherwise, <span>navigate</span> to the document again, with
;;   <span>replacement enabled</span>, and using the same <span>source
;;   browsing context</span>, but this time skip the <span>encoding
;;   sniffing algorithm</span> and instead just set the encoding to the
;;   new encoding and the <span
;;   title="concept-encoding-confidence">confidence</span> to
;;   <i>certain</i>. Whenever possible, this should be done without
;;   actually contacting the network layer (the bytes should be
;;   re-parsed from memory), even if, e.g., the document is marked as
;;   not being cacheable. If this is not possible and contacting the
;;   network layer would involve repeating a request that uses a method
;;   other than HTTP GET (<span title="concept-http-equivalent-get">or
;;   equivalent</span> for non-HTTP URLs), then instead set the <span
;;   title="concept-encoding-confidence">confidence</span> to
;;   <i>certain</i> and ignore the new encoding. The resource will be
;;   misinterpreted. User agents may notify the user of the situation,
;;   to aid in application development.</li>
;;
;;  </ol>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Parse state</h4>
;;
;;  <h5>The insertion mode</h5>
;;
;;  <p>The <dfn>insertion mode</dfn> is a state variable that controls
;;  the primary operation of the tree construction stage.</p>
;;
;;  <p>Initially, the <span>insertion mode</span> is "<span
;;  title="insertion mode: initial">initial</span>". It can change to
;;  "<span title="insertion mode: before html">before html</span>",
;;  "<span title="insertion mode: before head">before head</span>",
;;  "<span title="insertion mode: in head">in head</span>", "<span
;;  title="insertion mode: in head noscript">in head noscript</span>",
;;  "<span title="insertion mode: after head">after head</span>", "<span
;;  title="insertion mode: in body">in body</span>", "<span
;;  title="insertion mode: text">text</span>",
;;  "<span title="insertion mode: in table">in table</span>", "<span
;;  title="insertion mode: in table text">in table text</span>", "<span
;;  title="insertion mode: in caption">in caption</span>", "<span
;;  title="insertion mode: in column group">in column group</span>",
;;  "<span title="insertion mode: in table body">in table body</span>",
;;  "<span title="insertion mode: in row">in row</span>", "<span
;;  title="insertion mode: in cell">in cell</span>", "<span
;;  title="insertion mode: in select">in select</span>", "<span
;;  title="insertion mode: in select in table">in select in
;;  table</span>", "<span title="insertion mode: in foreign content">in
;;  foreign content</span>", "<span title="insertion mode: after
;;  body">after body</span>", "<span title="insertion mode: in
;;  frameset">in frameset</span>", "<span title="insertion mode: after
;;  frameset">after frameset</span>", "<span title="insertion mode:
;;  after after body">after after body</span>", and "<span
;;  title="insertion mode: after after frameset">after after
;;  frameset</span>" during the course of the parsing, as described in
;;  the <span>tree construction</span> stage. The insertion mode affects
;;  how tokens are processed and whether CDATA sections are
;;  supported.</p>
;;
;;  <p>Seven of these modes, namely "<span title="insertion mode: in
;;  head">in head</span>", "<span title="insertion mode: in body">in
;;  body</span>", "<span title="insertion mode: in table">in
;;  table</span>", "<span title="insertion mode: in table body">in table
;;  body</span>", "<span title="insertion mode: in row">in row</span>",
;;  "<span title="insertion mode: in cell">in cell</span>", and "<span
;;  title="insertion mode: in select">in select</span>", are special, in
;;  that the other modes defer to them at various times. When the
;;  algorithm below says that the user agent is to do something
;;  "<dfn>using the rules for</dfn> the <var title="">m</var> insertion
;;  mode", where <var title="">m</var> is one of these modes, the user
;;  agent must use the rules described under the <var title="">m</var>
;;  <span>insertion mode</span>'s section, but must leave the
;;  <span>insertion mode</span> unchanged unless the rules in <var
;;  title="">m</var> themselves switch the <span>insertion mode</span>
;;  to a new value.</p>
;;
;;  <p>When the insertion mode is switched to "<span title="insertion
;;  mode: text">text</span>" or "<span title="insertion mode: in table
;;  text">in table text</span>", the <dfn>original insertion mode</dfn>
;;  is also set. This is the insertion mode to which the tree
;;  construction stage will return.</p>
;;
;;  <p>When the insertion mode is switched to "<span title="insertion
;;  mode: in foreign content">in foreign content</span>", the
;;  <dfn>secondary insertion mode</dfn> is also set. This secondary mode
;;  is used within the rules for the "<span title="insertion mode: in
;;  foreign content">in foreign content</span>" mode to handle HTML
;;  (i.e. not foreign) content.</p>
;;
;;  <hr>
;;
;;  <p>When the steps below require the UA to <dfn>reset the insertion
;;  mode appropriately</dfn>, it means the UA must follow these
;;  steps:</p>
;;
;;  <ol>
;;
;;   <li>Let <var title="">last</var> be false.</li>
;;
;;   <li>Let <var title="">foreign</var> be false.</li>
;;
;;   <li>Let <var title="">node</var> be the last node in the
;;   <span>stack of open elements</span>.</li>
;;
;;   <li><i>Loop</i>: If <var title="">node</var> is the first node in
;;   the stack of open elements, then set <var title="">last</var> to
;;   true and set <var title="">node</var> to the <var
;;   title="">context</var> element. (<span>fragment case</span>)</li>
;;
;;   <li>If <var title="">node</var> is a <code>select</code> element,
;;   then switch the <span>insertion mode</span> to "<span
;;   title="insertion mode: in select">in select</span>" and jump to the
;;   step labeled <i title="">end</i>. (<span>fragment case</span>)</li>
;;
;;   <li>If <var title="">node</var> is a <code>td</code> or
;;   <code>th</code> element and <var title="">last</var> is false, then
;;   switch the <span>insertion mode</span> to "<span title="insertion
;;   mode: in cell">in cell</span>" and jump to the step labeled <i
;;   title="">end</i>.</li>
;;
;;   <li>If <var title="">node</var> is a <code>tr</code> element, then
;;   switch the <span>insertion mode</span> to "<span title="insertion
;;   mode: in row">in row</span>" and jump to the step labeled <i
;;   title="">end</i>.</li>
;;
;;   <li>If <var title="">node</var> is a <code>tbody</code>,
;;   <code>thead</code>, or <code>tfoot</code> element, then switch the
;;   <span>insertion mode</span> to "<span title="insertion mode: in
;;   table body">in table body</span>" and jump to the step labeled <i
;;   title="">end</i>.</li>
;;
;;   <li>If <var title="">node</var> is a <code>caption</code> element,
;;   then switch the <span>insertion mode</span> to "<span
;;   title="insertion mode: in caption">in caption</span>" and jump to
;;   the step labeled <i title="">end</i>.</li>
;;
;;   <li>If <var title="">node</var> is a <code>colgroup</code> element,
;;   then switch the <span>insertion mode</span> to "<span
;;   title="insertion mode: in column group">in column group</span>" and
;;   jump to the step labeled <i title="">end</i>. (<span>fragment
;;   case</span>)</li>
;;
;;   <li>If <var title="">node</var> is a <code>table</code> element,
;;   then switch the <span>insertion mode</span> to "<span
;;   title="insertion mode: in table">in table</span>" and jump to the
;;   step labeled <i title="">end</i>.</li>
;;
;;   <li>If <var title="">node</var> is a <code>head</code> element,
;;   then switch the <span>insertion mode</span> to "<span
;;   title="insertion mode: in body">in body</span>" ("<span
;;   title="insertion mode: in body">in body</span>"! <em> not "<span
;;   title="insertion mode: in head">in head</span>"</em>!) and jump to
;;   the step labeled <i title="">end</i>. (<span>fragment
;;   case</span>)</li> <!-- This is only here for now in case people
;;   think that the spec accidentally omitted it and try to "fix"
;;   it. Note that noscript-in-head is also handled this way. This is
;;   all intentional. The only thing it doesn't handle is the
;;   scripting-disabled fragment parsing case for a <head> element
;;   containing a <noscript> which itself contains something other than
;;   a <link> or a <style> element; you'd expect that to break out of
;;   the <noscript> but it doesn't. This is an edge case that doesn't
;;   affect the spec, since the algorithm for fragment parsing is only
;;   used for innerHTML/outerHTML/insertAdjacentHTML(), where we know
;;   scripting is enabled. -->
;;
;;   <li>If <var title="">node</var> is a <code>body</code> element,
;;   then switch the <span>insertion mode</span> to "<span
;;   title="insertion mode: in body">in body</span>" and jump to the
;;   step labeled <i title="">end</i>.</li>
;;
;;   <li>If <var title="">node</var> is a <code>frameset</code> element,
;;   then switch the <span>insertion mode</span> to "<span
;;   title="insertion mode: in frameset">in frameset</span>" and jump to
;;   the step labeled <i title="">end</i>. (<span>fragment
;;   case</span>)</li>
;;
;;   <li>If <var title="">node</var> is an <code>html</code> element,
;;   then <!--: if the <span><code title="">head</code> element
;;   pointer</span> is null,--> switch the <span>insertion mode</span>
;;   to "<span title="insertion mode: before head">before
;;   head</span>"<!--, otherwise, switch the <span>insertion mode</span>
;;   to "<span title="insertion mode: after head">after head</span>".-->
;;   Then, <!-- in either case, --> jump to the step labeled <i
;;   title="">end</i>. (<span>fragment case</span>)</li> <!-- if the
;;   head element pointer can ever be non-null when we're going through
;;   these steps, we'll need to uncomment out the commented-out bits -->
;;
;;   <li>If <var title="">node</var> is an element from the <span>MathML
;;   namespace</span> or the <span>SVG namespace</span>, then set <var
;;   title="">foreign</var> to true.</li>
;;
;;   <li>If <var title="">last</var> is true, then switch the
;;   <span>insertion mode</span> to "<span title="insertion mode: in
;;   body">in body</span>" and jump to the step labeled <i
;;   title="">end</i>. (<span>fragment case</span>)</li>
;;
;;   <li>Let <var title="">node</var> now be the node before <var
;;   title="">node</var> in the <span>stack of open
;;   elements</span>.</li>
;;
;;   <li>Return to the step labeled <i>loop</i>.</li>
;;
;;   <li><i>End</i>: If <var title="">foreign</var> is true, switch the
;;   <span>secondary insertion mode</span> to whatever the
;;   <span>insertion mode</span> is set to, and switch the
;;   <span>insertion mode</span> to "<span title="insertion mode: in
;;   foreign content">in foreign content</span>".</li>
;;
;;  </ol>
;;
;;
;;  <h5>The stack of open elements</h5>
;;
;;  <p>Initially, the <dfn>stack of open elements</dfn> is empty. The
;;  stack grows downwards; the topmost node on the stack is the first
;;  one added to the stack, and the bottommost node of the stack is the
;;  most recently added node in the stack (notwithstanding when the
;;  stack is manipulated in a random access fashion as part of <a
;;  href="#adoptionAgency">the handling for misnested tags</a>).</p>
;;
;;  <p>The "<span title="insertion mode: before html">before
;;  html</span>" <span>insertion mode</span> creates the
;;  <code>html</code> root element node, which is then added to the
;;  stack.</p>
;;
;;  <p>In the <span>fragment case</span>, the <span>stack of open
;;  elements</span> is initialized to contain an <code>html</code>
;;  element that is created as part of <span title="html fragment
;;  parsing algorithm">that algorithm</span>. (The <span>fragment
;;  case</span> skips the "<span title="insertion mode: before
;;  html">before html</span>" <span>insertion mode</span>.)</p>
;;
;;  <p>The <code>html</code> node, however it is created, is the topmost
;;  node of the stack. It only gets popped off the stack when the parser
;;  <span title="stop parsing">finishes</span>.</p>
;;
;;  <p>The <dfn>current node</dfn> is the bottommost node in this
;;  stack.</p>
;;
;;  <p>The <dfn>current table</dfn> is the last <code>table</code>
;;  element in the <span>stack of open elements</span>, if there is
;;  one. If there is no <code>table</code> element in the <span>stack of
;;  open elements</span> (<span>fragment case</span>), then the
;;  <span>current table</span> is the first element in the <span>stack
;;  of open elements</span> (the <code>html</code> element).</p>
;;
;;  <p>Elements in the stack fall into the following categories:</p>
;;
;;  <dl>
;;
;;   <dt><dfn>Special</dfn></dt>
;;   <dd><p>The following HTML elements have varying levels of special
;;   parsing rules: <code>address</code>, <code>applet</code>,
;;   <code>area</code>, <code>article</code>, <code>aside</code>,
;;   <code>base</code>, <code>basefont</code>, <code>bgsound</code>,
;;   <code>blockquote</code>, <code>body</code>, <code>br</code>,
;;   <code>button</code>, <code>caption</code>, <code>center</code>,
;;   <code>col</code>, <code>colgroup</code>, <code>command</code>,
;;   <!--v2DDATAGRID <code>datagrid</code>,--> <code>dd</code>,
;;   <code>details</code>, <code>dir</code>, <code>div</code>,
;;   <code>dl</code>, <code>dt</code>, <code>embed</code>,
;;   <code>fieldset</code>, <code>figcaption</code>,
;;   <code>figure</code>, <code>footer</code>, <code>form</code>,
;;   <code>frame</code>, <code>frameset</code>, <code>h1</code>,
;;   <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>,
;;   <code>h6</code>, <code>head</code>, <code>header</code>,
;;   <code>hgroup</code>, <code>hr</code>, <code>html</code>,
;;   <code>iframe</code>, <!-- <code>image</code>, (commented out
;;   because this isn't an element that can end up on the stack, so it
;;   doesn't matter) --> <code>img</code>, <code>input</code>,
;;   <code>isindex</code>, <code>li</code>, <code>link</code>,
;;   <code>listing</code>, <code>marquee</code>, <code>menu</code>,
;;   <code>meta</code>, <code>nav</code>, <code>noembed</code>,
;;   <code>noframes</code>, <code>noscript</code>, <code>object</code>,
;;   <code>ol</code>, <code>p</code>, <code>param</code>,
;;   <code>plaintext</code>, <code>pre</code>, <code>script</code>,
;;   <code>section</code>, <code>select</code>, <code>style</code>,
;;   <code>summary</code>, <code>table</code>, <code>tbody</code>,
;;   <code>td</code>, <code>textarea</code>, <code>tfoot</code>,
;;   <code>th</code>, <code>thead</code>, <code>title</code>,
;;   <code>tr</code>, <code>ul</code>, <code>wbr</code>,
;;   <code>xmp</code>, and SVG's <code>foreignObject</code>.</p></dd>
;;
;;   <dt><dfn>Formatting</dfn></dt>
;;   <dd><p>The following HTML elements are those that end up in the
;;   <span>list of active formatting elements</span>: <code>a</code>,
;;   <code>b</code>, <code>big</code>, <code>code</code>,
;;   <code>em</code>, <code>font</code>, <code>i</code>,
;;   <code>nobr</code>, <code>s</code>, <code>small</code>,
;;   <code>strike</code>, <code>strong</code>, <code>tt</code>, and
;;   <code>u</code>.</p></dd>
;;
;;   <dt><dfn>Ordinary</dfn></dt>
;;   <dd><p>All other elements found while parsing an HTML
;;   document.</p></dd>
;;
;;  </dl>
;;
;;  <p>The <span>stack of open elements</span> is said to <dfn
;;  title="has an element in the specific scope">have an element in a
;;  specific scope</dfn> consisting of a list of element types <var
;;  title="">list</var> when the following algorithm terminates in a
;;  match state:</p>
;;
;;  <ol>
;;
;;   <li><p>Initialize <var title="">node</var> to be the <span>current
;;   node</span> (the bottommost node of the stack).</p></li>
;;
;;   <li><p>If <var title="">node</var> is the target node, terminate in
;;   a match state.</p></li>
;;
;;   <li><p>Otherwise, if <var title="">node</var> is one of the element
;;   types in <var title="">list</var>, terminate in a failure
;;   state.</p></li>
;;
;;   <li><p>Otherwise, set <var title="">node</var> to the previous
;;   entry in the <span>stack of open elements</span> and return to step
;;   2. (This will never fail, since the loop will always terminate in
;;   the previous step if the top of the stack &mdash; an
;;   <code>html</code> element &mdash; is reached.)</p></li>
;;
;;  </ol>
;;
;;  <p>The <span>stack of open elements</span> is said to <dfn
;;  title="has an element in scope">have an element in scope</dfn> when
;;  it <span>has an element in the specific scope</span> consisting
;;  of the following element types:</p>
;;
;;  <ul class="brief">
;;   <li><code>applet</code> in the HTML namespace</li>
;;   <li><code>caption</code> in the HTML namespace</li>
;;   <li><code>html</code> in the HTML namespace</li> <!-- (This can only happen if the <var title="">node</var> is the topmost node of the <span>stack of open elements</span>, and prevents the next step from being invoked if there are no more elements in the stack.) -->
;;   <li><code>table</code> in the HTML namespace</li>
;;   <li><code>td</code> in the HTML namespace</li>
;;   <li><code>th</code> in the HTML namespace</li>
;;   <li><code>marquee</code> in the HTML namespace</li>
;;   <li><code>object</code> in the HTML namespace</li>
;;   <li><code title="">foreignObject</code> in the SVG namespace</li>
;;  </ul>
;;
;;  <p>The <span>stack of open elements</span> is said to <dfn
;;  title="has an element in list item scope">have an element in list
;;  item scope</dfn> when it <span>has an element in the specific
;;  scope</span> consisting of the following element types:</p>
;;
;;  <ul class="brief">
;;   <li>All the element types listed above for the <i>has an element
;;   in scope</i> algorithm.</li>
;;   <li><code>ol</code> in the HTML namespace</li>
;;   <li><code>ul</code> in the HTML namespace</li>
;;  </ul>
;;
;;  <p>The <span>stack of open elements</span> is said to <dfn
;;  title="has an element in button scope">have an element in button
;;  scope</dfn> when it <span>has an element in the specific
;;  scope</span> consisting of the following element types:</p>
;;
;;  <ul class="brief">
;;   <li>All the element types listed above for the <i>has an element
;;   in scope</i> algorithm.</li>
;;   <li><code>button</code> in the HTML namespace</li>
;;  </ul>
;;
;;  <p>The <span>stack of open elements</span> is said to <dfn
;;  title="has an element in table scope">have an element in table
;;  scope</dfn> when it <span>has an element in the specific
;;  scope</span> consisting of the following element types:</p>
;;
;;  <ul class="brief">
;;   <li><code>html</code> in the HTML namespace</li> <!-- (This can only happen if the <var title="">node</var> is the topmost node of the <span>stack of open elements</span>, and prevents the next step from being invoked if there are no more elements in the stack.) -->
;;   <li><code>table</code> in the HTML namespace</li>
;;  </ul>
;;
;;  <p>Nothing happens if at any time any of the elements in the
;;  <span>stack of open elements</span> are moved to a new location in,
;;  or removed from, the <code>Document</code> tree. In particular, the
;;  stack is not changed in this situation. This can cause, amongst
;;  other strange effects, content to be appended to nodes that are no
;;  longer in the DOM.</p>
;;
;;  <p class="note">In some cases (namely, when <a
;;  href="#adoptionAgency">closing misnested formatting elements</a>),
;;  the stack is manipulated in a random-access fashion.</p>
;;
;;
;;  <h5>The list of active formatting elements</h5>
;;
;;  <p>Initially, the <dfn>list of active formatting elements</dfn> is
;;  empty. It is used to handle mis-nested <span
;;  title="formatting">formatting element tags</span>.</p>
;;
;;  <p>The list contains elements in the <span>formatting</span>
;;  category, and scope markers. The scope markers are inserted when
;;  entering <code>applet</code> elements, buttons, <code>object</code>
;;  elements, marquees, table cells, and table captions, and are used to
;;  prevent formatting from "leaking" <em>into</em> <code>applet</code>
;;  elements, buttons, <code>object</code> elements, marquees, and
;;  tables.</p>
;;
;;  <p class="note">The scope markers are unrelated to the concept of an
;;  element being <span title="has an element in scope">in
;;  scope</span>.</p>
;;
;;  <p>In addition, each element in the <span>list of active formatting
;;  elements</span> is associated with the token for which it was
;;  created, so that further elements can be created for that token if
;;  necessary.</p>
;;
;;  <p>When the steps below require the UA to <dfn>reconstruct the
;;  active formatting elements</dfn>, the UA must perform the following
;;  steps:</p>
;;
;;  <ol>
;;
;;   <li>If there are no entries in the <span>list of active formatting
;;   elements</span>, then there is nothing to reconstruct; stop this
;;   algorithm.</li>
;;
;;   <li>If the last (most recently added) entry in the <span>list of
;;   active formatting elements</span> is a marker, or if it is an
;;   element that is in the <span>stack of open elements</span>, then
;;   there is nothing to reconstruct; stop this algorithm.</li>
;;
;;   <li>Let <var title="">entry</var> be the last (most recently added)
;;   element in the <span>list of active formatting
;;   elements</span>.</li>
;;
;;   <li>If there are no entries before <var title="">entry</var> in the
;;   <span>list of active formatting elements</span>, then jump to step
;;   8.</li>
;;
;;   <li>Let <var title="">entry</var> be the entry one earlier than
;;   <var title="">entry</var> in the <span>list of active formatting
;;   elements</span>.</li>
;;
;;   <li>If <var title="">entry</var> is neither a marker nor an element
;;   that is also in the <span>stack of open elements</span>, go to step
;;   4.</li>
;;
;;   <li>Let <var title="">entry</var> be the element one later than
;;   <var title="">entry</var> in the <span>list of active formatting
;;   elements</span>.</li>
;;
;;   <li><span>Create an element for the token</span> for which the
;;   element <var title="">entry</var> was created, to obtain <var
;;   title="">new element</var>.</li>
;;
;;   <li>Append <var title="">new element</var> to the <span>current
;;   node</span> and push it onto the <span>stack of open
;;   elements</span> so that it is the new <span>current
;;   node</span>.</li>
;;
;;   <li>Replace the entry for <var title="">entry</var> in the list
;;   with an entry for <var title="">new element</var>.</li>
;;
;;   <li>If the entry for <var title="">new element</var> in the
;;   <span>list of active formatting elements</span> is not the last
;;   entry in the list, return to step 7.</li>
;;
;;  </ol>
;;
;;  <p>This has the effect of reopening all the formatting elements that
;;  were opened in the current body, cell, or caption (whichever is
;;  youngest) that haven't been explicitly closed.</p>
;;
;;  <p class="note">The way this specification is written, the
;;  <span>list of active formatting elements</span> always consists of
;;  elements in chronological order with the least recently added
;;  element first and the most recently added element last (except for
;;  while steps 8 to 11 of the above algorithm are being executed, of
;;  course).</p>
;;
;;  <p>When the steps below require the UA to <dfn>clear the list of
;;  active formatting elements up to the last marker</dfn>, the UA must
;;  perform the following steps:</p>
;;
;;  <ol>
;;
;;   <li>Let <var title="">entry</var> be the last (most recently added)
;;   entry in the <span>list of active formatting elements</span>.</li>
;;
;;   <li>Remove <var title="">entry</var> from the <span>list of active
;;   formatting elements</span>.</li>
;;
;;   <li>If <var title="">entry</var> was a marker, then stop the
;;   algorithm at this point. The list has been cleared up to the last
;;   marker.</li>
;;
;;   <li>Go to step 1.</li>
;;
;;  </ol>
;;
;;
;;  <h5>The element pointers</h5>
;;
;;  <p>Initially, the <dfn><code title="">head</code> element
;;  pointer</dfn> and the <dfn><code title="">form</code> element
;;  pointer</dfn> are both null.</p>
;;
;;  <p>Once a <code>head</code> element has been parsed (whether
;;  implicitly or explicitly) the <span><code title="">head</code>
;;  element pointer</span> gets set to point to this node.</p>
;;
;;  <p>The <span><code title="">form</code> element pointer</span>
;;  points to the last <code>form</code> element that was opened and
;;  whose end tag has not yet been seen. It is used to make form
;;  controls associate with forms in the face of dramatically bad
;;  markup, for historical reasons.</p>
;;
;;
;;  <h5>Other parsing state flags</h5>
;;
;;  <p>The <dfn>scripting flag</dfn> is set to "enabled" if <span
;;  title="concept-n-script">scripting was enabled</span> for the
;;  <code>Document</code> with which the parser is associated when the
;;  parser was created, and "disabled" otherwise.</p>
;;
;;  <p class="note">The <span>scripting flag</span> can be enabled even
;;  when the parser was originally created for the <span>HTML fragment
;;  parsing algorithm</span>, even though <code>script</code> elements
;;  don't execute in that case.</p>
;;
;;  <p>The <dfn>frameset-ok flag</dfn> is set to "ok" when the parser is
;;  created. It is set to "not ok" after certain tokens are seen.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4><dfn>Tokenization</dfn></h4>
;;
;;  <p>Implementations must act as if they used the following state
;;  machine to tokenize HTML. The state machine must start in the
;;  <span>data state</span>. Most states consume a single character,
;;  which may have various side-effects, and either switches the state
;;  machine to a new state to <em>reconsume</em> the same character, or
;;  switches it to a new state (to consume the next character), or
;;  repeats the same state (to consume the next character). Some states
;;  have more complicated behavior and can consume several characters
;;  before switching to another state. In some cases, the tokenizer
;;  state is also changed by the tree construction stage.</p>
;;
;;  <p>The exact behavior of certain states depends on the
;;  <span>insertion mode</span> and the <span>stack of open
;;  elements</span>. Certain states also use a <dfn><var>temporary
;;  buffer</var></dfn> to track progress.</p>
;;
;;  <p>The output of the tokenization step is a series of zero or more
;;  of the following tokens: DOCTYPE, start tag, end tag, comment,
;;  character, end-of-file. DOCTYPE tokens have a name, a public
;;  identifier, a system identifier, and a <i>force-quirks
;;  flag</i>. When a DOCTYPE token is created, its name, public
;;  identifier, and system identifier must be marked as missing (which
;;  is a distinct state from the empty string), and the <i>force-quirks
;;  flag</i> must be set to <i>off</i> (its other state is
;;  <i>on</i>). Start and end tag tokens have a tag name, a
;;  <i>self-closing flag</i>, and a list of attributes, each of which
;;  has a name and a value. When a start or end tag token is created,
;;  its <i>self-closing flag</i> must be unset (its other state is that
;;  it be set), and its attributes list must be empty. Comment and
;;  character tokens have data.</p>
;;
;;  <p>When a token is emitted, it must immediately be handled by the
;;  <span>tree construction</span> stage. The tree construction stage
;;  can affect the state of the tokenization stage, and can insert
;;  additional characters into the stream. (For example, the
;;  <code>script</code> element can result in scripts executing and
;;  using the <span>dynamic markup insertion</span> APIs to insert
;;  characters into the stream being tokenized.)</p>
;;
;;  <p>When a start tag token is emitted with its <i>self-closing
;;  flag</i> set, if the flag is not <dfn title="acknowledge
;;  self-closing flag">acknowledged</dfn> when it is processed by the
;;  tree construction stage, that is a <span>parse error</span>.</p>
;;
;;  <p>When an end tag token is emitted with attributes, that is a
;;  <span>parse error</span>.</p>
;;
;;  <p>When an end tag token is emitted with its <i>self-closing
;;  flag</i> set, that is a <span>parse error</span>.</p>
;;
;;  <p>An <dfn>appropriate end tag token</dfn> is an end tag token whose
;;  tag name matches the tag name of the last start tag to have been
;;  emitted from this tokenizer, if any. If no start tag has been
;;  emitted from this tokenizer, then no end tag token is
;;  appropriate.</p>
;;
;;  <p>Before each step of the tokenizer, the user agent must first
;;  check the <span>parser pause flag</span>. If it is true, then the
;;  tokenizer must abort the processing of any nested invocations of the
;;  tokenizer, yielding control back to the caller.</p>
;;
;;  <p>The tokenizer state machine consists of the states defined in the
;;  following subsections.</p>
;;
;;
;;  <!-- Order of the lists below is supposed to be non-error then
;;  error, by unicode, then EOF, ending with "anything else" -->
;;
;;
;;  <h5><dfn>Data state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0026 AMPERSAND (&amp;)</dt>
;;   <dd>Switch to the <span>character reference in data
;;   state</span>.</dd>
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd>Switch to the <span>tag open state</span>.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd>Emit an end-of-file token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit the <span>current input character</span> as a character
;;   token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Character reference in data state</dfn></h5>
;;
;;  <p>Attempt to <span>consume a character reference</span>, with no
;;  <span>additional allowed character</span>.</p>
;;
;;  <p>If nothing is returned, emit a U+0026 AMPERSAND character (&amp;)
;;  token.</p>
;;
;;  <p>Otherwise, emit the character token that was returned.</p>
;;
;;  <p>Finally, switch to the <span>data state</span>.</p>
;;
;;
;;  <h5><dfn>RCDATA state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0026 AMPERSAND (&amp;)</dt>
;;   <dd>Switch to the <span>character reference in RCDATA
;;   state</span>.</dd>
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd>Switch to the <span>RCDATA less-than sign state</span>.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd>Emit an end-of-file token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit the <span>current input character</span> as a character
;;   token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Character reference in RCDATA state</dfn></h5>
;;
;;  <p>Attempt to <span>consume a character reference</span>, with no
;;  <span>additional allowed character</span>.</p>
;;
;;  <p>If nothing is returned, emit a U+0026 AMPERSAND character (&amp;)
;;  token.</p>
;;
;;  <p>Otherwise, emit the character token that was returned.</p>
;;
;;  <p>Finally, switch to the <span>RCDATA state</span>.</p>
;;
;;
;;  <h5><dfn>RAWTEXT state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd>Switch to the <span>RAWTEXT less-than sign state</span>.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd>Emit an end-of-file token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit the <span>current input character</span> as a character
;;   token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd>Switch to the <span>script data less-than sign state</span>.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd>Emit an end-of-file token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit the <span>current input character</span> as a character
;;   token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>PLAINTEXT state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>EOF</dt>
;;   <dd>Emit an end-of-file token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit the <span>current input character</span> as a character
;;   token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Tag open state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0021 EXCLAMATION MARK (!)</dt>
;;   <dd>Switch to the <span>markup declaration open state</span>.</dd>
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Switch to the <span>end tag open state</span>.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Create a new start tag token, set its tag name to the
;;   lowercase version of the <span>current input character</span> (add 0x0020 to the
;;   character's code point), then switch to the <span>tag name
;;   state</span>. (Don't emit the token yet; further details will
;;   be filled in before it is emitted.)</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Create a new start tag token, set its tag name to the
;;   <span>current input character</span>, then switch to the <span>tag
;;   name state</span>. (Don't emit the token yet; further details will
;;   be filled in before it is emitted.)</dd>
;;
;;   <dt>U+003F QUESTION MARK (?)</dt>
;;   <dd><span>Parse error</span>. Switch to the <span>bogus
;;   comment state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Emit a U+003C LESS-THAN SIGN
;;   character token and reconsume the <span>current input
;;   character</span> in the <span>data state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>End tag open state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Create a new end tag token, set its tag name to the lowercase
;;   version of the <span>current input character</span> (add 0x0020 to
;;   the character's code point), then switch to the <span>tag name
;;   state</span>. (Don't emit the token yet; further details will be
;;   filled in before it is emitted.)</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Create a new end tag token, set its tag name to the
;;   <span>current input character</span>, then switch to the <span>tag
;;   name state</span>. (Don't emit the token yet; further details will
;;   be filled in before it is emitted.)</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Switch to the <span>data
;;   state</span>.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Emit a U+003C LESS-THAN SIGN
;;   character token and a U+002F SOLIDUS character token. Reconsume
;;   the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Switch to the <span>bogus
;;   comment state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Tag name state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Switch to the <span>before attribute name state</span>.</dd>
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Switch to the <span>self-closing start tag state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current tag
;;   token.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Append the lowercase version of the <span>current input
;;   character</span> (add 0x0020 to the character's code point) to the
;;   current tag token's tag name.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   tag token's tag name.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>RCDATA less-than sign state</dfn></h5>
;;  <!-- identical to the RAWTEXT less-than sign state, except s/RAWTEXT/RCDATA/g -->
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Set the <var>temporary buffer</var> to the empty string. Switch
;;   to the <span>RCDATA end tag open state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token and reconsume the
;;   <span>current input character</span> in the <span>RCDATA
;;   state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>RCDATA end tag open state</dfn></h5>
;;  <!-- identical to the RAWTEXT (and Script data) end tag open state, except s/RAWTEXT/RCDATA/g -->
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Create a new end tag token, and set its tag name to the
;;   lowercase version of the <span>current input character</span> (add
;;   0x0020 to the character's code point). Append the <span>current
;;   input character</span> to the <var>temporary buffer</var>. Finally,
;;   switch to the <span>RCDATA end tag name state</span>. (Don't emit
;;   the token yet; further details will be filled in before it is
;;   emitted.)</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Create a new end tag token, and set its tag name to the
;;   <span>current input character</span>. Append the <span>current
;;   input character</span> to the <var>temporary buffer</var>. Finally,
;;   switch to the <span>RCDATA end tag name state</span>. (Don't emit
;;   the token yet; further details will be filled in before it is
;;   emitted.)</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS
;;   character token, and reconsume the <span>current input
;;   character</span> in the <span>RCDATA state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>RCDATA end tag name state</dfn></h5>
;;  <!-- identical to the RAWTEXT (and Script data) end tag name state, except s/RAWTEXT/RCDATA/g -->
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then switch to the <span>before attribute name
;;   state</span>. Otherwise, treat it as per the "anything else" entry
;;   below.</dd>
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then switch to the <span>self-closing start tag
;;   state</span>. Otherwise, treat it as per the "anything else" entry
;;   below.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then emit the current tag token and switch to the
;;   <span>data state</span>. Otherwise, treat it as per the "anything
;;   else" entry below.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Append the lowercase version of the <span>current input
;;   character</span> (add 0x0020 to the character's code point) to the
;;   current tag token's tag name. Append the <span>current input
;;   character</span> to the <var>temporary buffer</var>.</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   tag token's tag name. Append the <span>current input
;;   character</span> to the <var>temporary buffer</var>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS
;;   character token, a character token for each of the characters in
;;   the <var>temporary buffer</var> (in the order they were added to
;;   the buffer), and reconsume the <span>current input character</span>
;;   in the <span>RCDATA state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>RAWTEXT less-than sign state</dfn></h5>
;;  <!-- identical to the RCDATA less-than sign state, except s/RCDATA/RAWTEXT/g -->
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Set the <var>temporary buffer</var> to the empty string. Switch
;;   to the <span>RAWTEXT end tag open state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token and reconsume the
;;   <span>current input character</span> in the <span>RAWTEXT
;;   state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>RAWTEXT end tag open state</dfn></h5>
;;  <!-- identical to the RCDATA (and Script data) end tag open state, except s/RCDATA/RAWTEXT/g -->
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Create a new end tag token, and set its tag name to the
;;   lowercase version of the <span>current input character</span> (add
;;   0x0020 to the character's code point). Append the <span>current
;;   input character</span> to the <var>temporary buffer</var>. Finally,
;;   switch to the <span>RAWTEXT end tag name state</span>. (Don't emit
;;   the token yet; further details will be filled in before it is
;;   emitted.)</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Create a new end tag token, and set its tag name to the
;;   <span>current input character</span>. Append the <span>current
;;   input character</span> to the <var>temporary buffer</var>. Finally,
;;   switch to the <span>RAWTEXT end tag name state</span>. (Don't emit
;;   the token yet; further details will be filled in before it is
;;   emitted.)</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS
;;   character token, and reconsume the <span>current input
;;   character</span> in the <span>RAWTEXT state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>RAWTEXT end tag name state</dfn></h5>
;;  <!-- identical to the RCDATA (and Script data) end tag name state, except s/RCDATA/RAWTEXT/g -->
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then switch to the <span>before attribute name
;;   state</span>. Otherwise, treat it as per the "anything else" entry
;;   below.</dd>
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then switch to the <span>self-closing start tag
;;   state</span>. Otherwise, treat it as per the "anything else" entry
;;   below.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then emit the current tag token and switch to the
;;   <span>data state</span>. Otherwise, treat it as per the "anything
;;   else" entry below.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Append the lowercase version of the <span>current input
;;   character</span> (add 0x0020 to the character's code point) to the
;;   current tag token's tag name. Append the <span>current input
;;   character</span> to the <var>temporary buffer</var>.</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   tag token's tag name. Append the <span>current input
;;   character</span> to the <var>temporary buffer</var>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS
;;   character token, a character token for each of the characters in
;;   the <var>temporary buffer</var> (in the order they were added to
;;   the buffer), and reconsume the <span>current input character</span>
;;   in the <span>RAWTEXT state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data less-than sign state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Set the <var>temporary buffer</var> to the empty string. Switch
;;   to the <span>script data end tag open state</span>.</dd>
;;
;;   <dt>U+0021 EXCLAMATION MARK (!)</dt>
;;   <dd>Switch to the <span>script data escape start state</span>. Emit
;;   a U+003C LESS-THAN SIGN character token and a U+0021 EXCLAMATION
;;   MARK character token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token and reconsume the
;;   <span>current input character</span> in the <span>script data
;;   state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data end tag open state</dfn></h5>
;;  <!-- identical to the RCDATA (and RAWTEXT) end tag open state, except s/RCDATA/Script data/g -->
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Create a new end tag token, and set its tag name to the
;;   lowercase version of the <span>current input character</span> (add
;;   0x0020 to the character's code point). Append the <span>current
;;   input character</span> to the <var>temporary buffer</var>. Finally,
;;   switch to the <span>script data end tag name state</span>. (Don't emit
;;   the token yet; further details will be filled in before it is
;;   emitted.)</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Create a new end tag token, and set its tag name to the
;;   <span>current input character</span>. Append the <span>current
;;   input character</span> to the <var>temporary buffer</var>. Finally,
;;   switch to the <span>script data end tag name state</span>. (Don't emit
;;   the token yet; further details will be filled in before it is
;;   emitted.)</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS
;;   character token, and reconsume the <span>current input
;;   character</span> in the <span>script data state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data end tag name state</dfn></h5>
;;  <!-- identical to the RCDATA (and RAWTEXT) end tag name state, except s/RCDATA/Script data/g -->
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then switch to the <span>before attribute name
;;   state</span>. Otherwise, treat it as per the "anything else" entry
;;   below.</dd>
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then switch to the <span>self-closing start tag
;;   state</span>. Otherwise, treat it as per the "anything else" entry
;;   below.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then emit the current tag token and switch to the
;;   <span>data state</span>. Otherwise, treat it as per the "anything
;;   else" entry below.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Append the lowercase version of the <span>current input
;;   character</span> (add 0x0020 to the character's code point) to the
;;   current tag token's tag name. Append the <span>current input
;;   character</span> to the <var>temporary buffer</var>.</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   tag token's tag name. Append the <span>current input
;;   character</span> to the <var>temporary buffer</var>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS
;;   character token, a character token for each of the characters in
;;   the <var>temporary buffer</var> (in the order they were added to
;;   the buffer), and reconsume the <span>current input character</span>
;;   in the <span>script data state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data escape start state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>script data escape start dash
;;   state</span>. Emit a U+002D HYPHEN-MINUS character token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Reconsume the <span>current input character</span> in the
;;   <span>script data state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data escape start dash state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>script data escaped dash dash
;;   state</span>. Emit a U+002D HYPHEN-MINUS character token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Reconsume the <span>current input character</span> in the
;;   <span>script data state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data escaped state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>script data escaped dash state</span>. Emit
;;   a U+002D HYPHEN-MINUS character token.</dd>
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd><p>Switch to the <span>script data escaped less-than sign
;;   state</span>.</p></dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit the <span>current input character</span> as a character
;;   token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data escaped dash state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>script data escaped dash dash
;;   state</span>. Emit a U+002D HYPHEN-MINUS character token.</dd>
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd><p>Switch to the <span>script data escaped less-than sign
;;   state</span>.</p></dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Switch to the <span>script data escaped state</span>. Emit the
;;   <span>current input character</span> as a character token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data escaped dash dash state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Emit a U+002D HYPHEN-MINUS character token.</dd>
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd><p>Switch to the <span>script data escaped less-than sign
;;   state</span>.</p></dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>script data state</span>. Emit a U+003E
;;   GREATER-THAN SIGN character token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Switch to the <span>script data escaped state</span>. Emit the
;;   <span>current input character</span> as a character token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data escaped less-than sign state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Set the <var>temporary buffer</var> to the empty string. Switch
;;   to the <span>script data escaped end tag open state</span>.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Set the <var>temporary buffer</var> to the empty string. Append
;;   the lowercase version of the <span>current input character</span>
;;   (add 0x0020 to the character's code point) to the <var>temporary
;;   buffer</var>. Switch to the <span>script data double escape start
;;   state</span>. Emit a U+003C LESS-THAN SIGN character token and the
;;   <span>current input character</span> as a character token.</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Set the <var>temporary buffer</var> to the empty string. Append
;;   the <span>current input character</span> to the <var>temporary
;;   buffer</var>. Switch to the <span>script data double escape start
;;   state</span>. Emit a U+003C LESS-THAN SIGN character token and the
;;   <span>current input character</span> as a character token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token and reconsume the
;;   <span>current input character</span> in the <span>script data
;;   escaped state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data escaped end tag open state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Create a new end tag token, and set its tag name to the
;;   lowercase version of the <span>current input character</span> (add
;;   0x0020 to the character's code point). Append the <span>current
;;   input character</span> to the <var>temporary buffer</var>. Finally,
;;   switch to the <span>script data escaped end tag name
;;   state</span>. (Don't emit the token yet; further details will be
;;   filled in before it is emitted.)</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Create a new end tag token, and set its tag name to the
;;   <span>current input character</span>. Append the <span>current
;;   input character</span> to the <var>temporary buffer</var>. Finally,
;;   switch to the <span>script data escaped end tag name
;;   state</span>. (Don't emit the token yet; further details will be
;;   filled in before it is emitted.)</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS
;;   character token, and reconsume the <span>current input
;;   character</span> in the <span>script data escaped state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data escaped end tag name state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then switch to the <span>before attribute name
;;   state</span>. Otherwise, treat it as per the "anything else" entry
;;   below.</dd>
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then switch to the <span>self-closing start tag
;;   state</span>. Otherwise, treat it as per the "anything else" entry
;;   below.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>If the current end tag token is an <span>appropriate end tag
;;   token</span>, then emit the current tag token and switch to the
;;   <span>data state</span>. Otherwise, treat it as per the "anything
;;   else" entry below.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Append the lowercase version of the <span>current input
;;   character</span> (add 0x0020 to the character's code point) to the
;;   current tag token's tag name. Append the <span>current input
;;   character</span> to the <var>temporary buffer</var>.</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   tag token's tag name. Append the <span>current input
;;   character</span> to the <var>temporary buffer</var>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS
;;   character token, a character token for each of the characters in
;;   the <var>temporary buffer</var> (in the order they were added to
;;   the buffer), and reconsume the <span>current input character</span>
;;   in the <span>script data escaped state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data double escape start state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>If the <var>temporary buffer</var> is the string "<code
;;   title="">script</code>", then switch to the <span>script data
;;   double escaped state</span>. Otherwise, switch to the <span>script
;;   data escaped state</span>. Emit the <span>current input
;;   character</span> as a character token.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Append the lowercase version of the <span>current input
;;   character</span> (add 0x0020 to the character's code point) to the
;;   <var>temporary buffer</var>. Emit the <span>current input
;;   character</span> as a character token.</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Append the <span>current input character</span> to the
;;   <var>temporary buffer</var>. Emit the <span>current input
;;   character</span> as a character token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Reconsume the <span>current input character</span> in the
;;   <span>script data escaped state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data double escaped state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>script data double escaped dash
;;   state</span>. Emit a U+002D HYPHEN-MINUS character token.</dd>
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd><p>Switch to the <span>script data double escaped less-than
;;   sign state</span>. Emit a U+003C LESS-THAN SIGN character
;;   token.</p></dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Emit the <span>current input character</span> as a character
;;   token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data double escaped dash state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>script data double escaped dash dash
;;   state</span>. Emit a U+002D HYPHEN-MINUS character token.</dd>
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd><p>Switch to the <span>script data double escaped less-than
;;   sign state</span>. Emit a U+003C LESS-THAN SIGN character
;;   token.</p></dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Switch to the <span>script data double escaped
;;   state</span>. Emit the <span>current input character</span> as a
;;   character token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data double escaped dash dash state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Emit a U+002D HYPHEN-MINUS character token.</dd>
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd><p>Switch to the <span>script data double escaped less-than
;;   sign state</span>. Emit a U+003C LESS-THAN SIGN character
;;   token.</p></dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>script data state</span>. Emit a U+003E
;;   GREATER-THAN SIGN character token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Switch to the <span>script data double escaped
;;   state</span>. Emit the <span>current input character</span> as a
;;   character token.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data double escaped less-than sign state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Set the <var>temporary buffer</var> to the empty string. Switch
;;   to the <span>script data double escape end state</span>. Emit a
;;   U+002F SOLIDUS character token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Reconsume the <span>current input character</span> in the
;;   <span>script data double escaped state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Script data double escape end state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>If the <var>temporary buffer</var> is the string "<code
;;   title="">script</code>", then switch to the <span>script data
;;   escaped state</span>. Otherwise, switch to the <span>script data
;;   double escaped state</span>. Emit the <span>current input
;;   character</span> as a character token.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Append the lowercase version of the <span>current input
;;   character</span> (add 0x0020 to the character's code point) to the
;;   <var>temporary buffer</var>. Emit the <span>current input
;;   character</span> as a character token.</dd>
;;
;;   <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
;;   <dd>Append the <span>current input character</span> to the
;;   <var>temporary buffer</var>. Emit the <span>current input
;;   character</span> as a character token.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Reconsume the <span>current input character</span> in the
;;   <span>script data double escaped state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Before attribute name state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Ignore the character.</dd>
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Switch to the <span>self-closing start tag state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current tag
;;   token.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Start a new attribute in the current tag token. Set that
;;   attribute's name to the lowercase version of the <span>current input
;;   character</span> (add 0x0020 to the character's code point), and its
;;   value to the empty string. Switch to the <span>attribute name
;;   state</span>.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dt>U+003D EQUALS SIGN (=)</dt>
;;   <dd><span>Parse error</span>. Treat it as per the "anything else"
;;   entry below.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Start a new attribute in the current tag token. Set that
;;   attribute's name to the <span>current input character</span>, and its value to
;;   the empty string. Switch to the <span>attribute name
;;   state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Attribute name state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Switch to the <span>after attribute name state</span>.</dd>
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Switch to the <span>self-closing start tag state</span>.</dd>
;;
;;   <dt>U+003D EQUALS SIGN (=)</dt>
;;   <dd>Switch to the <span>before attribute value state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current tag
;;   token.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Append the lowercase version of the <span>current input
;;   character</span> (add 0x0020 to the character's code point) to the
;;   current attribute's name.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd><span>Parse error</span>. Treat it as per the "anything else"
;;   entry below.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   attribute's name.</dd>
;;
;;  </dl>
;;
;;  <p>When the user agent leaves the attribute name state (and before
;;  emitting the tag token, if appropriate), the complete attribute's
;;  name must be compared to the other attributes on the same token;
;;  if there is already an attribute on the token with the exact same
;;  name, then this is a <span>parse error</span> and the new
;;  attribute must be dropped, along with the value that gets
;;  associated with it (if any).</p>
;;
;;
;;  <h5><dfn>After attribute name state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Ignore the character.</dd>
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Switch to the <span>self-closing start tag state</span>.</dd>
;;
;;   <dt>U+003D EQUALS SIGN (=)</dt>
;;   <dd>Switch to the <span>before attribute value state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current tag
;;   token.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Start a new attribute in the current tag token. Set that
;;   attribute's name to the lowercase version of the <span>current
;;   input character</span> (add 0x0020 to the character's code point),
;;   and its value to the empty string. Switch to the <span>attribute
;;   name state</span>.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dd><span>Parse error</span>. Treat it as per the "anything else"
;;   entry below.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Start a new attribute in the current tag token. Set that
;;   attribute's name to the <span>current input character</span>, and
;;   its value to the empty string. Switch to the <span>attribute name
;;   state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Before attribute value state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Ignore the character.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dd>Switch to the <span>attribute value (double-quoted) state</span>.</dd>
;;
;;   <dt>U+0026 AMPERSAND (&amp;)</dt>
;;   <dd>Switch to the <span>attribute value (unquoted) state</span>
;;   and reconsume this <span>current input character</span>.</dd>
;;
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dd>Switch to the <span>attribute value (single-quoted) state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Switch to the <span>data
;;   state</span>. Emit the current tag token.</dd>
;;
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dt>U+003D EQUALS SIGN (=)</dt>
;;   <dt>U+0060 GRAVE ACCENT (`)</dt>
;;   <dd><span>Parse error</span>. Treat it as per the "anything else"
;;   entry below.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   attribute's value. Switch to the <span>attribute value (unquoted)
;;   state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Attribute value (double-quoted) state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dd>Switch to the <span>after attribute value (quoted)
;;   state</span>.</dd>
;;
;;   <dt>U+0026 AMPERSAND (&amp;)</dt>
;;   <dd>Switch to the <span>character reference in attribute value
;;   state</span>, with the <span>additional allowed character</span>
;;   being U+0022 QUOTATION MARK (&quot;).</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   attribute's value.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Attribute value (single-quoted) state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dd>Switch to the <span>after attribute value (quoted)
;;   state</span>.</dd>
;;
;;   <dt>U+0026 AMPERSAND (&amp;)</dt>
;;   <dd>Switch to the <span>character reference in attribute value
;;   state</span>, with the <span>additional allowed character</span>
;;   being U+0027 APOSTROPHE (').</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   attribute's value.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Attribute value (unquoted) state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Switch to the <span>before attribute name state</span>.</dd>
;;
;;   <dt>U+0026 AMPERSAND (&amp;)</dt>
;;   <dd>Switch to the <span>character reference in attribute value
;;   state</span>, with the <span>additional allowed character</span>
;;   being U+003E GREATER-THAN SIGN (&gt;).</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current tag
;;   token.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
;;   <dt>U+003D EQUALS SIGN (=)</dt>
;;   <dt>U+0060 GRAVE ACCENT (`)</dt>
;;   <dd><span>Parse error</span>. Treat it as per the "anything else"
;;   entry below.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   attribute's value.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Character reference in attribute value state</dfn></h5>
;;
;;  <p>Attempt to <span>consume a character reference</span>.</p>
;;
;;  <p>If nothing is returned, append a U+0026 AMPERSAND character
;;  (&amp;) to the current attribute's value.</p>
;;
;;  <p>Otherwise, append the returned character token to the current
;;  attribute's value.</p>
;;
;;  <p>Finally, switch back to the attribute value state that switched
;;  into this state.</p>
;;
;;
;;  <h5><dfn>After attribute value (quoted) state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Switch to the <span>before attribute name state</span>.</dd>
;;
;;   <dt>U+002F SOLIDUS (/)</dt>
;;   <dd>Switch to the <span>self-closing start tag state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current tag
;;   token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Reconsume the character in
;;   the <span>before attribute name state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Self-closing start tag state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Set the <i>self-closing flag</i> of the current tag
;;   token. Switch to the <span>data state</span>. Emit the current tag
;;   token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Reconsume the character in
;;   the <span>before attribute name state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Bogus comment state</dfn></h5>
;;
;;  <p>Consume every character up to and including the first U+003E
;;  GREATER-THAN SIGN character (&gt;) or the end of the file (EOF),
;;  whichever comes first. Emit a comment token whose data is the
;;  concatenation of all the characters starting from and including
;;  the character that caused the state machine to switch into the
;;  bogus comment state, up to and including the character immediately
;;  before the last consumed character (i.e. up to the character just
;;  before the U+003E or EOF character). (If the comment was started
;;  by the end of the file (EOF), the token is empty.)</p>
;;
;;  <p>Switch to the <span>data state</span>.</p>
;;
;;  <p>If the end of the file was reached, reconsume the EOF
;;  character.</p>
;;
;;
;;  <h5><dfn>Markup declaration open state</dfn></h5>
;;
;;  <p>If the next two characters are both U+002D HYPHEN-MINUS
;;  characters (-), consume those two characters, create a comment token
;;  whose data is the empty string, and switch to the <span>comment
;;  start state</span>.</p>
;;
;;  <p>Otherwise, if the next seven characters are an <span>ASCII
;;  case-insensitive</span> match for the word "DOCTYPE", then consume
;;  those characters and switch to the <span>DOCTYPE state</span>.</p>
;;
;;  <p>Otherwise, if the <span>insertion mode</span> is "<span
;;  title="insertion mode: in foreign content">in foreign
;;  content</span>" and the <span>current node</span> is not an element
;;  in the <span>HTML namespace</span> and the next seven characters are
;;  an <span>case-sensitive</span> match for the string "[CDATA[" (the
;;  five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET
;;  character before and after), then consume those characters and
;;  switch to the <span>CDATA section state</span>.</p>
;;
;;  <p>Otherwise, this is a <span>parse error</span>. Switch to the
;;  <span>bogus comment state</span>. The next character that is
;;  consumed, if any, is the first character that will be in the
;;  comment.</p>
;;
;;
;;  <h5><dfn>Comment start state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>comment start dash state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Switch to the <span>data
;;   state</span>. Emit the comment token.</dd> <!-- see comment in
;;   comment end state -->
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Emit the comment token. Reconsume
;;   the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the comment
;;   token's data. Switch to the <span>comment state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Comment start dash state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>comment end state</span></dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Switch to the <span>data
;;   state</span>. Emit the comment token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Emit the comment token. Reconsume the
;;   EOF character in the <span>data state</span>.</dd> <!-- see comment
;;   in comment end state -->
;;
;;   <dt>Anything else</dt>
;;   <dd>Append a U+002D HYPHEN-MINUS character (-) and the
;;   <span>current input character</span> to the comment token's
;;   data. Switch to the <span>comment state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn id="comment">Comment state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>comment end dash state</span></dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Emit the comment token. Reconsume the
;;   EOF character in the <span>data state</span>.</dd> <!-- see comment
;;   in comment end state -->
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the comment
;;   token's data.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Comment end dash state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>comment end state</span></dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Emit the comment token. Reconsume the
;;   EOF character in the <span>data state</span>.</dd> <!-- see comment
;;   in comment end state -->
;;
;;   <dt>Anything else</dt>
;;   <dd>Append a U+002D HYPHEN-MINUS character (-) and the
;;   <span>current input character</span> to the comment token's
;;   data. Switch to the <span>comment state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Comment end state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the comment
;;   token.</dd>
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd><span>Parse error</span>. Append two U+002D HYPHEN-MINUS
;;   characters (-) and the <span>current input character</span> to the
;;   comment token's data. Switch to the <span>comment end space
;;   state</span>.</dd>
;;
;;   <dt>U+0021 EXCLAMATION MARK (!)</dt>
;;   <dd><span>Parse error</span>. Switch to the <span>comment end bang
;;   state</span>.</dd>
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd><span>Parse error</span>. Append a U+002D HYPHEN-MINUS
;;   character (-) to the comment token's data.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Emit the comment token. Reconsume
;;   the EOF character in the <span>data state</span>.</dd> <!-- For
;;   security reasons: otherwise, hostile user could put a <script> in
;;   a comment e.g. in a blog comment and then DOS the server so that
;;   the end tag isn't read, and then the commented <script> tag would
;;   be treated as live code -->
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Append two U+002D HYPHEN-MINUS
;;   characters (-) and the <span>current input character</span> to the
;;   comment token's data. Switch to the <span>comment
;;   state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Comment end bang state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Append two U+002D HYPHEN-MINUS characters (-) and a U+0021
;;   EXCLAMATION MARK character (!) to the comment token's data. Switch
;;   to the <span>comment end dash state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the comment
;;   token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Emit the comment token. Reconsume
;;   the EOF character in the <span>data state</span>.</dd> <!-- see
;;   comment in comment end state -->
;;
;;   <dt>Anything else</dt>
;;   <dd>Append two U+002D HYPHEN-MINUS characters (-), a U+0021
;;   EXCLAMATION MARK character (!), and the <span>current input
;;   character</span> to the comment token's data. Switch to the
;;   <span>comment state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Comment end space state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Append the <span>current input character</span> to the comment token's data.</dd>
;;
;;   <dt>U+002D HYPHEN-MINUS (-)</dt>
;;   <dd>Switch to the <span>comment end dash state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the comment
;;   token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Emit the comment token. Reconsume
;;   the EOF character in the <span>data state</span>.</dd> <!-- see
;;   comment in comment end state -->
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the comment token's data. Switch
;;   to the <span>comment state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>DOCTYPE state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Switch to the <span>before DOCTYPE name state</span>.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Create a new DOCTYPE token. Set its
;;   <i>force-quirks flag</i> to <i>on</i>. Emit the token. Reconsume
;;   the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Reconsume the character in the
;;   <span>before DOCTYPE name state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Before DOCTYPE name state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Ignore the character.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Create a new DOCTYPE token. Set the token's name to the
;;   lowercase version of the <span>current input character</span> (add 0x0020 to the
;;   character's code point). Switch to the <span>DOCTYPE name
;;   state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Create a new DOCTYPE token. Set its
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>data
;;   state</span>. Emit the token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Create a new DOCTYPE token. Set its
;;   <i>force-quirks flag</i> to <i>on</i>. Emit the token. Reconsume
;;   the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Create a new DOCTYPE token. Set the token's name to the
;;   <span>current input character</span>. Switch to the <span>DOCTYPE name
;;   state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>DOCTYPE name state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Switch to the <span>after DOCTYPE name state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current DOCTYPE
;;   token.</dd>
;;
;;   <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
;;   <dd>Append the lowercase version of the <span>current input
;;   character</span> (add 0x0020 to the character's code point) to the
;;   current DOCTYPE token's name.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   DOCTYPE token's name.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>After DOCTYPE name state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Ignore the character.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current DOCTYPE
;;   token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;
;;    <p>If the six characters starting from the <span>current input
;;    character</span> are an <span>ASCII case-insensitive</span> match
;;    for the word "PUBLIC", then consume those characters and switch to
;;    the <span>after DOCTYPE public keyword state</span>.</p>
;;
;;    <p>Otherwise, if the six characters starting from the
;;    <span>current input character</span> are an <span>ASCII
;;    case-insensitive</span> match for the word "SYSTEM", then consume
;;    those characters and switch to the <span>after DOCTYPE system
;;    keyword state</span>.</p>
;;
;;    <p>Otherwise, this is the <span>parse error</span>. Set the
;;    DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>. Switch to
;;    the <span>bogus DOCTYPE state</span>.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>After DOCTYPE public keyword state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Switch to the <span>before DOCTYPE public identifier
;;   state</span>.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's public
;;   identifier to the empty string (not missing), then switch to the
;;   <span>DOCTYPE public identifier (double-quoted) state</span>.</dd>
;;
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's public
;;   identifier to the empty string (not missing), then switch to the
;;   <span>DOCTYPE public identifier (single-quoted) state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>data
;;   state</span>. Emit that DOCTYPE token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>bogus
;;   DOCTYPE state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Before DOCTYPE public identifier state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Ignore the character.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dd>Set the DOCTYPE token's public identifier to the empty string
;;   (not missing), then switch to the <span>DOCTYPE public identifier
;;   (double-quoted) state</span>.</dd>
;;
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dd>Set the DOCTYPE token's public identifier to the empty string
;;   (not missing), then switch to the <span>DOCTYPE public identifier
;;   (single-quoted) state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>data
;;   state</span>. Emit that DOCTYPE token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>bogus
;;   DOCTYPE state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>DOCTYPE public identifier (double-quoted) state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dd>Switch to the <span>after DOCTYPE public identifier state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>data
;;   state</span>. Emit that DOCTYPE token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current DOCTYPE
;;   token's public identifier.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>DOCTYPE public identifier (single-quoted) state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dd>Switch to the <span>after DOCTYPE public identifier state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>data
;;   state</span>. Emit that DOCTYPE token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current DOCTYPE
;;   token's public identifier.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>After DOCTYPE public identifier state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Switch to the <span>between DOCTYPE public and system
;;   identifiers state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current DOCTYPE
;;   token.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's system
;;   identifier to the empty string (not missing), then switch to the
;;   <span>DOCTYPE system identifier (double-quoted) state</span>.</dd>
;;
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's system
;;   identifier to the empty string (not missing), then switch to the
;;   <span>DOCTYPE system identifier (single-quoted) state</span>.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>bogus
;;   DOCTYPE state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Between DOCTYPE public and system identifiers state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Ignore the character.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current DOCTYPE
;;   token.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dd>Set the DOCTYPE token's system identifier to the empty string
;;   (not missing), then switch to the <span>DOCTYPE system identifier
;;   (double-quoted) state</span>.</dd>
;;
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dd>Set the DOCTYPE token's system identifier to the empty string
;;   (not missing), then switch to the <span>DOCTYPE system identifier
;;   (single-quoted) state</span>.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>bogus
;;   DOCTYPE state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>After DOCTYPE system keyword state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Switch to the <span>before DOCTYPE system identifier
;;   state</span>.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's system
;;   identifier to the empty string (not missing), then switch to the
;;   <span>DOCTYPE system identifier (double-quoted) state</span>.</dd>
;;
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's system
;;   identifier to the empty string (not missing), then switch to the
;;   <span>DOCTYPE system identifier (single-quoted) state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>data
;;   state</span>. Emit that DOCTYPE token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>bogus
;;   DOCTYPE state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Before DOCTYPE system identifier state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Ignore the character.</dd>
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dd>Set the DOCTYPE token's system identifier to the empty string
;;   (not missing), then switch to the <span>DOCTYPE system identifier
;;   (double-quoted) state</span>.</dd>
;;
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dd>Set the DOCTYPE token's system identifier to the empty string
;;   (not missing), then switch to the <span>DOCTYPE system identifier
;;   (single-quoted) state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>data
;;   state</span>. Emit that DOCTYPE token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>bogus
;;   DOCTYPE state</span>.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>DOCTYPE system identifier (double-quoted) state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0022 QUOTATION MARK (&quot;)</dt>
;;   <dd>Switch to the <span>after DOCTYPE system identifier
;;   state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>data
;;   state</span>. Emit that DOCTYPE token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   DOCTYPE token's system identifier.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>DOCTYPE system identifier (single-quoted) state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0027 APOSTROPHE (')</dt>
;;   <dd>Switch to the <span>after DOCTYPE system identifier
;;   state</span>.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>data
;;   state</span>. Emit that DOCTYPE token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Append the <span>current input character</span> to the current
;;   DOCTYPE token's system identifier.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>After DOCTYPE system identifier state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dd>Ignore the character.</dd>
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the current DOCTYPE
;;   token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd><span>Parse error</span>. Set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
;;   Reconsume the EOF character in the <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd><span>Parse error</span>. Switch to the <span>bogus DOCTYPE
;;   state</span>. (This does <em>not</em> set the DOCTYPE token's
;;   <i>force-quirks flag</i> to <i>on</i>.)</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>Bogus DOCTYPE state</dfn></h5>
;;
;;  <p>Consume the <span>next input character</span>:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
;;   <dd>Switch to the <span>data state</span>. Emit the DOCTYPE
;;   token.</dd>
;;
;;   <dt>EOF</dt>
;;   <dd>Emit the DOCTYPE token. Reconsume the EOF character in the
;;   <span>data state</span>.</dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>Ignore the character.</dd>
;;
;;  </dl>
;;
;;
;;  <h5><dfn>CDATA section state</dfn></h5>
;;
;;  <p>Consume every character up to the next occurrence of the three
;;  character sequence U+005D RIGHT SQUARE BRACKET U+005D RIGHT SQUARE
;;  BRACKET U+003E GREATER-THAN SIGN (<code title="">]]></code>), or the
;;  end of the file (EOF), whichever comes first. Emit a series of
;;  character tokens consisting of all the characters consumed except
;;  the matching three character sequence at the end (if one was found
;;  before the end of the file).</p>
;;
;;  <p>Switch to the <span>data state</span>.</p>
;;
;;  <p>If the end of the file was reached, reconsume the EOF
;;  character.</p>
;;
;;
;;
;;  <h5>Tokenizing character references</h5>
;;
;;  <p>This section defines how to <dfn>consume a character
;;  reference</dfn>. This definition is used when parsing character
;;  references <span title="character reference in data state">in
;;  text</span> and <span title="character reference in attribute value
;;  state">in attributes</span>.</p>
;;
;;  <p>The behavior depends on the identity of the next character (the
;;  one immediately after the U+0026 AMPERSAND character):</p>
;;
;;  <dl class="switch">
;;
;;   <dt>U+0009 CHARACTER TABULATION</dt>
;;   <dt>U+000A LINE FEED (LF)</dt>
;;   <dt>U+000C FORM FEED (FF)</dt>
;;   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
;;   <dt>U+0020 SPACE</dt>
;;   <dt>U+003C LESS-THAN SIGN</dt>
;;   <dt>U+0026 AMPERSAND</dt>
;;   <dt>EOF</dt>
;;   <dt>The <dfn>additional allowed character</dfn>, if there is one</dt>
;;
;;   <dd>Not a character reference. No characters are consumed, and
;;   nothing is returned. (This is not an error, either.)</dd>
;;
;;
;;   <dt>U+0023 NUMBER SIGN (#)</dt>
;;
;;   <dd>
;;
;;    <p>Consume the U+0023 NUMBER SIGN.</p>
;;
;;    <p>The behavior further depends on the character after the U+0023
;;    NUMBER SIGN:</p>
;;
;;    <dl class="switch">
;;
;;     <dt>U+0078 LATIN SMALL LETTER X</dt>
;;     <dt>U+0058 LATIN CAPITAL LETTER X</dt>
;;
;;     <dd>
;;
;;      <p>Consume the X.</p>
;;
;;      <p>Follow the steps below, but using the range of characters
;;      U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9), U+0061 LATIN
;;      SMALL LETTER A to U+0066 LATIN SMALL LETTER F, and U+0041 LATIN
;;      CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F (in other
;;      words, 0-9, A-F, a-f).</p>
;;
;;      <p>When it comes to interpreting the number, interpret it as a
;;      hexadecimal number.</p>
;;
;;     </dd>
;;
;;
;;     <dt>Anything else</dt>
;;
;;     <dd>
;;
;;      <p>Follow the steps below, but using the range of characters
;;      U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9).</p>
;;
;;      <p>When it comes to interpreting the number, interpret it as a
;;      decimal number.</p>
;;
;;     </dd>
;;
;;    </dl>
;;
;;    <p>Consume as many characters as match the range of characters
;;    given above.</p>
;;
;;    <p>If no characters match the range, then don't consume any
;;    characters (and unconsume the U+0023 NUMBER SIGN character and, if
;;    appropriate, the X character). This is a <span>parse
;;    error</span>; nothing is returned.</p>
;;
;;    <p>Otherwise, if the next character is a U+003B SEMICOLON, consume
;;    that too. If it isn't, there is a <span>parse
;;    error</span>.</p>
;;
;;    <p>If one or more characters match the range, then take them all
;;    and interpret the string of characters as a number (either
;;    hexadecimal or decimal as appropriate).</p>
;;
;;    <p>If that number is one of the numbers in the first column of the
;;    following table, then this is a <span>parse error</span>. Find the
;;    row with that number in the first column, and return a character
;;    token for the Unicode character given in the second column of that
;;    row.</p>
;;
;;    <table id="table-charref-overrides">
;;     <thead>
;;      <tr><th>Number <th colspan=2>Unicode character
;;     <tbody>
;;      <tr><td>0x00 <td>U+FFFD <td>REPLACEMENT CHARACTER
;;      <tr><td>0x0D <td>U+000D <td>CARRIAGE RETURN (CR)
;;      <tr><td>0x80 <td>U+20AC <td>EURO SIGN (&#x20AC;)
;;      <tr><td>0x81 <td>U+0081 <td>&lt;control>
;;      <tr><td>0x82 <td>U+201A <td>SINGLE LOW-9 QUOTATION MARK (&#x201A;)
;;      <tr><td>0x83 <td>U+0192 <td>LATIN SMALL LETTER F WITH HOOK (&#x0192;)
;;      <tr><td>0x84 <td>U+201E <td>DOUBLE LOW-9 QUOTATION MARK (&#x201E;)
;;      <tr><td>0x85 <td>U+2026 <td>HORIZONTAL ELLIPSIS (&#x2026;)
;;      <tr><td>0x86 <td>U+2020 <td>DAGGER (&#x2020;)
;;      <tr><td>0x87 <td>U+2021 <td>DOUBLE DAGGER (&#x2021;)
;;      <tr><td>0x88 <td>U+02C6 <td>MODIFIER LETTER CIRCUMFLEX ACCENT (&#x02C6;)
;;      <tr><td>0x89 <td>U+2030 <td>PER MILLE SIGN (&#x2030;)
;;      <tr><td>0x8A <td>U+0160 <td>LATIN CAPITAL LETTER S WITH CARON (&#x0160;)
;;      <tr><td>0x8B <td>U+2039 <td>SINGLE LEFT-POINTING ANGLE QUOTATION MARK (&#x2039;)
;;      <tr><td>0x8C <td>U+0152 <td>LATIN CAPITAL LIGATURE OE (&#x0152;)
;;      <tr><td>0x8D <td>U+008D <td>&lt;control>
;;      <tr><td>0x8E <td>U+017D <td>LATIN CAPITAL LETTER Z WITH CARON (&#x017D;)
;;      <tr><td>0x8F <td>U+008F <td>&lt;control>
;;      <tr><td>0x90 <td>U+0090 <td>&lt;control>
;;      <tr><td>0x91 <td>U+2018 <td>LEFT SINGLE QUOTATION MARK (&#x2018;)
;;      <tr><td>0x92 <td>U+2019 <td>RIGHT SINGLE QUOTATION MARK (&#x2019;)
;;      <tr><td>0x93 <td>U+201C <td>LEFT DOUBLE QUOTATION MARK (&#x201C;)
;;      <tr><td>0x94 <td>U+201D <td>RIGHT DOUBLE QUOTATION MARK (&#x201D;)
;;      <tr><td>0x95 <td>U+2022 <td>BULLET (&#x2022;)
;;      <tr><td>0x96 <td>U+2013 <td>EN DASH (&#x2013;)
;;      <tr><td>0x97 <td>U+2014 <td>EM DASH (&#x2014;)
;;      <tr><td>0x98 <td>U+02DC <td>SMALL TILDE (&#x02DC;)
;;      <tr><td>0x99 <td>U+2122 <td>TRADE MARK SIGN (&#x2122;)
;;      <tr><td>0x9A <td>U+0161 <td>LATIN SMALL LETTER S WITH CARON (&#x0161;)
;;      <tr><td>0x9B <td>U+203A <td>SINGLE RIGHT-POINTING ANGLE QUOTATION MARK (&#x203A;)
;;      <tr><td>0x9C <td>U+0153 <td>LATIN SMALL LIGATURE OE (&#x0153;)
;;      <tr><td>0x9D <td>U+009D <td>&lt;control>
;;      <tr><td>0x9E <td>U+017E <td>LATIN SMALL LETTER Z WITH CARON (&#x017E;)
;;      <tr><td>0x9F <td>U+0178 <td>LATIN CAPITAL LETTER Y WITH DIAERESIS (&#x0178;)
;;    </table>
;;
;;    <p>Otherwise, if the number is in the range 0xD800 to 0xDFFF<!--
;;    surrogates not allowed; see the comment in the "preprocessing the
;;    input stream" section for details --> or is greater than 0x10FFFF,
;;    then this is a <span>parse error</span>. Return a U+FFFD
;;    REPLACEMENT CHARACTER.</p>
;;
;;    <p>Otherwise, return a character token for the Unicode character
;;    whose code point is that number.
;;
;;    <!-- this is the same as the equivalent list in the input stream
;;    section -->
;;    If the number is in the range 0x0001 to 0x0008, <!-- HT, LF
;;    allowed --> <!-- U+000B is in the next list --> <!-- FF, CR
;;    allowed --> 0x000E to 0x001F, <!-- ASCII allowed --> 0x007F <!--to
;;    0x0084, (0x0085 NEL not allowed), 0x0086--> to 0x009F, 0xFDD0 to
;;    0xFDEF, or is one of 0x000B, 0xFFFE, 0xFFFF, 0x1FFFE, 0x1FFFF,
;;    0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF, 0x4FFFE, 0x4FFFF, 0x5FFFE,
;;    0x5FFFF, 0x6FFFE, 0x6FFFF, 0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF,
;;    0x9FFFE, 0x9FFFF, 0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE,
;;    0xCFFFF, 0xDFFFE, 0xDFFFF, 0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF,
;;    0x10FFFE, or 0x10FFFF, then this is a <span>parse
;;    error</span>.</p>
;;
;;   </dd>
;;
;;
;;   <dt>Anything else</dt>
;;
;;   <dd>
;;
;;    <p>Consume the maximum number of characters possible, with the
;;    consumed characters matching one of the identifiers in the first
;;    column of the <span>named character references</span> table (in a
;;    <span>case-sensitive</span> manner).</p>
;;
;;    <p>If no match can be made, then no characters are consumed, and
;;    nothing is returned. In this case, if the characters after the
;;    U+0026 AMPERSAND character (&amp;) consist of a sequence of one or
;;    more characters in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT
;;    NINE (9), U+0061 LATIN SMALL LETTER A to U+007A LATIN SMALL LETTER
;;    Z, and U+0041 LATIN CAPITAL LETTER A to U+005A LATIN CAPITAL
;;    LETTER Z, followed by a U+003B SEMICOLON character (;), then this
;;    is a <span>parse error</span>.</p>
;;
;;    <p>If the character reference is being consumed <span
;;    title="character reference in attribute value state">as part of an
;;    attribute</span>, and the last character matched is not a U+003B
;;    SEMICOLON character (;), and the next character is either a U+003D
;;    EQUALS SIGN character (=) or in the range U+0030 DIGIT ZERO (0) to
;;    U+0039 DIGIT NINE (9), U+0041 LATIN CAPITAL LETTER A to U+005A
;;    LATIN CAPITAL LETTER Z, or U+0061 LATIN SMALL LETTER A to U+007A
;;    LATIN SMALL LETTER Z, then, for historical reasons, all the
;;    characters that were matched after the U+0026 AMPERSAND character
;;    (&amp;) must be unconsumed, and nothing is returned.</p>
;;    <!-- "=" added because of http://www.w3.org/Bugs/Public/show_bug.cgi?id=9207#c5 -->
;;
;;    <p>Otherwise, a character reference is parsed. If the last
;;    character matched is not a U+003B SEMICOLON character (;), there
;;    is a <span>parse error</span>.</p>
;;
;;    <p>Return a character token for the character corresponding to the
;;    character reference name (as given by the second column of the
;;    <span>named character references</span> table).</p>
;;
;;    <div class="example">
;;
;;     <p>If the markup contains (not in an attribute) the string <code
;;     title="">I'm &amp;notit; I tell you</code>, the character
;;     reference is parsed as "not", as in, <code title="">I'm &not;it;
;;     I tell you</code> (and this is a parse error). But if the markup
;;     was <code title="">I'm &amp;notin; I tell you</code>, the
;;     character reference would be parsed as "notin;", resulting in
;;     <code title="">I'm &notin; I tell you</code> (and no parse
;;     error).</p>
;;
;;    </div>
;;
;;   </dd>
;;
;;  </dl>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <!-- v2: One thing that this doesn't define is handling deeply
;;  nested documents. There are compatibility requirements around that:
;;  you can't throw away the elements altogether, consider Tux made only
;;  with opening <font> elements, one per character. Seems that the best
;;  thing to do is to close some formatting elements from the middle of
;;  the stack when you hit a limit, or something. -->
;;
;;  <h4><dfn>Tree construction</dfn></h4>
;;
;;  <p>The input to the tree construction stage is a sequence of tokens
;;  from the <span>tokenization</span> stage. The tree construction
;;  stage is associated with a DOM <code>Document</code> object when a
;;  parser is created. The "output" of this stage consists of
;;  dynamically modifying or extending that document's DOM tree.</p>
;;
;;  <p>This specification does not define when an interactive user agent
;;  has to render the <code>Document</code> so that it is available to
;;  the user, or when it has to begin accepting user input.</p>
;;
;;  <p>As each token is emitted from the tokenizer, the user agent must
;;  process the token according to the rules given in the section
;;  corresponding to the current <span>insertion mode</span>.</p>
;;
;;  <p>When the steps below require the UA to <dfn>insert a
;;  character</dfn> into a node, if that node has a child immediately
;;  before where the character is to be inserted, and that child is a
;;  <code>Text</code> node, then the character must be appended to that
;;  <code>Text</code> node; otherwise, a new <code>Text</code> node
;;  whose data is just that character must be inserted in the
;;  appropriate place.</p>
;;
;;  <div class="example">
;;
;;   <p>Here are some sample inputs to the parser and the corresponding
;;   number of text nodes that they result in, assuming a user agent
;;   that executes scripts.</p>
;;
;;   <table>
;;    <thead>
;;     <tr>
;;      <th>Input <th>Number of text nodes
;;    <tbody>
;;     <tr>
;;      <td><pre>A&lt;script>
;;var&nbsp;script&nbsp;=&nbsp;document.getElementsByTagName('script')[0];
;;document.body.removeChild(script);
;;&lt;/script>B</pre>
;;      <td>One text node in the document, containing "AB".
;;     <tr>
;;      <td><pre>A&lt;script>
;;var&nbsp;text&nbsp;=&nbsp;document.createTextNode('B');
;;document.body.appendChild(text);
;;&lt;/script>C</pre>
;;      <td>Three text nodes; "A" before the script, the script's contents, and "BC" after the script (the parser appends to the text node created by the script).
;;     <tr>
;;      <td><pre>A&lt;script>
;;var&nbsp;text&nbsp;=&nbsp;document.getElementsByTagName('script')[0].firstChild;
;;text.data&nbsp;=&nbsp;'B';
;;document.body.appendChild(text);
;;&lt;/script>C</pre>
;;      <td>Two adjacent text nodes in the document, containing "A" and "BC".
;;     <tr>
;;      <td><pre>A&lt;table>B&lt;tr>C&lt;/tr>D&lt;/table></pre>
;;      <td>One text node before the table, containing "ABCD". (This is caused by <span title="foster parent">foster parenting</span>.)
;;     <tr>
;;      <td><pre>A&lt;table>&lt;tr>&nbsp;B&lt;/tr>&nbsp;C&lt;/table></pre>
;;      <td>One text node before the table, containing "A&nbsp;B&nbsp;C" (A-space-B-space-C). (This is caused by <span title="foster parent">foster parenting</span>.)
;;     <tr>
;;      <td><pre>A&lt;table>&lt;tr>&nbsp;B&lt;/tr>&nbsp;&lt;/em>C&lt;/table></pre>
;;      <td>One text node before the table, containing "A&nbsp;BC" (A-space-B-C), and one text node inside the table (as a child of a <code>tbody</code>) with a single space character. (Space characters separated from non-space characters by non-character tokens are not affected by <span title="foster parent">foster parenting</span>, even if those other tokens then get ignored.)
;;   </table>
;;
;;  </div>
;;
;;  <p id="mutation-during-parsing">DOM mutation events must not fire
;;  for changes caused by the UA parsing the document. (Conceptually,
;;  the parser is not mutating the DOM, it is constructing it.) This
;;  includes the parsing of any content inserted using <code
;;  title="dom-document-write">document.write()</code> and <code
;;  title="dom-document-writeln">document.writeln()</code> calls. <a
;;  href="#refsDOMEVENTS">[DOMEVENTS]</a></p>
;;
;;  <p class="note">Not all of the tag names mentioned below are
;;  conformant tag names in this specification; many are included to
;;  handle legacy content. They still form part of the algorithm that
;;  implementations are required to implement to claim conformance.</p>
;;
;;  <p class="note">The algorithm described below places no limit on the
;;  depth of the DOM tree generated, or on the length of tag names,
;;  attribute names, attribute values, text nodes, etc. While
;;  implementors are encouraged to avoid arbitrary limits, it is
;;  recognized that <a href="#hardwareLimitations">practical
;;  concerns</a> will likely force user agents to impose nesting depth
;;  constraints.</p>
;;
;;
;;  <h5>Creating and inserting elements</h5>
;;
;;  <p>When the steps below require the UA to <dfn title="create an
;;  element for the token">create an element for a token</dfn> in a
;;  particular namespace, the UA must create a node implementing the
;;  interface appropriate for the element type corresponding to the tag
;;  name of the token in the given namespace (as given in the
;;  specification that defines that element, e.g. for an <code>a</code>
;;  element in the <span>HTML namespace</span>, this specification
;;  defines it to be the <code>HTMLAnchorElement</code> interface), with
;;  the tag name being the name of that element, with the node being in
;;  the given namespace, and with the attributes on the node being those
;;  given in the given token.</p>
;;
;;  <p>The interface appropriate for an element in the <span>HTML
;;  namespace</span> that is not defined in this specification (or
;;  <span>other applicable specifications</span>) is
;;  <code>HTMLUnknownElement</code>. Element in other namespaces whose
;;  interface is not defined by that namespace's specification must use
;;  the interface <code>Element</code>.</p>
;;
;;  <p>When a <span title="category-reset">resettable element</span> is
;;  created in this manner, its <span
;;  title="concept-form-reset-control">reset algorithm</span> must be
;;  invoked once the attributes are set. (This initializes the element's
;;  <span title="concept-fe-value">value</span> and <span
;;  title="concept-fe-checked">checkedness</span> based on the element's
;;  attributes.)</p>
;;
;;  <hr>
;;
;;  <p>When the steps below require the UA to <dfn>insert an HTML
;;  element</dfn> for a token, the UA must first <span>create an element
;;  for the token</span> in the <span>HTML namespace</span>, and then
;;  append this node to the <span>current node</span>, and push it onto
;;  the <span>stack of open elements</span> so that it is the new
;;  <span>current node</span>.</p>
;;
;;  <p>The steps below may also require that the UA insert an HTML
;;  element in a particular place, in which case the UA must follow the
;;  same steps except that it must insert or append the new node in the
;;  location specified instead of appending it to the <span>current
;;  node</span>. (This happens in particular during the parsing of
;;  tables with invalid content.)</p>
;;
;;  <p>If an element created by the <span>insert an HTML element</span>
;;  algorithm is a <span>form-associated element</span>, and the
;;  <span><code title="">form</code> element pointer</span> is not null,
;;  and the newly created element doesn't have a <code
;;  title="attr-fae-form">form</code> attribute, the user agent must
;;  <span title="concept-form-association">associate</span> the newly
;;  created element with the <code>form</code> element pointed to by the
;;  <span><code title="">form</code> element pointer</span> when the
;;  element is inserted, instead of running the <span>reset the form
;;  owner</span> algorithm.</p>
;;
;;  <hr>
;;
;;  <p>When the steps below require the UA to <dfn>insert a foreign
;;  element</dfn> for a token, the UA must first <span>create an element
;;  for the token</span> in the given namespace, and then append this
;;  node to the <span>current node</span>, and push it onto the
;;  <span>stack of open elements</span> so that it is the new
;;  <span>current node</span>. If the newly created element has an <code
;;  title="">xmlns</code> attribute in the <span>XMLNS namespace</span>
;;  whose value is not exactly the same as the element's namespace, that
;;  is a <span>parse error</span>. Similarly, if the newly created
;;  element has an <code title="">xmlns:xlink</code> attribute in the
;;  <span>XMLNS namespace</span> whose value is not the <span>XLink
;;  Namespace</span>, that is a <span>parse error</span>.</p>
;;
;;  <p>When the steps below require the user agent to <dfn>adjust MathML
;;  attributes</dfn> for a token, then, if the token has an attribute
;;  named <code title="">definitionurl</code>, change its name to <code
;;  title="">definitionURL</code> (note the case difference).</p>
;;
;;  <p>When the steps below require the user agent to <dfn>adjust SVG
;;  attributes</dfn> for a token, then, for each attribute on the token
;;  whose attribute name is one of the ones in the first column of the
;;  following table, change the attribute's name to the name given in
;;  the corresponding cell in the second column. (This fixes the case of
;;  SVG attributes that are not all lowercase.)</p>
;;
;;  <table>
;;   <thead>
;;    <tr> <th> Attribute name on token <th> Attribute name on element
;;   <tbody>
;;    <tr> <td> <code title="">attributename</code> <td> <code title="">attributeName</code>
;;    <tr> <td> <code title="">attributetype</code> <td> <code title="">attributeType</code>
;;    <tr> <td> <code title="">basefrequency</code> <td> <code title="">baseFrequency</code>
;;    <tr> <td> <code title="">baseprofile</code> <td> <code title="">baseProfile</code>
;;    <tr> <td> <code title="">calcmode</code> <td> <code title="">calcMode</code>
;;    <tr> <td> <code title="">clippathunits</code> <td> <code title="">clipPathUnits</code>
;;    <tr> <td> <code title="">contentscripttype</code> <td> <code title="">contentScriptType</code>
;;    <tr> <td> <code title="">contentstyletype</code> <td> <code title="">contentStyleType</code>
;;    <tr> <td> <code title="">diffuseconstant</code> <td> <code title="">diffuseConstant</code>
;;    <tr> <td> <code title="">edgemode</code> <td> <code title="">edgeMode</code>
;;    <tr> <td> <code title="">externalresourcesrequired</code> <td> <code title="">externalResourcesRequired</code>
;;    <tr> <td> <code title="">filterres</code> <td> <code title="">filterRes</code>
;;    <tr> <td> <code title="">filterunits</code> <td> <code title="">filterUnits</code>
;;    <tr> <td> <code title="">glyphref</code> <td> <code title="">glyphRef</code>
;;    <tr> <td> <code title="">gradienttransform</code> <td> <code title="">gradientTransform</code>
;;    <tr> <td> <code title="">gradientunits</code> <td> <code title="">gradientUnits</code>
;;    <tr> <td> <code title="">kernelmatrix</code> <td> <code title="">kernelMatrix</code>
;;    <tr> <td> <code title="">kernelunitlength</code> <td> <code title="">kernelUnitLength</code>
;;    <tr> <td> <code title="">keypoints</code> <td> <code title="">keyPoints</code>
;;    <tr> <td> <code title="">keysplines</code> <td> <code title="">keySplines</code>
;;    <tr> <td> <code title="">keytimes</code> <td> <code title="">keyTimes</code>
;;    <tr> <td> <code title="">lengthadjust</code> <td> <code title="">lengthAdjust</code>
;;    <tr> <td> <code title="">limitingconeangle</code> <td> <code title="">limitingConeAngle</code>
;;    <tr> <td> <code title="">markerheight</code> <td> <code title="">markerHeight</code>
;;    <tr> <td> <code title="">markerunits</code> <td> <code title="">markerUnits</code>
;;    <tr> <td> <code title="">markerwidth</code> <td> <code title="">markerWidth</code>
;;    <tr> <td> <code title="">maskcontentunits</code> <td> <code title="">maskContentUnits</code>
;;    <tr> <td> <code title="">maskunits</code> <td> <code title="">maskUnits</code>
;;    <tr> <td> <code title="">numoctaves</code> <td> <code title="">numOctaves</code>
;;    <tr> <td> <code title="">pathlength</code> <td> <code title="">pathLength</code>
;;    <tr> <td> <code title="">patterncontentunits</code> <td> <code title="">patternContentUnits</code>
;;    <tr> <td> <code title="">patterntransform</code> <td> <code title="">patternTransform</code>
;;    <tr> <td> <code title="">patternunits</code> <td> <code title="">patternUnits</code>
;;    <tr> <td> <code title="">pointsatx</code> <td> <code title="">pointsAtX</code>
;;    <tr> <td> <code title="">pointsaty</code> <td> <code title="">pointsAtY</code>
;;    <tr> <td> <code title="">pointsatz</code> <td> <code title="">pointsAtZ</code>
;;    <tr> <td> <code title="">preservealpha</code> <td> <code title="">preserveAlpha</code>
;;    <tr> <td> <code title="">preserveaspectratio</code> <td> <code title="">preserveAspectRatio</code>
;;    <tr> <td> <code title="">primitiveunits</code> <td> <code title="">primitiveUnits</code>
;;    <tr> <td> <code title="">refx</code> <td> <code title="">refX</code>
;;    <tr> <td> <code title="">refy</code> <td> <code title="">refY</code>
;;    <tr> <td> <code title="">repeatcount</code> <td> <code title="">repeatCount</code>
;;    <tr> <td> <code title="">repeatdur</code> <td> <code title="">repeatDur</code>
;;    <tr> <td> <code title="">requiredextensions</code> <td> <code title="">requiredExtensions</code>
;;    <tr> <td> <code title="">requiredfeatures</code> <td> <code title="">requiredFeatures</code>
;;    <tr> <td> <code title="">specularconstant</code> <td> <code title="">specularConstant</code>
;;    <tr> <td> <code title="">specularexponent</code> <td> <code title="">specularExponent</code>
;;    <tr> <td> <code title="">spreadmethod</code> <td> <code title="">spreadMethod</code>
;;    <tr> <td> <code title="">startoffset</code> <td> <code title="">startOffset</code>
;;    <tr> <td> <code title="">stddeviation</code> <td> <code title="">stdDeviation</code>
;;    <tr> <td> <code title="">stitchtiles</code> <td> <code title="">stitchTiles</code>
;;    <tr> <td> <code title="">surfacescale</code> <td> <code title="">surfaceScale</code>
;;    <tr> <td> <code title="">systemlanguage</code> <td> <code title="">systemLanguage</code>
;;    <tr> <td> <code title="">tablevalues</code> <td> <code title="">tableValues</code>
;;    <tr> <td> <code title="">targetx</code> <td> <code title="">targetX</code>
;;    <tr> <td> <code title="">targety</code> <td> <code title="">targetY</code>
;;    <tr> <td> <code title="">textlength</code> <td> <code title="">textLength</code>
;;    <tr> <td> <code title="">viewbox</code> <td> <code title="">viewBox</code>
;;    <tr> <td> <code title="">viewtarget</code> <td> <code title="">viewTarget</code>
;;    <tr> <td> <code title="">xchannelselector</code> <td> <code title="">xChannelSelector</code>
;;    <tr> <td> <code title="">ychannelselector</code> <td> <code title="">yChannelSelector</code>
;;    <tr> <td> <code title="">zoomandpan</code> <td> <code title="">zoomAndPan</code>
;;  </table>
;;
;;  <p>When the steps below require the user agent to <dfn>adjust
;;  foreign attributes</dfn> for a token, then, if any of the attributes
;;  on the token match the strings given in the first column of the
;;  following table, let the attribute be a namespaced attribute, with
;;  the prefix being the string given in the corresponding cell in the
;;  second column, the local name being the string given in the
;;  corresponding cell in the third column, and the namespace being the
;;  namespace given in the corresponding cell in the fourth
;;  column. (This fixes the use of namespaced attributes, in particular
;;  <span title="attr-xml-lang"><code title="">lang</code> attributes in
;;  the <span>XML namespace</span></span>.)</p>
;;
;;  <table>
;;   <thead>
;;    <tr> <th> Attribute name <th> Prefix <th> Local name <th> Namespace
;;   <tbody>
;;    <tr> <td> <code title="">xlink:actuate</code> <td> <code title="">xlink</code> <td> <code title="">actuate</code> <td> <span>XLink namespace</span>
;;    <tr> <td> <code title="">xlink:arcrole</code> <td> <code title="">xlink</code> <td> <code title="">arcrole</code> <td> <span>XLink namespace</span>
;;    <tr> <td> <code title="">xlink:href</code> <td> <code title="">xlink</code> <td> <code title="">href</code> <td> <span>XLink namespace</span>
;;    <tr> <td> <code title="">xlink:role</code> <td> <code title="">xlink</code> <td> <code title="">role</code> <td> <span>XLink namespace</span>
;;    <tr> <td> <code title="">xlink:show</code> <td> <code title="">xlink</code> <td> <code title="">show</code> <td> <span>XLink namespace</span>
;;    <tr> <td> <code title="">xlink:title</code> <td> <code title="">xlink</code> <td> <code title="">title</code> <td> <span>XLink namespace</span>
;;    <tr> <td> <code title="">xlink:type</code> <td> <code title="">xlink</code> <td> <code title="">type</code> <td> <span>XLink namespace</span>
;;    <tr> <td> <code title="">xml:base</code> <td> <code title="">xml</code> <td> <code title="">base</code> <td> <span>XML namespace</span> <!-- attr-xml-base -->
;;    <tr> <td> <code title="">xml:lang</code> <td> <code title="">xml</code> <td> <code title="">lang</code> <td> <span>XML namespace</span>
;;    <tr> <td> <code title="">xml:space</code> <td> <code title="">xml</code> <td> <code title="">space</code> <td> <span>XML namespace</span>
;;    <tr> <td> <code title="">xmlns</code> <td> (none) <td> <code title="">xmlns</code> <td> <span>XMLNS namespace</span>
;;    <tr> <td> <code title="">xmlns:xlink</code> <td> <code title="">xmlns</code> <td> <code title="">xlink</code> <td> <span>XMLNS namespace</span>
;;  </table>
;;
;;  <hr>
;;
;;  <p>The <dfn>generic raw text element parsing algorithm</dfn> and the
;;  <dfn>generic RCDATA element parsing algorithm</dfn> consist of the
;;  following steps. These algorithms are always invoked in response to
;;  a start tag token.</p>
;;
;;  <ol>
;;
;;   <li><p><span>Insert an HTML element</span> for the token.</p></li>
;;
;;   <li><p>If the algorithm that was invoked is the <span>generic raw
;;   text element parsing algorithm</span>, switch the tokenizer to the
;;   <span>RAWTEXT state</span>; otherwise the algorithm invoked
;;   was the <span>generic RCDATA element parsing algorithm</span>,
;;   switch the tokenizer to the <span>RCDATA state</span>.</p></li>
;;
;;   <li><p>Let the <span>original insertion mode</span> be the current
;;   <span>insertion mode</span>.</p>
;;
;;   <li><p>Then, switch the <span>insertion mode</span> to "<span
;;   title="insertion mode: text">text</span>".</p></li>
;;
;;  </ol>
;;
;;
;;
;;  <h5>Closing elements that have implied end tags</h5>
;;
;;  <p>When the steps below require the UA to <dfn>generate implied end
;;  tags</dfn>, then, while the <span>current node</span> is a
;;  <code>dd</code> element, a <code>dt</code> element, an
;;  <code>li</code> element, an <code>option</code> element, an
;;  <code>optgroup</code> element, a <code>p</code> element, an
;;  <code>rp</code> element, or an <code>rt</code> element, the UA must
;;  pop the <span>current node</span> off the <span>stack of open
;;  elements</span>.</p>
;;
;;  <p>If a step requires the UA to generate implied end tags but lists
;;  an element to exclude from the process, then the UA must perform the
;;  above steps as if that element was not in the above list.</p>
;;
;;
;;  <h5>Foster parenting</h5>
;;
;;  <p>Foster parenting happens when content is misnested in tables.</p>
;;
;;  <p>When a node <var title="">node</var> is to be <dfn title="foster
;;  parent">foster parented</dfn>, the node <var title="">node</var>
;;  must be inserted into the <i>foster parent element</i>.</p>
;;
;;  <p>The <dfn>foster parent element</dfn> is the parent element of the
;;  last <code>table</code> element in the <span>stack of open
;;  elements</span>, if there is a <code>table</code> element and it has
;;  such a parent element.</p>
;;
;;  <p class="note">It might have no parent or some other kind parent if
;;  a script manipulated the DOM after the element was inserted by the
;;  parser.</p>
;;
;;  <p>If there is no <code>table</code> element in the <span>stack of
;;  open elements</span> (<span>fragment case</span>), then the
;;  <i>foster parent element</i> is the first element in the <span>stack
;;  of open elements</span> (the <code>html</code> element). Otherwise,
;;  if there is a <code>table</code> element in the <span>stack of open
;;  elements</span>, but the last <code>table</code> element in the
;;  <span>stack of open elements</span> has no parent, or its parent
;;  node is not an element, then the <i>foster parent element</i> is the
;;  element before the last <code>table</code> element in the
;;  <span>stack of open elements</span>.</p>
;;
;;  <p>If the <i>foster parent element</i> is the parent element of the
;;  last <code>table</code> element in the <span>stack of open
;;  elements</span>, then <var title="">node</var> must be inserted into
;;  the <i>foster parent element</i>, immediately <em>before</em> the
;;  last <code>table</code> element in the <span>stack of open
;;  elements</span>; otherwise, <var title="">node</var> must be
;;  <em>appended</em> to the <i>foster parent element</i>.</p>
;;
;;
;;
;;  <h5>The "<dfn title="insertion mode: initial">initial</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: initial">initial</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dd>
;;    <p>Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <code>Document</code>
;;    object with the <code title="">data</code> attribute set to the
;;    data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;
;;    <p>If the DOCTYPE token's name is not a
;;    <span>case-sensitive</span> match for the string "<code
;;    title="">html</code>", or the token's public identifier is not
;;    missing, or the token's system identifier is neither missing nor a
;;    <span>case-sensitive</span> match for the string
;;    "<code>about:legacy-compat</code>", and none of the sets of
;;    conditions in the following list are matched, then there is a
;;    <span>parse error</span>.</p>
;;
;;    <ul>
;;
;;     <!-- only things that trigger no-quirks mode and were valid in
;;     some other spec are allowed in this list -->
;;
;;     <li>The DOCTYPE token's name is a <span>case-sensitive</span>
;;     match for the string "<code title="">html</code>", the token's
;;     public identifier is the <span>case-sensitive</span> string
;;     "<code title="">-//W3C//DTD&nbsp;HTML&nbsp;4.0//EN</code>", and
;;     the token's system identifier is either missing or the
;;     <span>case-sensitive</span> string "<code
;;     title="">http://www.w3.org/TR/REC-html40/strict.dtd</code>".</li>
;;
;;     <li>The DOCTYPE token's name is a <span>case-sensitive</span>
;;     match for the string "<code title="">html</code>", the token's
;;     public identifier is the <span>case-sensitive</span> string
;;     "<code title="">-//W3C//DTD&nbsp;HTML&nbsp;4.01//EN</code>", and
;;     the token's system identifier is either missing or the
;;     <span>case-sensitive</span> string "<code
;;     title="">http://www.w3.org/TR/html4/strict.dtd</code>".</li>
;;
;;     <li>The DOCTYPE token's name is a <span>case-sensitive</span>
;;     match for the string "<code title="">html</code>", the token's
;;     public identifier is the <span>case-sensitive</span> string
;;     "<code
;;     title="">-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code>",
;;     and the token's system identifier is the
;;     <span>case-sensitive</span> string "<code
;;     title="">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</code>".</li>
;;
;;     <li>The DOCTYPE token's name is a <span>case-sensitive</span>
;;     match for the string "<code title="">html</code>", the token's
;;     public identifier is the <span>case-sensitive</span> string
;;     "<code title="">-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code>", and
;;     the token's system identifier is the <span>case-sensitive</span>
;;     string "<code
;;     title="">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</code>".</li>
;;
;;    </ul>
;;
;;    <p>Conformance checkers may, based on the values (including
;;    presence or lack thereof) of the DOCTYPE token's name, public
;;    identifier, or system identifier, switch to a conformance checking
;;    mode for another language (e.g. based on the DOCTYPE token a
;;    conformance checker could recognize that the document is an
;;    HTML4-era document, and defer to an HTML4 conformance
;;    checker.)</p>
;;
;;    <p>Append a <code>DocumentType</code> node to the
;;    <code>Document</code> node, with the <code title="">name</code>
;;    attribute set to the name given in the DOCTYPE token, or the empty
;;    string if the name was missing; the <code title="">publicId</code>
;;    attribute set to the public identifier given in the DOCTYPE token,
;;    or the empty string if the public identifier was missing; the
;;    <code title="">systemId</code> attribute set to the system
;;    identifier given in the DOCTYPE token, or the empty string if the
;;    system identifier was missing; and the other attributes specific
;;    to <code>DocumentType</code> objects set to null and empty lists
;;    as appropriate. Associate the <code>DocumentType</code> node with
;;    the <code>Document</code> object so that it is returned as the
;;    value of the <code title="">doctype</code> attribute of the
;;    <code>Document</code> object.</p>
;;
;;    <p id="quirks-mode-doctypes">Then, if the DOCTYPE token matches
;;    one of the conditions in the following list, then set the
;;    <code>Document</code> to <span>quirks mode</span>:</p>
;;
;;    <ul class="brief">
;;     <li> The <i>force-quirks flag</i> is set to <i>on</i>. </li>
;;     <li> The name is set to anything other than "<code title="">html</code>" (compared <span title="case-sensitive">case-sensitively</span>). </li>
;;     <li> The public identifier starts with: "<code title="">+//Silmaril//dtd html Pro v0r11 19970101//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//AdvaSoft Ltd//DTD HTML 3.0 asWedit + extensions//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//AS//DTD HTML 3.0 asWedit + extensions//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 2.0 Level 1//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 2.0 Level 2//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 2.0 Strict Level 1//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 2.0 Strict Level 2//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 2.0 Strict//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 2.0//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 2.1E//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 3.0//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 3.0//EN//</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 3.2 Final//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 3.2//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML 3//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML Level 0//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 0//EN//2.0</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML Level 1//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 1//EN//2.0</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML Level 2//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 2//EN//2.0</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML Level 3//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 3//EN//3.0</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML Strict Level 0//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 0//EN//2.0</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML Strict Level 1//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 1//EN//2.0</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML Strict Level 2//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 2//EN//2.0</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML Strict Level 3//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 3//EN//3.0</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML Strict//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict//EN//2.0</code>" </li>-->
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict//EN//3.0</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//IETF//DTD HTML//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML//EN//2.0</code>" </li>-->
;;   <!--<li> The public identifier is set to: "<code title="">-//IETF//DTD HTML//EN//3.0</code>" </li>-->
;;     <li> The public identifier starts with: "<code title="">-//Metrius//DTD Metrius Presentational//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Microsoft//DTD Internet Explorer 2.0 HTML Strict//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Microsoft//DTD Internet Explorer 2.0 HTML//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Microsoft//DTD Internet Explorer 2.0 Tables//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Microsoft//DTD Internet Explorer 3.0 HTML Strict//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Microsoft//DTD Internet Explorer 3.0 HTML//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Microsoft//DTD Internet Explorer 3.0 Tables//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Netscape Comm. Corp.//DTD HTML//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Netscape Comm. Corp.//DTD Strict HTML//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//O'Reilly and Associates//DTD HTML 2.0//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//O'Reilly and Associates//DTD HTML Extended 1.0//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//O'Reilly and Associates//DTD HTML Extended Relaxed 1.0//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//SoftQuad//DTD HoTMetaL PRO 4.0::19971010::extensions to HTML 4.0//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Spyglass//DTD HTML 2.0 Extended//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//SQ//DTD HTML 2.0 HoTMetaL + extensions//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Sun Microsystems Corp.//DTD HotJava HTML//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//Sun Microsystems Corp.//DTD HotJava Strict HTML//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD HTML 3 1995-03-24//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD HTML 3.2 Draft//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD HTML 3.2 Final//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD HTML 3.2//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD HTML 3.2S Draft//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD HTML 4.0 Frameset//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD HTML 4.0 Transitional//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD HTML Experimental 19960712//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD HTML Experimental 970421//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD W3 HTML//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3O//DTD W3 HTML 3.0//<!--EN--></code>" </li>
;;   <!--<li> The public identifier is set to: "<code title="">-//W3O//DTD W3 HTML 3.0//EN//</code>" </li>-->
;;     <li> The public identifier is set to: "<code title="">-//W3O//DTD W3 HTML Strict 3.0//EN//</code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//WebTechs//DTD Mozilla HTML 2.0//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//WebTechs//DTD Mozilla HTML//<!--EN--></code>" </li>
;;     <li> The public identifier is set to: "<code title="">-/W3C/DTD HTML 4.0 Transitional/EN</code>" </li>
;;     <li> The public identifier is set to: "<code title="">HTML</code>" </li>
;;     <li> The system identifier is set to: "<code title="">http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd</code>" </li>
;;     <li> The system identifier is missing and the public identifier starts with: "<code title="">-//W3C//DTD HTML 4.01 Frameset//<!--EN--></code>" </li>
;;     <li> The system identifier is missing and the public identifier starts with: "<code title="">-//W3C//DTD HTML 4.01 Transitional//<!--EN--></code>" </li>
;;    </ul>
;;
;;    <p>Otherwise, if the DOCTYPE token matches one of the conditions
;;    in the following list, then set the <code>Document</code> to
;;    <span>limited-quirks mode</span>:</p>
;;
;;    <ul class="brief">
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD XHTML 1.0 Frameset//<!--EN--></code>" </li>
;;     <li> The public identifier starts with: "<code title="">-//W3C//DTD XHTML 1.0 Transitional//<!--EN--></code>" </li>
;;     <li> The system identifier is not missing and the public identifier starts with: "<code title="">-//W3C//DTD HTML 4.01 Frameset//<!--EN--></code>" </li>
;;     <li> The system identifier is not missing and the public identifier starts with: "<code title="">-//W3C//DTD HTML 4.01 Transitional//<!--EN--></code>" </li>
;;    </ul>
;;
;;    <p>The system identifier and public identifier strings must be
;;    compared to the values given in the lists above in an <span>ASCII
;;    case-insensitive</span> manner. A system identifier whose value is
;;    the empty string is not considered missing for the purposes of the
;;    conditions above.</p>
;;
;;    <p>Then, switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: before html">before html</span>".</p>
;;
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;
;;    <p>If the document is <em>not</em> <span>an <code>iframe</code>
;;    <code title="attr-iframe-srcdoc">srcdoc</code> document</span>,
;;    then this is a <span>parse error</span>; set the
;;    <code>Document</code> to <span>quirks mode</span>.</p>
;;
;;    <p>In any case, switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: before html">before html</span>", then
;;    reprocess the current token.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5>The "<dfn title="insertion mode: before html">before html</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: before html">before html</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <code>Document</code>
;;    object with the <code title="">data</code> attribute set to the
;;    data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dd>
;;    <p>Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;
;;    <p><span>Create an element for the token</span> in the <span>HTML
;;    namespace</span>. Append it to the <code>Document</code>
;;    object. Put this element in the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p id="parser-appcache">If the <code>Document</code> is being
;;    loaded as part of <span title="navigate">navigation</span> of a
;;    <span>browsing context</span>, then: if the newly created element
;;    has a <code title="attr-html-manifest">manifest</code> attribute
;;    whose value is not the empty string, then <span title="resolve a
;;    url">resolve</span> the value of that attribute to an
;;    <span>absolute URL</span>, relative to the newly created element,
;;    and if that is successful, run the <span
;;    title="concept-appcache-init">application cache selection
;;    algorithm</span> with the resulting <span>absolute URL</span> with
;;    any <span title="url-fragment">&lt;fragment&gt;</span> component
;;    removed; otherwise, if there is no such attribute, or its value is
;;    the empty string, or resolving its value fails, run the <span
;;    title="concept-appcache-init">application cache selection
;;    algorithm</span> with no manifest. The algorithm must be passed
;;    the <code>Document</code> object.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: before head">before head</span>".</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "head", "body", "html", "br"</dt>
;;   <dd>
;;    <p>Act as described in the "anything else" entry below.</p>
;;   </dd>
;;
;;   <dt>Any other end tag</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;
;;    <p>Create an <code>html</code> element. Append it to the
;;    <code>Document</code> object. Put this element in the <span>stack
;;    of open elements</span>.</p>
;;
;;    <p>If the <code>Document</code> is being loaded as part of <span
;;    title="navigate">navigation</span> of a <span>browsing
;;    context</span>, then: run the <span
;;    title="concept-appcache-init">application cache selection
;;    algorithm</span> with no manifest, passing it the
;;    <code>Document</code> object.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: before head">before head</span>", then
;;    reprocess the current token.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;  <p>The root element can end up being removed from the
;;  <code>Document</code> object, e.g. by scripts; nothing in particular
;;  happens in such cases, content continues being appended to the nodes
;;  as described in the next section.</p>
;;
;;
;;  <h5>The "<dfn title="insertion mode: before head">before head</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: before head">before head</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dd>
;;    <p>Ignore the token.</p> <!-- :-( -->
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <span>current
;;    node</span> with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "head"</dt>
;;   <dd>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>Set the <span><code title="">head</code> element pointer</span>
;;    to the newly created <code>head</code> element.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in head">in head</span>".</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "head", "body", "html", "br"</dt>
;;   <dd>
;;
;;    <p>Act as if a start tag token with the tag name "head" and no
;;    attributes had been seen, then reprocess the current token.</p>
;;
;;   </dd>
;;
;;   <dt>Any other end tag</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;
;;    <p>Act as if a start tag token with the tag name "head" and no
;;    attributes had been seen, then reprocess the current
;;    token.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-inhead">The "<dfn title="insertion mode: in head">in head</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in head">in head</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dd>
;;    <p><span title="insert a character">Insert the character</span> into
;;    the <span>current node</span>.</p>
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <span>current
;;    node</span> with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "base", "basefont",
;;   "bgsound", "command", "link"</dt>
;;   <dd>
;;
;;    <p><span>Insert an HTML element</span> for the token. Immediately
;;    pop the <span>current node</span> off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p><span title="acknowledge self-closing flag">Acknowledge the
;;    token's <i>self-closing flag</i></span>, if it is set.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "meta"</dt>
;;   <dd>
;;
;;    <p><span>Insert an HTML element</span> for the token. Immediately
;;    pop the <span>current node</span> off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p><span title="acknowledge self-closing flag">Acknowledge the
;;    token's <i>self-closing flag</i></span>, if it is set.</p>
;;
;;    <p id="meta-charset-during-parse">If the element has a <code
;;    title="attr-meta-charset">charset</code> attribute, and its value
;;    is either a supported <span>ASCII-compatible character
;;    encoding</span> or a UTF-16 encoding, and the <span
;;    title="concept-encoding-confidence">confidence</span> is currently
;;    <i>tentative</i>, then <span>change the encoding</span> to the
;;    encoding given by the value of the <code
;;    title="attr-meta-charset">charset</code> attribute.</p>
;;
;;    <p>Otherwise, if the element has an <code
;;    title="attr-meta-http-equiv">http-equiv</code> attribute whose
;;    value is an <span>ASCII case-insensitive</span> match for the
;;    string "<code title="">Content-Type</code>", and the element has a
;;    <code title="attr-meta-content">content</code> attribute, and
;;    applying the <span>algorithm for extracting an encoding from a
;;    Content-Type</span> to that attribute's value returns a supported
;;    encoding <var title="">encoding</var>, and the <span
;;    title="concept-encoding-confidence">confidence</span> is currently
;;    <i>tentative</i>, then <span>change the encoding</span> to the
;;    encoding <var title="">encoding</var>.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "title"</dt>
;;   <dd>
;;    <p>Follow the <span>generic RCDATA element parsing algorithm</span>.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "noscript", if the <span>scripting flag</span> is enabled</dt>
;;   <dt>A start tag whose tag name is one of: "noframes", "style"</dt>
;;   <dd>
;;    <p>Follow the <span>generic raw text element parsing algorithm</span>.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "noscript", if the <span>scripting flag</span> is disabled</dt>
;;   <dd>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in head noscript">in head
;;    noscript</span>".</p>
;;
;;   </dd>
;;
;;   <dt id="scriptTag">A start tag whose tag name is "script"</dt>
;;   <dd>
;;
;;    <p>Run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p><span>Create an element for the token</span> in the
;;     <span>HTML namespace</span>.</p></li>
;;
;;     <li>
;;
;;      <p>Mark the element as being <span>"parser-inserted"</span>.</p>
;;
;;      <p class="note">This ensures that, if the script is external,
;;      any <code title="dom-document-write">document.write()</code>
;;      calls in the script will execute in-line, instead of blowing the
;;      document away, as would happen in most other cases. It also
;;      prevents the script from executing until the end tag is
;;      seen.</p>
;;
;;     </li>
;;
;;     <li><p>If the parser was originally created for the <span>HTML
;;     fragment parsing algorithm</span>, then mark the
;;     <code>script</code> element as <span>"already
;;     started"</span>. (<span>fragment case</span>)</p></li>
;;
;;     <li><p>Append the new element to the <span>current node</span>
;;     and push it onto the <span>stack of open
;;     elements</span>.</p></li>
;;
;;     <li><p>Switch the tokenizer to the <span>script data
;;     state</span>.</p></li>
;;
;;     <li><p>Let the <span>original insertion mode</span> be the current
;;     <span>insertion mode</span>.</p>
;;
;;     <li><p>Switch the <span>insertion mode</span> to "<span
;;     title="insertion mode: text">text</span>".</p></li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "head"</dt>
;;   <dd>
;;
;;    <p>Pop the <span>current node</span> (which will be the
;;    <code>head</code> element) off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: after head">after head</span>".</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "body", "html", "br"</dt>
;;   <dd>
;;    <p>Act as described in the "anything else" entry below.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "head"</dt>
;;   <dt>Any other end tag</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;
;;    <!-- can't get here with an EOF and a fragment case -->
;;
;;    <p>Act as if an end tag token with the tag name "head" had
;;    been seen, and reprocess the current token.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-inheadnoscript">The "<dfn title="insertion mode: in head noscript">in head noscript</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in head noscript">in head noscript</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "noscript"</dt>
;;   <dd>
;;
;;    <p>Pop the <span>current node</span> (which will be a
;;    <code>noscript</code> element) from the <span>stack of open
;;    elements</span>; the new <span>current node</span> will be a
;;    <code>head</code> element.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in head">in head</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dt>A comment token</dt>
;;   <dt>A start tag whose tag name is one of: "basefont", "bgsound",
;;   "link", "meta", "noframes", "style"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in head">in head</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "br"</dt>
;;   <dd>
;;    <p>Act as described in the "anything else" entry below.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "head", "noscript"</dt>
;;   <dt>Any other end tag</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;
;;    <!-- can't get here with an EOF and a fragment case -->
;;
;;    <p><span>Parse error</span>. Act as if an end tag with the tag
;;    name "noscript" had been seen and reprocess the current
;;    token.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5>The "<dfn title="insertion mode: after head">after head</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: after head">after head</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dd>
;;    <p><span title="insert a character">Insert the character</span> into
;;    the <span>current node</span>.</p>
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <span>current
;;    node</span> with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "body"</dt>
;;   <dd>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in body">in body</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "frameset"</dt>
;;   <dd>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in frameset">in frameset</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag token whose tag name is one of: "base", "basefont",
;;   "bgsound", "link", "meta", "noframes", "script", "style",
;;   "title"</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>.</p>
;;
;;    <p>Push the node pointed to by the <span><code
;;    title="">head</code> element pointer</span> onto the
;;    <span>stack of open elements</span>.</p>
;;
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in head">in head</span>" <span>insertion
;;    mode</span>.</p>
;;
;;    <p>Remove the node pointed to by the <span><code
;;    title="">head</code> element pointer</span> from the <span>stack
;;    of open elements</span>.</p>
;;
;;    <p class="note">The <span><code title="">head</code> element
;;    pointer</span> cannot be null at this point.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "body", "html", "br"</dt>
;;   <dd>
;;    <p>Act as described in the "anything else" entry below.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "head"</dt>
;;   <dt>Any other end tag</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p>Act as if a start tag token with the tag name "body" and no
;;    attributes had been seen, then set the <span>frameset-ok
;;    flag</span> back to "ok", and then reprocess the current
;;    token.</p>
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-inbody">The "<dfn title="insertion mode: in body">in body</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in body">in body</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token</dt>
;;   <dd>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span title="insert a character">Insert the token's
;;    character</span> into the <span>current node</span>.</p>
;;
;;    <p>If the token is not one of U+0009 CHARACTER TABULATION, U+000A
;;    LINE FEED (LF), U+000C FORM FEED (FF), U+000D CARRIAGE RETURN
;;    (CR), U+0020 SPACE, or U+FFFD REPLACEMENT CHARACTER, then set the
;;    <span>frameset-ok flag</span> to "not ok".</p>
;;
;;    <!-- U+FFFD REPLACEMENT CHARACTER is in this list because the
;;         D-Link DSL-G604T ADSL router has a zero byte in its
;;         configuration UI before a <frameset>. Zero bytes get
;;         converted to U+FFFD, which (without that character in this
;;         list) would mean the <frameset> would be ignored.
;;         refs: https://bugzilla.mozilla.org/show_bug.cgi?id=563526
;;               http://www.w3.org/Bugs/Public/show_bug.cgi?id=9659
;;    -->
;;
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <span>current
;;    node</span> with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. For each attribute on the token,
;;    check to see if the attribute is already present on the top
;;    element of the <span>stack of open elements</span>. If it is not,
;;    add the attribute and its corresponding value to that element.</p>
;;   </dd>
;;
;;   <dt>A start tag token whose tag name is one of: "base", "basefont",
;;   "bgsound", "command", "link", "meta", "noframes", "script",
;;   "style", "title"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in head">in head</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "body"</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>.</p>
;;
;;    <p>If the second element on the <span>stack of open
;;    elements</span> is not a <code>body</code> element, or, if the
;;    <span>stack of open elements</span> has only one node on it,
;;    then ignore the token. (<span>fragment case</span>)</p>
;;
;;    <p>Otherwise, for each attribute on the token, check to see if
;;    the attribute is already present on the <code>body</code>
;;    element (the second element) on the <span>stack of open
;;    elements</span>. If it is not, add the attribute and its
;;    corresponding value to that element.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "frameset"</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>.</p>
;;
;;    <p>If the second element on the <span>stack of open
;;    elements</span> is not a <code>body</code> element, or, if the
;;    <span>stack of open elements</span> has only one node on it,
;;    then ignore the token. (<span>fragment case</span>)</p>
;;
;;    <p>If the <span>frameset-ok flag</span> is set to "not ok", ignore
;;    the token.</p>
;;
;;    <p>Otherwise, run the following steps:</p>
;;
;;    <ol>
;;
;;     <li><p>Remove the second element on the <span>stack of open
;;     elements</span> from its parent node, if it has one.</p></li>
;;
;;     <li><p>Pop all the nodes from the bottom of the <span>stack of
;;     open elements</span>, from the <span>current node</span> up to,
;;     but not including, the root <code>html</code> element.</p>
;;
;;     <li><p><span>Insert an HTML element</span> for the
;;     token.</p></li>
;;
;;     <li><p>Switch the <span>insertion mode</span> to "<span
;;     title="insertion mode: in frameset">in frameset</span>".</p>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <dt>An end-of-file token</dt>
;;   <dd>
;;
;;    <p>If there is a node in the <span>stack of open elements</span>
;;    that is not either a <code>dd</code> element, a <code>dt</code>
;;    element, an <code>li</code> element, a <code>p</code> element, a
;;    <code>tbody</code> element, a <code>td</code> element, a
;;    <code>tfoot</code> element, a <code>th</code> element, a
;;    <code>thead</code> element, a <code>tr</code> element, the
;;    <code>body</code> element, or the <code>html</code> element, then
;;    this is a <span>parse error</span>.</p> <!-- (some of those are
;;    fragment cases) -->
;;
;;    <p><span>Stop parsing</span>.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "body"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in scope">have a <code>body</code> element
;;    in scope</span>, this is a <span>parse error</span>; ignore the
;;    token.</p>
;;
;;    <!-- if we get here, the insertion mode here is forcibly "in
;;    body". -->
;;
;;    <p>Otherwise, if there is a node in the <span>stack of open
;;    elements</span> that is not either a <code>dd</code> element, a
;;    <code>dt</code> element, an <code>li</code> element, an
;;    <code>optgroup</code> element, an <code>option</code> element, a
;;    <code>p</code> element, an <code>rp</code> element, an
;;    <code>rt</code> element, a <code>tbody</code> element, a
;;    <code>td</code> element, a <code>tfoot</code> element, a
;;    <code>th</code> element, a <code>thead</code> element, a
;;    <code>tr</code> element, the <code>body</code> element, or the
;;    <code>html</code> element, then this is a <span>parse
;;    error</span>.</p> <!-- (some of those are fragment cases, e.g. for
;;    <tbody> you'd have hit the first paragraph since the <body>
;;    wouldn't be in scope, unless it was a fragment case) -->
;;
;;    <!-- If we ever change the frameset-ok flag to an insertion mode,
;;    then we'd have to somehow keep track of its state when we switch
;;    to after-body. -->
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: after body">after body</span>".</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "html"</dt>
;;   <dd>
;;
;;    <p>Act as if an end tag with tag name "body" had been seen,
;;    then, if that token wasn't ignored, reprocess the current
;;    token.</p>
;;
;;   </dd>
;;
;;   <!-- start tags for non-phrasing flow content elements -->
;;
;;   <!-- the normal ones -->
;;   <dt>A start tag whose tag name is one of: "address", "article",
;;   "aside", "blockquote", "center", <!--v2DATAGRID"datagrid",-->
;;   "details", "dir", "div", "dl", "fieldset", "figcaption", "figure",
;;   "footer", "header", "hgroup", "menu", "nav", "ol", "p", "section",
;;   "summary", "ul"</dt>
;;   <dd>
;;
;;    <!-- As of May 2008 this doesn't match any browser exactly, but is
;;    as close to what IE does as I can get without doing the non-tree
;;    DOM nonsense, and thus should actually afford better compatibility
;;    when implemented by the other browsers. -->
;;
;;    <p>If the <span>stack of open elements</span> <span title="has an
;;    element in button scope">has a <code>p</code> element in button
;;    scope</span>, then act as if an end tag with the tag name "p" had
;;    been seen.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;   </dd>
;;
;;   <!-- as normal, but close h1-h6 if it's the current node -->
;;   <dt>A start tag whose tag name is one of: "h1", "h2", "h3", "h4",
;;   "h5", "h6"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> <span title="has
;;    an element in button scope">has a <code>p</code> element in button
;;    scope</span>, then act as if an end tag with the tag name
;;    "p" had been seen.</p>
;;
;;    <p>If the <span>current node</span> is an element whose tag name
;;    is one of "h1", "h2", "h3", "h4", "h5", or "h6", then this is a
;;    <span>parse error</span>; pop the <span>current node</span> off
;;    the <span>stack of open elements</span>.</p>
;;    <!-- See https://bugs.webkit.org/show_bug.cgi?id=12646 -->
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;   </dd>
;;
;;   <!-- as normal, but drops leading newline -->
;;   <dt>A start tag whose tag name is one of: "pre", "listing"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> <span title="has
;;    an element in button scope">has a <code>p</code> element in button
;;    scope</span>, then act as if an end tag with the tag name
;;    "p" had been seen.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>If the next token is a U+000A LINE FEED (LF) character
;;    token, then ignore that token and move on to the next
;;    one. (Newlines at the start of <code>pre</code> blocks are
;;    ignored as an authoring convenience.)</p>
;;
;;    <!-- <pre>[CR]X will eat the [CR], <pre>&#x10;X will eat the
;;    &#x10;, but <pre>&#x13;X will not eat the &#x13;. -->
;;
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;
;;   </dd>
;;
;;   <!-- as normal, but interacts with the form element pointer -->
;;   <dt>A start tag whose tag name is "form"</dt>
;;   <dd>
;;
;;    <p>If the <span><code title="form">form</code> element
;;    pointer</span> is not null, then this is a <span>parse
;;    error</span>; ignore the token.</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p>If the <span>stack of open elements</span> <span title="has
;;    an element in button scope">has a <code>p</code> element in button
;;    scope</span>, then act as if an end tag with the tag name
;;    "p" had been seen.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token, and set the
;;    <span><code title="form">form</code> element pointer</span> to
;;    point to the element created.</p>
;;
;;   </dd>
;;
;;   <!-- as normal, but imply </li> when there's another <li> open in weird cases -->
;;   <dt>A start tag whose tag name is "li"</dt>
;;   <dd>
;;
;;    <p>Run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p>Set the <span>frameset-ok flag</span> to "not ok".</p></li>
;;
;;     <li><p>Initialize <var title="">node</var> to be the <span>current
;;     node</span> (the bottommost node of the stack).</p></li>
;;
;;     <li><p><i>Loop</i>: If <var title="">node</var> is an
;;     <code>li</code> element, then act as if an end tag with the tag
;;     name "li" had been seen, then jump to the last step.</p></li>
;;
;;     <li><p>If <var title="">node</var> is in the <span>special</span>
;;     category, but is not an <code>address</code>, <code>div</code>,
;;     or <code>p</code> element, then jump to the last step.</p></li>
;;     <!-- an element <foo> is in this list if the following markup:
;;
;;         <!DOCTYPE html><body><ol><li><foo><li>
;;
;;     ...results in the second <li> not being (in any way) a descendant
;;     of the first <li>, or if <foo> is a formatting element that gets
;;     reopened later. -->
;;
;;     <li><p>Otherwise, set <var title="">node</var> to the previous
;;     entry in the <span>stack of open elements</span> and return to
;;     the step labeled <i>loop</i>.</p></li>
;;
;;     <li>
;;
;;      <p>This is the last step.</p>
;;
;;      <p>If the <span>stack of open elements</span> <span title="has
;;      an element in button scope">has a <code>p</code> element in button
;;      scope</span>, then act as if an end tag with the tag name
;;      "p" had been seen.</p>
;;
;;      <p>Finally, <span>insert an HTML element</span> for the
;;      token.</p>
;;
;;     </li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <!-- as normal, but imply </dt> or </dd> when there's another <dt> or <dd> open in weird cases  -->
;;   <dt>A start tag whose tag name is one of: "dd", "dt"</dt>
;;   <dd>
;;
;;    <p>Run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p>Set the <span>frameset-ok flag</span> to "not ok".</p></li>
;;
;;     <li><p>Initialize <var title="">node</var> to be the <span>current
;;     node</span> (the bottommost node of the stack).</p></li>
;;
;;     <li><p><i>Loop</i>: If <var title="">node</var> is a
;;     <code>dd</code> or <code>dt</code> element, then act as if an end
;;     tag with the same tag name as <var title="">node</var> had been
;;     seen, then jump to the last step.</p></li>
;;
;;     <li><p>If <var title="">node</var> is in the <span>special</span>
;;     category, but is not an <code>address</code>, <code>div</code>,
;;     or <code>p</code> element, then jump to the last step.</p></li>
;;     <!-- an element <foo> is in this list if the following markup:
;;
;;         <!DOCTYPE html><body><dl><dt><foo><dt>
;;
;;     ...results in the second <dt> not being (in any way) a descendant
;;     of the first <dt>, or if <foo> is a formatting element that gets
;;     reopened later. -->
;;
;;     <li><p>Otherwise, set <var title="">node</var> to the previous
;;     entry in the <span>stack of open elements</span> and return to
;;     the step labeled <i>loop</i>.</p></li>
;;
;;     <li>
;;
;;      <p>This is the last step.</p>
;;
;;      <p>If the <span>stack of open elements</span> <span title="has
;;      an element in button scope">has a <code>p</code> element in button
;;      scope</span>, then act as if an end tag with the tag name
;;      "p" had been seen.</p>
;;
;;      <p>Finally, <span>insert an HTML element</span> for the
;;      token.</p>
;;
;;     </li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <!-- same as normal, but effectively ends parsing -->
;;   <dt>A start tag whose tag name is "plaintext"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> <span title="has
;;    an element in button scope">has a <code>p</code> element in button
;;    scope</span>, then act as if an end tag with the tag name
;;    "p" had been seen.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>Switch the tokenizer to the <span>PLAINTEXT state</span>.</p>
;;
;;    <p class="note">Once a start tag with the tag name "plaintext" has
;;    been seen, that will be the last token ever seen other than
;;    character tokens (and the end-of-file token), because there is no
;;    way to switch out of the <span>PLAINTEXT state</span>.</p>
;;
;;   </dd>
;;
;;   <!-- button is a hybrid -->
;;   <dt>A start tag whose tag name is "button"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> <span title="has
;;    an element in scope">has a <code>button</code> element in
;;    scope</span>, then this is a <span>parse error</span>;
;;    act as if an end tag with the tag name "button" had been seen,
;;    then reprocess the token.</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;
;;   </dd>
;;
;;   <!-- end tags for non-phrasing flow content elements (and button) -->
;;
;;   <!-- the normal ones -->
;;   <dt>An end tag whose tag name is one of: "address", "article",
;;   "aside", "blockquote", "button", "center",
;;   <!--v2DATAGRID"datagrid",--> "details", "dir", "div", "dl",
;;   "fieldset", "figcaption", "figure", "footer", "header", "hgroup",
;;   "listing", "menu", "nav", "ol", "pre", "section", "summary",
;;   "ul"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in scope">have an element in scope</span>
;;    with the same tag name as that of the token, then this is a
;;    <span>parse error</span>; ignore the token.</p>
;;
;;    <p>Otherwise, run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p><span>Generate implied end tags</span>.</p></li>
;;
;;     <li><p>If the <span>current node</span> is not an element with
;;     the same tag name as that of the token, then this is a
;;     <span>parse error</span>.</p></li>
;;
;;     <li><p>Pop elements from the <span>stack of open elements</span>
;;     until an element with the same tag name as the token has been
;;     popped from the stack.</p></li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <!-- removes the form element pointer instead of the matching node -->
;;   <dt>An end tag whose tag name is "form"</dt>
;;   <dd>
;;
;;    <p>Let <var title="">node</var> be the element that the
;;    <span><code title="">form</code> element pointer</span> is set
;;    to.</p>
;;
;;    <p>Set the <span><code title="">form</code> element pointer</span>
;;    to null.</p>
;;
;;    <p>If <var title="">node</var> is null or the <span>stack of open
;;    elements</span> does not <span title="has an element in
;;    scope">have <var title="">node</var> in scope</span>, then this is
;;    a <span>parse error</span>; ignore the token.</p>
;;
;;    <p>Otherwise, run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p><span>Generate implied end tags</span>.</p></li>
;;
;;     <li><p>If the <span>current node</span> is not <var
;;     title="">node</var>, then this is a <span>parse
;;     error</span>.</p></li>
;;
;;     <li><p>Remove <var title="">node</var> from the <span>stack of
;;     open elements</span>.</p></li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <!-- as normal, except </p> implies <p> if there's no <p> in scope, and needs care as the elements have optional tags -->
;;   <dt>An end tag whose tag name is "p"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in button scope">have an element in button
;;    scope</span> with the same tag name as that of the token, then this
;;    is a <span>parse error</span>; act as if a start tag with the tag
;;    name "p" had been seen, then reprocess the current token.</p>
;;
;;    <p>Otherwise, run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p><span>Generate implied end tags</span>, except
;;     for elements with the same tag name as the token.</p></li>
;;
;;     <li><p>If the <span>current node</span> is not an element with
;;     the same tag name as that of the token, then this is a
;;     <span>parse error</span>.</p></li>
;;
;;     <li><p>Pop elements from the <span>stack of open elements</span>
;;     until an element with the same tag name as the token has been
;;     popped from the stack.</p></li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <!-- as normal, but needs care as the elements have optional tags, and are further scoped by <ol>/<ul> -->
;;   <dt>An end tag whose tag name is "li"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in list item scope">have an element in list
;;    item scope</span> with the same tag name as that of the token,
;;    then this is a <span>parse error</span>; ignore the token.</p>
;;
;;    <p>Otherwise, run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p><span>Generate implied end tags</span>, except
;;     for elements with the same tag name as the token.</p></li>
;;
;;     <li><p>If the <span>current node</span> is not an element with
;;     the same tag name as that of the token, then this is a
;;     <span>parse error</span>.</p></li>
;;
;;     <li><p>Pop elements from the <span>stack of open elements</span>
;;     until an element with the same tag name as the token has been
;;     popped from the stack.</p></li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <!-- as normal, but needs care as the elements have optional tags -->
;;   <dt>An end tag whose tag name is one of: "dd", "dt"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in scope">have an element in scope</span>
;;    with the same tag name as that of the token, then this is a
;;    <span>parse error</span>; ignore the token.</p>
;;
;;    <p>Otherwise, run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p><span>Generate implied end tags</span>, except
;;     for elements with the same tag name as the token.</p></li>
;;
;;     <li><p>If the <span>current node</span> is not an element with
;;     the same tag name as that of the token, then this is a
;;     <span>parse error</span>.</p></li>
;;
;;     <li><p>Pop elements from the <span>stack of open elements</span>
;;     until an element with the same tag name as the token has been
;;     popped from the stack.</p></li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <!-- as normal, except acts as a closer for any of the h1-h6 elements -->
;;   <dt>An end tag whose tag name is one of: "h1", "h2", "h3", "h4", "h5", "h6"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in scope">have an element in scope</span>
;;    whose tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6",
;;    then this is a <span>parse error</span>; ignore the token.</p>
;;
;;    <p>Otherwise, run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p><span>Generate implied end tags</span>.</p></li>
;;
;;     <li><p>If the <span>current node</span> is not an element with
;;     the same tag name as that of the token, then this is a
;;     <span>parse error</span>.</p></li>
;;
;;     <li><p>Pop elements from the <span>stack of open elements</span>
;;     until an element whose tag name is one of "h1", "h2", "h3", "h4",
;;     "h5", or "h6" has been popped from the stack.</p></li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <!-- see also applet/marquee/object lower down -->
;;
;;   <dt>An end tag whose tag name is "sarcasm"</dt>
;;   <dd>
;;    <p>Take a deep breath, then act as described in the "any other end
;;    tag" entry below.</p>
;;   </dd>
;;
;;   <!-- ADOPTION AGENCY ELEMENTS
;;        Mozilla-only: bdo blink del ins sub sup q
;;        Safari-only: code dfn kbd nobr samp var wbr
;;        Both: a b big em font i s small strike strong tt u -->
;;
;;   <dt>A start tag whose tag name is "a"</dt>
;;   <dd>
;;
;;    <p>If the <span>list of active formatting elements</span>
;;    contains an element whose tag name is "a" between the end of
;;    the list and the last marker on the list (or the start of the
;;    list if there is no marker on the list), then this is a
;;    <span>parse error</span>; act as if an end tag with the tag
;;    name "a" had been seen, then remove that element from the
;;    <span>list of active formatting elements</span> and the
;;    <span>stack of open elements</span> if the end tag didn't
;;    already remove it (it might not have if the element is not
;;    <span title="has an element in table scope">in table
;;    scope</span>).</p>
;;
;;    <p class="example">In the non-conforming stream
;;    <code>&lt;a&nbsp;href="a">a&lt;table>&lt;a&nbsp;href="b">b&lt;/table>x</code>,
;;    the first <code>a</code> element would be closed upon seeing the
;;    second one, and the "x" character would be inside a link to "b",
;;    not to "a". This is despite the fact that the outer <code>a</code>
;;    element is not in table scope (meaning that a regular
;;    <code>&lt;/a></code> end tag at the start of the table wouldn't
;;    close the outer <code>a</code> element). The result is that the
;;    two <code>a</code> elements are indirectly nested inside each
;;    other &mdash; non-conforming markup will often result in
;;    non-conforming DOMs when parsed.</p>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token. Add that
;;    element to the <span>list of active formatting
;;    elements</span>.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "b", "big", "code", "em",
;;   "font", "i", "s", "small", "strike", "strong", "tt", "u"</dt>
;;   <dd>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token. Add that
;;    element to the <span>list of active formatting
;;    elements</span>.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "nobr"</dt>
;;   <dd>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p>If the <span>stack of open elements</span> <span title="has an
;;    element in scope">has a <code>nobr</code> element in scope</span>,
;;    then this is a <span>parse error</span>; act as if an end tag with
;;    the tag name "nobr" had been seen, then once again
;;    <span>reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token. Add that
;;    element to the <span>list of active formatting
;;    elements</span>.</p>
;;
;;   </dd>
;;
;;   <dt id="adoptionAgency">An end tag whose tag name is one of: "a",
;;   "b", "big", "code", "em", "font", "i", "nobr", "s", "small",
;;   "strike", "strong", "tt", "u"</dt>
;;   <dd>
;;
;;    <p>Run these steps:</p>
;;
;;    <ol>
;;
;;     <li>
;;
;;      <p>Let the <var title="">formatting element</var> be the
;;      last element in the <span>list of active formatting
;;      elements</span> that:</p>
;;
;;      <ul>
;;
;;       <li>is between the end of the list and the last scope
;;       marker in the list, if any, or the start of the list
;;       otherwise, and</li>
;;
;;       <li>has the same tag name as the token.</li>
;;
;;      </ul>
;;
;;      <p>If there is no such node, or, if that node is also in the
;;      <span>stack of open elements</span> but the element is not <span
;;      title="has an element in scope">in scope</span>, then this is a
;;      <span>parse error</span>; ignore the token, and abort these
;;      steps.</p>
;;
;;      <p>Otherwise, if there is such a node, but that node is not
;;      in the <span>stack of open elements</span>, then this is a
;;      <span>parse error</span>; remove the element from the list,
;;      and abort these steps.</p>
;;
;;      <p>Otherwise, there is a <var title="">formatting
;;      element</var> and that element is in <span title="stack of
;;      open elements">the stack</span> and is <span title="has an
;;      element in scope">in scope</span>. If the element is not the
;;      <span>current node</span>, this is a <span>parse
;;      error</span>. In any case, proceed with the algorithm as
;;      written in the following steps.</p>
;;
;;     </li>
;;
;;     <li><p>Let the <var title="">furthest block</var> be the topmost
;;     node in the <span>stack of open elements</span> that is lower in
;;     the stack than the <var title="">formatting element</var>, and is
;;     an element in the <span>special</span> category. There might not
;;     be one.</p></li>
;;
;;     <li><p>If there is no <var title="">furthest block</var>,
;;     then the UA must skip the subsequent steps and instead just
;;     pop all the nodes from the bottom of the <span>stack of open
;;     elements</span>, from the <span>current node</span> up to and
;;     including the <var title="">formatting element</var>, and
;;     remove the <var title="">formatting element</var> from the
;;     <span>list of active formatting elements</span>.</p></li>
;;
;;     <li><p>Let the <var title="">common ancestor</var> be the element
;;     immediately above the <var title="">formatting element</var> in the
;;     <span>stack of open elements</span>.</p></li>
;;
;;     <li><p>Let a bookmark note the position of the <var
;;     title="">formatting element</var> in the <span>list of active
;;     formatting elements</span> relative to the elements on either
;;     side of it in the list.</p></li>
;;
;;     <li>
;;
;;      <p>Let <var title="">node</var> and <var title="">last node</var> be the
;;      <var title="">furthest block</var>. Follow these steps:</p>
;;
;;      <ol>
;;
;;       <li>Let <var title="">node</var> be the element immediately
;;       above <var title="">node</var> in the <span>stack of open
;;       elements</span>, or if <var title="">node</var> is no longer in
;;       the <span>stack of open elements</span> (e.g. because it got
;;       removed by the next step), the element that was immediately
;;       above <var title="">node</var> in the <span>stack of open
;;       elements</span> before <var title="">node</var> was
;;       removed.</li>
;;
;;       <li>If <var title="">node</var> is not in the <span>list of
;;       active formatting elements</span>, then remove <var
;;       title="">node</var> from the <span>stack of open
;;       elements</span> and then go back to step 1.</li>
;;
;;       <li>Otherwise, if <var title="">node</var> is the <var
;;       title="">formatting element</var>, then go to the next step
;;       in the overall algorithm.</li>
;;
;;       <li><span>Create an element for the token</span> for which the
;;       element <var title="">node</var> was created, replace the entry
;;       for <var title="">node</var> in the <span>list of active
;;       formatting elements</span> with an entry for the new element,
;;       replace the entry for <var title="">node</var> in the
;;       <span>stack of open elements</span> with an entry for the new
;;       element, and let <var title="">node</var> be the new
;;       element.</li>
;;
;;       <li>If <var title="">last node</var> is the <var
;;       title="">furthest block</var>, then move the aforementioned
;;       bookmark to be immediately after the new <var
;;       title="">node</var> in the <span>list of active formatting
;;       elements</span>.</li>
;;
;;       <li>Insert <var title="">last node</var> into <var
;;       title="">node</var>, first removing it from its previous
;;       parent node if any.</li>
;;
;;       <li>Let <var title="">last node</var> be <var title="">node</var>.</li>
;;
;;       <li>Return to step 1 of this inner set of steps.</li>
;;
;;      </ol>
;;
;;     </li>
;;
;;     <li>
;;
;;      <p>If the <var title="">common ancestor</var> node is a
;;      <code>table</code>, <code>tbody</code>, <code>tfoot</code>,
;;      <code>thead</code>, or <code>tr</code> element, then,
;;      <span>foster parent</span> whatever <var title="">last
;;      node</var> ended up being in the previous step, first removing
;;      it from its previous parent node if any.</p>
;;
;;      <p>Otherwise, append whatever <var title="">last node</var>
;;      ended up being in the previous step to the <var title="">common
;;      ancestor</var> node, first removing it from its previous parent
;;      node if any.</p>
;;
;;     </li>
;;
;;     <li><p><span>Create an element for the token</span> for which the
;;     <var title="">formatting element</var> was created.</p></li>
;;
;;     <li><p>Take all of the child nodes of the <var title="">furthest
;;     block</var> and append them to the element created in the last
;;     step.</p></li>
;;
;;     <li><p>Append that new element to the <var title="">furthest
;;     block</var>.</p></li>
;;
;;     <li><p>Remove the <var title="">formatting element</var> from the
;;     <span>list of active formatting elements</span>, and insert the
;;     new element into the <span>list of active formatting
;;     elements</span> at the position of the aforementioned
;;     bookmark.</p></li>
;;
;;     <li><p>Remove the <var title="">formatting element</var> from the
;;     <span>stack of open elements</span>, and insert the new element
;;     into the <span>stack of open elements</span> immediately below
;;     the position of the <var title="">furthest block</var> in that
;;     stack.</p></li>
;;
;;     <li><p>Jump back to step 1 in this series of steps.</p></li>
;;
;;    </ol>
;;
;;    <p class="note">Because of the way this algorithm causes elements
;;    to change parents, it has been dubbed the "adoption agency
;;    algorithm" (in contrast with other possible algorithms for dealing
;;    with misnested content, which included the "incest algorithm", the
;;    "secret affair algorithm", and the "Heisenberg algorithm").</p>
;;
;;   </dd>
;;
;;   <dt>A start tag token whose tag name is one of: "applet",
;;   "marquee", "object"</dt>
;;   <dd>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>Insert a marker at the end of the <span>list of active
;;    formatting elements</span>.</p>
;;
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;
;;   </dd>
;;
;;   <dt>An end tag token whose tag name is one of: "applet",
;;   "marquee", "object"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in scope">have an element in scope</span>
;;    with the same tag name as that of the token, then this is a
;;    <span>parse error</span>; ignore the token.</p>
;;
;;    <p>Otherwise, run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p><span>Generate implied end tags</span>.</p></li>
;;
;;     <li><p>If the <span>current node</span> is not an element with
;;     the same tag name as that of the token, then this is a
;;     <span>parse error</span>.</p></li>
;;
;;     <li><p>Pop elements from the <span>stack of open elements</span>
;;     until an element with the same tag name as the token has been
;;     popped from the stack.</p></li>
;;
;;     <li><span>Clear the list of active formatting elements up to the
;;     last marker</span>.</li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "table"</dt>
;;   <dd>
;;
;;    <p>If the <code>Document</code> is <em>not</em> set to
;;    <span>quirks mode</span>, and the <span>stack of open
;;    elements</span> <span title="has an element in button scope">has a
;;    <code>p</code> element in button scope</span>, then act as if an
;;    end tag with the tag name "p" had been seen.</p> <!-- i hate
;;    myself (this quirk was basically caused by acid2; if i'd realised
;;    we could change the specs when i wrote acid2, we could have
;;    avoided having any parsing-mode quirks) -Hixie -->
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in table">in table</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "area", "br", "embed",
;;   "img", "input", "keygen", "wbr"</dt>
;;   <dd>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token. Immediately
;;    pop the <span>current node</span> off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p><span title="acknowledge self-closing flag">Acknowledge the
;;    token's <i>self-closing flag</i></span>, if it is set.</p>
;;
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;    <!-- shouldn't really do this for <area> -->
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "param", "source", "track"</dt>
;;   <dd>
;;
;;    <p><span>Insert an HTML element</span> for the token. Immediately
;;    pop the <span>current node</span> off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p><span title="acknowledge self-closing flag">Acknowledge the
;;    token's <i>self-closing flag</i></span>, if it is set.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "hr"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> <span title="has
;;    an element in button scope">has a <code>p</code> element in button
;;    scope</span>, then act as if an end tag with the tag name
;;    "p" had been seen.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token. Immediately
;;    pop the <span>current node</span> off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p><span title="acknowledge self-closing flag">Acknowledge the
;;    token's <i>self-closing flag</i></span>, if it is set.</p>
;;
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "image"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Change the token's tag name
;;    to "img" and reprocess it. (Don't ask.)</p> <!-- As of
;;    2005-12, studies showed that around 0.2% of pages used the
;;    <image> element. -->
;;   </dd>
;;
;;   <dt id="isindex">A start tag whose tag name is "isindex"</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>.</p>
;;
;;    <p>If the <span><code title="">form</code> element
;;    pointer</span> is not null, then ignore the token.</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p><span title="acknowledge self-closing flag">Acknowledge the
;;    token's <i>self-closing flag</i></span>, if it is set.</p> <!--
;;    purely to reduce the number of errors (we don't care if they
;;    included the /, they're not supposed to be including the tag at
;;    all! -->
;;
;;    <p>Act as if a start tag token with the tag name "form" had been seen.</p>
;;
;;    <p>If the token has an attribute called "action", set the
;;    <code title="attr-form-action">action</code> attribute on the
;;    resulting <code>form</code> element to the value of the
;;    "action" attribute of the token.</p>
;;
;;    <p>Act as if a start tag token with the tag name "hr" had been
;;    seen.</p>
;;
;;    <p>Act as if a start tag token with the tag name "label" had been
;;    seen.</p>
;;
;;    <p>Act as if a stream of character tokens had been seen (see below
;;    for what they should say).</p>
;;
;;    <p>Act as if a start tag token with the tag name "input" had been
;;    seen, with all the attributes from the "isindex" token except
;;    "name", "action", and "prompt". Set the <code
;;    title="attr-fe-name">name</code> attribute of the resulting
;;    <code>input</code> element to the value "<code
;;    title="attr-fe-name-isindex">isindex</code>".</p>
;;
;;    <p>Act as if a stream of character tokens had been seen (see
;;    below for what they should say).</p>
;;
;;    <p>Act as if an end tag token with the tag name "label" had been
;;    seen.</p>
;;
;;    <p>Act as if a start tag token with the tag name "hr" had been
;;    seen.</p>
;;
;;    <p>Act as if an end tag token with the tag name "form" had been
;;    seen.</p>
;;
;;    <p>If the token has an attribute with the name "prompt", then the
;;    first stream of characters must be the same string as given in
;;    that attribute, and the second stream of characters must be
;;    empty. Otherwise, the two streams of character tokens together
;;    should, together with the <code>input</code> element, express the
;;    equivalent of "This is a searchable index. Enter search keywords:
;;    (input field)" in the user's preferred language.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "textarea"</dt>
;;   <dd>
;;
;;    <p>Run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p><span>Insert an HTML element</span> for the
;;     token.</p></li>
;;
;;     <li><p>If the next token is a U+000A LINE FEED (LF) character
;;     token, then ignore that token and move on to the next
;;     one. (Newlines at the start of <code>textarea</code> elements are
;;     ignored as an authoring convenience.)</p></li>
;;
;;     <!-- see comment in <pre> start tag bit -->
;;
;;     <li><p>Switch the tokenizer to the <span>RCDATA
;;     state</span>.</p></li>
;;
;;     <li><p>Let the <span>original insertion mode</span> be the
;;     current <span>insertion mode</span>.</p>
;;
;;     <li><p>Set the <span>frameset-ok flag</span> to "not
;;     ok".</p></li>
;;
;;     <li><p>Switch the <span>insertion mode</span> to "<span
;;     title="insertion mode: text">text</span>".</p></li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "xmp"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> <span title="has
;;    an element in button scope">has a <code>p</code> element in button
;;    scope</span>, then act as if an end tag with the tag name
;;    "p" had been seen.</p>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;
;;    <p>Follow the <span>generic raw text element parsing algorithm</span>.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "iframe"</dt>
;;   <dd>
;;
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;
;;    <p>Follow the <span>generic raw text element parsing algorithm</span>.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "noembed"</dt>
;;   <dt>A start tag whose tag name is "noscript", if the <span>scripting flag</span> is enabled</dt>
;;   <dd>
;;
;;    <p>Follow the <span>generic raw text element parsing algorithm</span>.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "select"</dt>
;;   <dd>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;
;;    <p>If the <span>insertion mode</span> is one of "<span
;;    title="insertion mode: in table">in table</span>", "<span
;;    title="insertion mode: in caption">in caption</span>", "<span
;;    title="insertion mode: in table body">in table body</span>",
;;    "<span title="insertion mode: in row">in row</span>", or "<span
;;    title="insertion mode: in cell">in cell</span>", then switch the
;;    <span>insertion mode</span> to "<span title="insertion mode: in
;;    select in table">in select in table</span>". Otherwise, switch the
;;    <span>insertion mode</span> to "<span title="insertion mode: in
;;    select">in select</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "optgroup", "option"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> <span title="has an
;;    element in scope">has an <code>option</code> element in
;;    scope</span>, then act as if an end tag with the tag name "option"
;;    had been seen.</p>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "rp", "rt"</dt>
;;   <dd>
;;
;;    <!-- the parsing rules for ruby really don't match IE much at all,
;;         but in practice the markup used is very simple and so strict
;;         compatibility with IE isn't required. For example, as defined
;;         here we get very, very different behaviour than IE for
;;         pathological cases like:
;;
;;           <ruby><ol><li><p>a<rt>b
;;           <ruby>a<rt>b<p>c
;;
;;         But in practice most ruby markup falls into these cases:
;;
;;           <ruby>a<rt>b</ruby>
;;           <ruby>a<rp>b<rt>c<rp>d</ruby>
;;           <ruby>a<rt>b</rt></ruby>
;;           <ruby>a<rp>b</rp><rt>c</rt><rp>d</rp></ruby>
;;
;;    -->
;;
;;    <p>If the <span>stack of open elements</span> <span title="has an
;;    element in scope">has a <code>ruby</code> element in scope</span>,
;;    then <span>generate implied end tags</span>. If the <span>current
;;    node</span> is not then a <code>ruby</code> element, this is a
;;    <span>parse error</span>; pop all the nodes from the <span>current
;;    node</span> up to the node immediately before the bottommost
;;    <code>ruby</code> element on the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "br"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Act as if a start tag token with
;;    the tag name "br" had been seen. Ignore the end tag token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "math"</dt>
;;   <dd>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Adjust MathML attributes</span> for the token. (This
;;    fixes the case of MathML attributes that are not all
;;    lowercase.)</p>
;;
;;    <p><span>Adjust foreign attributes</span> for the token. (This
;;    fixes the use of namespaced attributes, in particular XLink.)</p>
;;
;;    <p><span>Insert a foreign element</span> for the token, in the
;;    <span>MathML namespace</span>.</p>
;;
;;    <!-- If we ever change the frameset-ok flag to an insertion mode,
;;    the following change would be implied, except we'd have to do it
;;    even in the face of a self-closed tag:
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;    -->
;;
;;    <p>If the token has its <i>self-closing flag</i> set, pop the
;;    <span>current node</span> off the <span>stack of open
;;    elements</span> and <span title="acknowledge self-closing
;;    flag">acknowledge the token's <i>self-closing flag</i></span>.</p>
;;
;;    <p>Otherwise, if the <span>insertion mode</span> is not already
;;    "<span title="insertion mode: in foreign content">in foreign
;;    content</span>", let the <span>secondary insertion mode</span> be
;;    the current <span>insertion mode</span>, and then switch the
;;    <span>insertion mode</span> to "<span title="insertion mode: in
;;    foreign content">in foreign content</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "svg"</dt>
;;   <dd>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Adjust SVG attributes</span> for the token. (This fixes
;;    the case of SVG attributes that are not all lowercase.)</p>
;;
;;    <p><span>Adjust foreign attributes</span> for the token. (This
;;    fixes the use of namespaced attributes, in particular XLink in
;;    SVG.)</p>
;;
;;    <p><span>Insert a foreign element</span> for the token, in the
;;    <span>SVG namespace</span>.</p>
;;
;;    <!-- If we ever change the frameset-ok flag to an insertion mode,
;;    the following change would be implied, except we'd have to do it
;;    even in the face of a self-closed tag:
;;    <p>Set the <span>frameset-ok flag</span> to "not ok".</p>
;;    -->
;;
;;    <p>If the token has its <i>self-closing flag</i> set, pop the
;;    <span>current node</span> off the <span>stack of open
;;    elements</span> and <span title="acknowledge self-closing
;;    flag">acknowledge the token's <i>self-closing flag</i></span>.</p>
;;
;;    <p>Otherwise, if the <span>insertion mode</span> is not already
;;    "<span title="insertion mode: in foreign content">in foreign
;;    content</span>", let the <span>secondary insertion mode</span> be
;;    the current <span>insertion mode</span>, and then switch the
;;    <span>insertion mode</span> to "<span title="insertion mode: in
;;    foreign content">in foreign content</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start <!--or end--> tag whose tag name is one of: "caption",
;;   "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th",
;;   "thead", "tr"</dt>
;;   <!--<dt>An end tag whose tag name is one of: "area", "base",
;;   "basefont", "bgsound", "command", "embed", "hr", "iframe", "image",
;;   "img", "input", "isindex", "keygen", "link", "meta", "noembed",
;;   "noframes", "param", "script", "select", "source", "style",
;;   "table", "textarea", "title", "track", "wbr"</dt>-->
;;   <!--<dt>An end tag whose tag name is "noscript", if the
;;   <span>scripting flag</span> is enabled</dt>-->
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;    <!-- end tags are commented out because since they can never end
;;    up on the stack anyway, the default end tag clause will
;;    automatically handle them. we don't want to have text in the spec
;;    that is just an optimisation, as that detracts from the spec
;;    itself -->
;;   </dd>
;;
;;   <dt>Any other start tag</dt>
;;   <dd>
;;
;;    <p><span>Reconstruct the active formatting elements</span>, if
;;    any.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p class="note">This element will be a <span>ordinary</span>
;;    element.</p>
;;
;;   </dd>
;;
;;   <dt>Any other end tag</dt>
;;   <dd>
;;
;;    <p>Run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p>Initialize <var title="">node</var> to be the <span>current
;;     node</span> (the bottommost node of the stack).</p></li>
;;
;;     <li><p><i>Loop</i>: If <var title="">node</var> has the same tag
;;     name as the token, then:</p>
;;
;;      <ol>
;;
;;       <li><p><span>Generate implied end tags</span>, except
;;       for elements with the same tag name as the token.</p></li>
;;
;;       <li><p>If the tag name of the end tag token does not match
;;       the tag name of the <span>current node</span>, this is a
;;       <span>parse error</span>.</p></li>
;;
;;       <li><p>Pop all the nodes from the <span>current node</span> up
;;       to <var title="">node</var>, including <var
;;       title="">node</var>, then stop these steps.</p></li>
;;
;;      </ol>
;;
;;     </li>
;;
;;     <li><p>Otherwise, if <var title="">node</var> is in the
;;     <span>special</span> category, then this is a <span>parse
;;     error</span>; ignore the token, and abort these steps.</p></li>
;;
;;     <li><p>Set <var title="">node</var> to the previous entry in the
;;     <span>stack of open elements</span>.</p></li>
;;
;;     <li><p>Return to the step labeld <i>loop</i>.</p></li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;
;;  <h5 id="parsing-main-incdata">The "<dfn title="insertion mode: text">text</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: text">text</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token</dt>
;;   <dd>
;;
;;    <p><span title="insert a character">Insert the token's
;;    character</span> into the <span>current node</span>.</p>
;;
;;   </dd>
;;
;;   <dt>An end-of-file token</dt>
;;   <dd>
;;
;;    <!-- can't be the fragment case -->
;;    <p><span>Parse error</span>.</p>
;;
;;    <p>If the <span>current node</span> is a <code>script</code>
;;    element, mark the <code>script</code> element as <span>"already
;;    started"</span>.</p>
;;
;;    <p>Pop the <span>current node</span> off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to the <span>original
;;    insertion mode</span> and reprocess the current token.</p>
;;
;;   </dd>
;;
;;   <dt id="scriptEndTag">An end tag whose tag name is "script"</dt>
;;   <dd>
;;
;;    <p>Let <var title="">script</var> be the <span>current node</span>
;;    (which will be a <code>script</code> element).</p>
;;
;;    <p>Pop the <span>current node</span> off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to the <span>original
;;    insertion mode</span>.</p>
;;
;;    <p>Let the <var title="">old insertion point</var> have the
;;    same value as the current <span>insertion point</span>. Let
;;    the <span>insertion point</span> be just before the <span>next
;;    input character</span>.</p>
;;
;;    <p>Increment the parser's <span>script nesting level</span> by
;;    one.</p>
;;
;;    <p><span title="running a script">Run</span> the <var
;;    title="">script</var>. This might cause some script to execute,
;;    which might cause <span title="dom-document-write">new characters
;;    to be inserted into the tokenizer</span>, and might cause the
;;    tokenizer to output more tokens, resulting in a <a
;;    href="#nestedParsing">reentrant invocation of the parser</a>.</p>
;;
;;    <p>Decrement the parser's <span>script nesting level</span> by
;;    one. If the parser's <span>script nesting level</span> is zero,
;;    then set the <span>parser pause flag</span> to false.</p>
;;
;;    <p>Let the <span>insertion point</span> have the value of the <var
;;    title="">old insertion point</var>. (In other words, restore the
;;    <span>insertion point</span> to its previous value. This value
;;    might be the "undefined" value.)</p>
;;
;;    <p id="scriptTagParserResumes">At this stage, if there is a
;;    <span>pending parsing-blocking script</span>, then:</p>
;;
;;    <dl class="switch">
;;
;;     <dt>If the <span>script nesting level</span> is not zero:</dt>
;;
;;     <dd>
;;
;;      <p>Set the <span>parser pause flag</span> to true, and abort the
;;      processing of any nested invocations of the tokenizer, yielding
;;      control back to the caller. (Tokenization will resume when the
;;      caller returns to the "outer" tree construction stage.)</p>
;;
;;      <p class="note">The tree construction stage of this particular
;;      parser is <a href="#nestedParsing">being called reentrantly</a>,
;;      say from a call to <code
;;      title="dom-document-write">document.write()</code>.</p>
;;
;;     </dd>
;;
;;
;;     <dt>Otherwise:</dt>
;;
;;     <dd>
;;
;;      <p>Run these steps:</p>
;;
;;      <ol>
;;
;;       <li><p>Let <var title="">the script</var> be the <span>pending
;;       parsing-blocking script</span>. There is no longer a <span>pending
;;       parsing-blocking script</span>.</p></li>
;;
;;       <li><p>Block the <span title="tokenization">tokenizer</span>
;;       for this instance of the <span>HTML parser</span>, such that
;;       the <span>event loop</span> will not run <span
;;       title="concept-task">tasks</span> that invoke the <span
;;       title="tokenization">tokenizer</span>.</p></li>
;;
;;       <li><p><span>Spin the event loop</span> until there is no <span
;;       title="a style sheet blocking scripts">style sheet blocking
;;       scripts</span> and <var title="">the script</var>'s
;;       <span>"ready to be parser-executed"</span> flag is set.</p></li>
;;
;;       <li><p>Unblock the <span title="tokenization">tokenizer</span>
;;       for this instance of the <span>HTML parser</span>, such that
;;       <span title="concept-task">tasks</span> that invoke the <span
;;       title="tokenization">tokenizer</span> can again be
;;       run.</p></li>
;;
;;       <li><p>Let the <span>insertion point</span> be just before the
;;       <span>next input character</span>.</p></li>
;;
;;       <li><p>Increment the parser's <span>script nesting level</span>
;;       by one (it should be zero before this step, so this sets it to
;;       one).</p></li>
;;
;;       <li><p><span title="executing a script block">Execute</span>
;;       <var title="">the script</var>.</p></li>
;;
;;       <li><p>Decrement the parser's <span>script nesting level</span>
;;       by one. If the parser's <span>script nesting level</span> is
;;       zero (which it always should be at this point), then set the
;;       <span>parser pause flag</span> to false.</p>
;;
;;       <li><p>Let the <span>insertion point</span> be undefined
;;       again.</p></li>
;;
;;       <li><p>If there is once again a <span>pending parsing-blocking
;;       script</span>, then repeat these steps from step 1.</p></li>
;;
;;      </ol>
;;
;;     </dd>
;;
;;    </dl>
;;
;;   </dd>
;;
;;   <dt>Any other end tag</dt>
;;   <dd>
;;
;;    <p>Pop the <span>current node</span> off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to the <span>original
;;    insertion mode</span>.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-intable">The "<dfn title="insertion mode: in table">in table</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in table">in table</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token</dt>
;;   <dd>
;;
;;     <p>Let the <dfn><var>pending table character tokens</var></dfn>
;;     be an empty list of tokens.</p>
;;
;;     <p>Let the <span>original insertion mode</span> be the current
;;     <span>insertion mode</span>.</p>
;;
;;     <p>Switch the <span>insertion mode</span> to "<span
;;     title="insertion mode: in table text">in table text</span>" and
;;     reprocess the token.</p>
;;
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <span>current
;;    node</span> with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "caption"</dt>
;;   <dd>
;;
;;    <p><span>Clear the stack back to a table context</span>. (See
;;    below.)</p>
;;
;;    <p>Insert a marker at the end of the <span>list of active
;;    formatting elements</span>.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token, then
;;    switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in caption">in caption</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "colgroup"</dt>
;;   <dd>
;;
;;    <p><span>Clear the stack back to a table context</span>. (See
;;    below.)</p>
;;
;;    <p><span>Insert an HTML element</span> for the token, then
;;    switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in column group">in column
;;    group</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "col"</dt>
;;   <dd>
;;    <p>Act as if a start tag token with the tag name "colgroup"
;;    had been seen, then reprocess the current token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "tbody", "tfoot", "thead"</dt>
;;   <dd>
;;
;;    <p><span>Clear the stack back to a table context</span>. (See
;;    below.)</p>
;;
;;    <p><span>Insert an HTML element</span> for the token, then
;;    switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in table body">in table
;;    body</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "td", "th", "tr"</dt>
;;   <dd>
;;    <p>Act as if a start tag token with the tag name "tbody" had
;;    been seen, then reprocess the current token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "table"</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>. Act as if an end tag token with
;;    the tag name "table" had been seen, then, if that token wasn't
;;    ignored, reprocess the current token.</p>
;;
;;    <p class="note">The fake end tag token here can only be
;;    ignored in the <span>fragment case</span>.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "table"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in table scope">have an element in table
;;    scope</span> with the same tag name as the token, this is a
;;    <span>parse error</span>. Ignore the token. (<span>fragment
;;    case</span>)</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p>Pop elements from this stack until a <code>table</code>
;;    element has been popped from the stack.</p>
;;
;;    <p><span>Reset the insertion mode appropriately</span>.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "body", "caption",
;;   "col", "colgroup", "html", "tbody", "td", "tfoot", "th",
;;   "thead", "tr"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "style", "script"</dt>
;;   <dd>
;;
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in head">in head</span>" <span>insertion
;;    mode</span>.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "input"</dt>
;;   <dd>
;;
;;    <p>If the token does not have an attribute with the name "type",
;;    or if it does, but that attribute's value is not an <span>ASCII
;;    case-insensitive</span> match for the string "<code
;;    title="">hidden</code>", then: act as described in the "anything
;;    else" entry below.</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p><span>Parse error</span>.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;    <p>Pop that <code>input</code> element off the <span>stack of
;;    open elements</span>.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "form"</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>.</p>
;;
;;    <p>If the <span><code title="form">form</code> element
;;    pointer</span> is not null, ignore the token.</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p><span>Insert an HTML element</span> for the token, and set the
;;    <span><code title="form">form</code> element pointer</span> to
;;    point to the element created.</p>
;;
;;    <p>Pop that <code>form</code> element off the <span>stack of
;;    open elements</span>.</p>
;;
;;   </dd>
;;
;;   <!-- "form" end tag falls through to in-body, which does the right thing -->
;;
;;   <dt>An end-of-file token</dt>
;;   <dd>
;;
;;    <p>If the <span>current node</span> is not the root
;;    <code>html</code> element, then this is a <span>parse
;;    error</span>.</p>
;;
;;    <p class="note">It can only be the <span>current node</span> in
;;    the <span>fragment case</span>.</p>
;;
;;    <p><span>Stop parsing</span>.</p>
;;
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>. Process the token <span>using the
;;    rules for</span> the "<span title="insertion mode: in body">in
;;    body</span>" <span>insertion mode</span>, except that if the
;;    <span>current node</span> is a <code>table</code>,
;;    <code>tbody</code>, <code>tfoot</code>, <code>thead</code>, or
;;    <code>tr</code> element, then, whenever a node would be inserted
;;    into the <span>current node</span>, it must instead be <span
;;    title="foster parent">foster parented</span>.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;  <p>When the steps above require the UA to <dfn>clear the stack
;;  back to a table context</dfn>, it means that the UA must, while
;;  the <span>current node</span> is not a <code>table</code>
;;  element or an <code>html</code> element, pop elements from the
;;  <span>stack of open elements</span>.</p>
;;
;;  <p class="note">The <span>current node</span> being an
;;  <code>html</code> element after this process is a <span>fragment
;;  case</span>.</p>
;;
;;
;;
;;  <h5 id="parsing-main-intabletext">The "<dfn title="insertion mode: in table text">in table text</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in table text">in table text</span>", tokens must be handled
;;  as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token</dt>
;;   <dd>
;;
;;    <p>Append the character token to the <var>pending table character
;;    tokens</var> list.</p>
;;
;;   </dd>
;;
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;
;;    <p>If any of the tokens in the <var>pending table character
;;    tokens</var> list are character tokens that are not one of U+0009
;;    CHARACTER TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED
;;    (FF), U+000D CARRIAGE RETURN (CR), or U+0020 SPACE, then
;;    reprocess those character tokens using the rules given in the
;;    "anything else" entry in the <span title="insertion mode: in
;;    table">in table</span>" insertion mode.</p>
;;
;;    <p>Otherwise, <span title="insert a character">insert the
;;    characters</span> given by the <var>pending table character
;;    tokens</var> list into the <span>current node</span>.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to the <span>original
;;    insertion mode</span> and reprocess the token.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-incaption">The "<dfn title="insertion mode: in caption">in caption</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in caption">in caption</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>An end tag whose tag name is "caption"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in table scope">have an element in table
;;    scope</span> with the same tag name as the token, this is a
;;    <span>parse error</span>. Ignore the token. (<span>fragment
;;    case</span>)</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p><span>Generate implied end tags</span>.</p>
;;
;;    <p>Now, if the <span>current node</span> is not a
;;    <code>caption</code> element, then this is a <span>parse
;;    error</span>.</p>
;;
;;    <p>Pop elements from this stack until a <code>caption</code>
;;    element has been popped from the stack.</p>
;;
;;    <p><span>Clear the list of active formatting elements up to
;;    the last marker</span>.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in table">in table</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "caption", "col",
;;   "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
;;   <dt>An end tag whose tag name is "table"</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>. Act as if an end tag with the tag
;;    name "caption" had been seen, then, if that token wasn't
;;    ignored, reprocess the current token.</p>
;;
;;    <p class="note">The fake end tag token here can only be
;;    ignored in the <span>fragment case</span>.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "body", "col",
;;   "colgroup", "html", "tbody", "td", "tfoot", "th", "thead",
;;   "tr"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-incolgroup">The "<dfn title="insertion mode: in column group">in column group</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in column group">in column group</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dd>
;;    <p><span title="insert a character">Insert the character</span> into
;;    the <span>current node</span>.</p>
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <span>current
;;    node</span> with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "col"</dt>
;;   <dd>
;;
;;    <p><span>Insert an HTML element</span> for the token. Immediately
;;    pop the <span>current node</span> off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p><span title="acknowledge self-closing flag">Acknowledge the
;;    token's <i>self-closing flag</i></span>, if it is set.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "colgroup"</dt>
;;   <dd>
;;
;;    <p>If the <span>current node</span> is the root
;;    <code>html</code> element, then this is a <span>parse
;;    error</span>; ignore the token. (<span>fragment
;;    case</span>)</p>
;;
;;    <p>Otherwise, pop the <span>current node</span> (which will be
;;    a <code>colgroup</code> element) from the <span>stack of open
;;    elements</span>. Switch the <span>insertion mode</span> to
;;    "<span title="insertion mode: in table">in table</span>".</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "col"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>An end-of-file token</dt>
;;   <dd>
;;
;;    <p>If the <span>current node</span> is the root <code>html</code>
;;    element, then <span>stop parsing</span>. (<span>fragment
;;    case</span>)</p>
;;
;;    <p>Otherwise, act as described in the "anything else" entry
;;    below.</p>
;;
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;
;;    <p>Act as if an end tag with the tag name "colgroup" had been
;;    seen, and then, if that token wasn't ignored, reprocess the
;;    current token.</p>
;;
;;    <p class="note">The fake end tag token here can only be
;;    ignored in the <span>fragment case</span>.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-intbody">The "<dfn title="insertion mode: in table body">in table body</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in table body">in table body</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A start tag whose tag name is "tr"</dt>
;;   <dd>
;;
;;    <p><span>Clear the stack back to a table body
;;    context</span>. (See below.)</p>
;;
;;    <p><span>Insert an HTML element</span> for the token, then switch
;;    the <span>insertion mode</span> to "<span title="insertion mode:
;;    in row">in row</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "th", "td"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Act as if a start tag with
;;    the tag name "tr" had been seen, then reprocess the current
;;    token.</p>
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "tbody", "tfoot",
;;   "thead"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in table scope">have an element in table
;;    scope</span> with the same tag name as the token, this is a
;;    <span>parse error</span>. Ignore the token.</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p><span>Clear the stack back to a table body
;;    context</span>. (See below.)</p>
;;
;;    <p>Pop the <span>current node</span> from the <span>stack of
;;    open elements</span>. Switch the <span>insertion mode</span>
;;    to "<span title="insertion mode: in table">in table</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "caption", "col",
;;   "colgroup", "tbody", "tfoot", "thead"</dt>
;;   <dt>An end tag whose tag name is "table"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in table scope">have a
;;    <code>tbody</code>, <code>thead</code>, or <code>tfoot</code>
;;    element in table scope</span>, this is a <span>parse
;;    error</span>. Ignore the token. (<span>fragment
;;    case</span>)</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p><span>Clear the stack back to a table body
;;    context</span>. (See below.)</p>
;;
;;    <p>Act as if an end tag with the same tag name as the
;;    <span>current node</span> ("tbody", "tfoot", or "thead") had
;;    been seen, then reprocess the current token.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "body", "caption",
;;   "col", "colgroup", "html", "td", "th", "tr"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in table">in table</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;  </dl>
;;
;;  <p>When the steps above require the UA to <dfn>clear the stack
;;  back to a table body context</dfn>, it means that the UA must,
;;  while the <span>current node</span> is not a <code>tbody</code>,
;;  <code>tfoot</code>, <code>thead</code>, or <code>html</code>
;;  element, pop elements from the <span>stack of open
;;  elements</span>.</p>
;;
;;  <p class="note">The <span>current node</span> being an
;;  <code>html</code> element after this process is a <span>fragment
;;  case</span>.</p>
;;
;;
;;  <h5 id="parsing-main-intr">The "<dfn title="insertion mode: in row">in row</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in row">in row</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A start tag whose tag name is one of: "th", "td"</dt>
;;   <dd>
;;
;;    <p><span>Clear the stack back to a table row
;;    context</span>. (See below.)</p>
;;
;;    <p><span>Insert an HTML element</span> for the token, then switch
;;    the <span>insertion mode</span> to "<span title="insertion mode:
;;    in cell">in cell</span>".</p>
;;
;;    <p>Insert a marker at the end of the <span>list of active
;;    formatting elements</span>.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "tr"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in table scope">have an element in table
;;    scope</span> with the same tag name as the token, this is a
;;    <span>parse error</span>. Ignore the token. (<span>fragment
;;    case</span>)</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p><span>Clear the stack back to a table row
;;    context</span>. (See below.)</p>
;;
;;    <p>Pop the <span>current node</span> (which will be a
;;    <code>tr</code> element) from the <span>stack of open
;;    elements</span>. Switch the <span>insertion mode</span> to
;;    "<span title="insertion mode: in table body">in table
;;    body</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "caption", "col",
;;   "colgroup", "tbody", "tfoot", "thead", "tr"</dt>
;;   <dt>An end tag whose tag name is "table"</dt>
;;   <dd>
;;
;;    <p>Act as if an end tag with the tag name "tr" had been seen,
;;    then, if that token wasn't ignored, reprocess the current
;;    token.</p>
;;
;;    <p class="note">The fake end tag token here can only be
;;    ignored in the <span>fragment case</span>.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "tbody", "tfoot",
;;   "thead"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in table scope">have an element in table
;;    scope</span> with the same tag name as the token, this is a
;;    <span>parse error</span>. Ignore the token.</p>
;;
;;    <p>Otherwise, act as if an end tag with the tag name "tr" had
;;    been seen, then reprocess the current token.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "body", "caption",
;;   "col", "colgroup", "html", "td", "th"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in table">in table</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;  </dl>
;;
;;  <p>When the steps above require the UA to <dfn>clear the stack
;;  back to a table row context</dfn>, it means that the UA must,
;;  while the <span>current node</span> is not a <code>tr</code>
;;  element or an <code>html</code> element, pop elements from the
;;  <span>stack of open elements</span>.</p>
;;
;;  <p class="note">The <span>current node</span> being an
;;  <code>html</code> element after this process is a <span>fragment
;;  case</span>.</p>
;;
;;
;;  <h5 id="parsing-main-intd">The "<dfn title="insertion mode: in cell">in cell</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in cell">in cell</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>An end tag whose tag name is one of: "td", "th"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in table scope">have an element in table
;;    scope</span> with the same tag name as that of the token, then
;;    this is a <span>parse error</span> and the token must be
;;    ignored.</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p><span>Generate implied end tags</span>.</p>
;;
;;    <p>Now, if the <span>current node</span> is not an element
;;    with the same tag name as the token, then this is a
;;    <span>parse error</span>.</p>
;;
;;    <p>Pop elements from the <span>stack of open elements</span> stack
;;    until an element with the same tag name as the token has been
;;    popped from the stack.</p>
;;
;;    <p><span>Clear the list of active formatting elements up to
;;    the last marker</span>.</p>
;;
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: in row">in row</span>".</p> <!-- current
;;    node here will be a <tr> normally; but could be <html> in the
;;    fragment case -->
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "caption", "col",
;;   "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does
;;    <em>not</em> <span title="has an element in table scope">have
;;    a <code>td</code> or <code>th</code> element in table
;;    scope</span>, then this is a <span>parse error</span>; ignore
;;    the token. (<span>fragment case</span>)</p>
;;
;;    <p>Otherwise, <span>close the cell</span> (see below) and
;;    reprocess the current token.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "body", "caption",
;;   "col", "colgroup", "html"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "table", "tbody",
;;   "tfoot", "thead", "tr"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in table scope">have an element in table
;;    scope</span> with the same tag name as that of the token (which
;;    can only happen for "tbody", "tfoot" and "thead", or in the
;;    <span>fragment case</span>), then this is a <span>parse
;;    error</span> and the token must be ignored.</p>
;;
;;    <p>Otherwise, <span>close the cell</span> (see below) and
;;    reprocess the current token.</p>
;;
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;  </dl>
;;
;;  <p>Where the steps above say to <dfn>close the cell</dfn>, they
;;  mean to run the following algorithm:</p>
;;
;;  <ol>
;;
;;   <li><p>If the <span>stack of open elements</span> <span
;;   title="has an element in table scope">has a <code>td</code>
;;   element in table scope</span>, then act as if an end tag token
;;   with the tag name "td" had been seen.</p></li>
;;
;;   <li><p>Otherwise, the <span>stack of open elements</span> will
;;   <span title="has an element in table scope">have a
;;   <code>th</code> element in table scope</span>; act as if an end
;;   tag token with the tag name "th" had been seen.</p></li>
;;
;;  </ol>
;;
;;  <p class="note">The <span>stack of open elements</span> cannot
;;  have both a <code>td</code> and a <code>th</code> element <span
;;  title="has an element in table scope">in table scope</span> at
;;  the same time, nor can it have neither when the <span>insertion
;;  mode</span> is "<span title="insertion mode: in cell">in
;;  cell</span>".</p>
;;
;;
;;  <h5 id="parsing-main-inselect">The "<dfn title="insertion mode: in select">in select</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in select">in select</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token</dt>
;;   <dd>
;;    <p><span title="insert a character">Insert the token's
;;    character</span> into the <span>current node</span>.</p>
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <span>current
;;    node</span> with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "option"</dt>
;;   <dd>
;;
;;    <p>If the <span>current node</span> is an <code>option</code>
;;    element, act as if an end tag with the tag name "option" had
;;    been seen.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "optgroup"</dt>
;;   <dd>
;;
;;    <p>If the <span>current node</span> is an <code>option</code>
;;    element, act as if an end tag with the tag name "option" had
;;    been seen.</p>
;;
;;    <p>If the <span>current node</span> is an
;;    <code>optgroup</code> element, act as if an end tag with the
;;    tag name "optgroup" had been seen.</p>
;;
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "optgroup"</dt>
;;   <dd>
;;
;;    <p>First, if the <span>current node</span> is an
;;    <code>option</code> element, and the node immediately before
;;    it in the <span>stack of open elements</span> is an
;;    <code>optgroup</code> element, then act as if an end tag with
;;    the tag name "option" had been seen.</p>
;;
;;    <p>If the <span>current node</span> is an
;;    <code>optgroup</code> element, then pop that node from the
;;    <span>stack of open elements</span>. Otherwise, this is a
;;    <span>parse error</span>; ignore the token.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "option"</dt>
;;   <dd>
;;
;;    <p>If the <span>current node</span> is an <code>option</code>
;;    element, then pop that node from the <span>stack of open
;;    elements</span>. Otherwise, this is a <span>parse
;;    error</span>; ignore the token.</p>
;;
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "select"</dt>
;;   <dd>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in table scope">have an element in table
;;    scope</span> with the same tag name as the token, this is a
;;    <span>parse error</span>. Ignore the token. (<span>fragment
;;    case</span>)</p>
;;
;;    <p>Otherwise:</p>
;;
;;    <p>Pop elements from the <span>stack of open elements</span>
;;    until a <code>select</code> element has been popped from the
;;    stack.</p>
;;
;;    <p><span>Reset the insertion mode appropriately</span>.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "select"</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>. Act as if the token had been
;;    an end tag with the tag name "select" instead.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: "input", "keygen", "textarea"</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>.</p>
;;
;;    <p>If the <span>stack of open elements</span> does not <span
;;    title="has an element in table scope">have a <code>select</code>
;;    element in table scope</span>, ignore the token. (<span>fragment
;;    case</span>)</p>
;;
;;    <p>Otherwise, act as if an end tag with the tag name "select" had
;;    been seen, and reprocess the token.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag token whose tag name is "script"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in head">in head</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>An end-of-file token</dt>
;;   <dd>
;;
;;    <p>If the <span>current node</span> is not the root
;;    <code>html</code> element, then this is a <span>parse
;;    error</span>.</p>
;;
;;    <p class="note">It can only be the <span>current node</span> in
;;    the <span>fragment case</span>.</p>
;;
;;    <p><span>Stop parsing</span>.</p>
;;
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-inselectintable">The "<dfn title="insertion mode: in select in table">in select in table</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in select in table">in select in table</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A start tag whose tag name is one of: "caption", "table",
;;   "tbody", "tfoot", "thead", "tr", "td", "th"</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Act as if an end tag with the tag
;;    name "select" had been seen, and reprocess the token.</p>
;;   </dd>
;;
;;   <dt>An end tag whose tag name is one of: "caption", "table",
;;   "tbody", "tfoot", "thead", "tr", "td", "th"</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>.</p>
;;
;;    <p>If the <span>stack of open elements</span> <span>has an
;;    element in table scope</span> with the same tag name as that
;;    of the token, then act as if an end tag with the tag name
;;    "select" had been seen, and reprocess the token. Otherwise,
;;    ignore the token.</p>
;;
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in select">in select</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-inforeign">The "<dfn title="insertion mode: in foreign content">in foreign content</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in foreign content">in foreign content</span>", tokens must be
;;  handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token</dt>
;;   <dd>
;;
;;    <p><span title="insert a character">Insert the token's
;;    character</span> into the <span>current node</span>.</p>
;;
;;    <p>If the token is not one of U+0009 CHARACTER TABULATION, U+000A
;;    LINE FEED (LF), U+000C FORM FEED (FF), U+000D CARRIAGE RETURN
;;    (CR), or U+0020 SPACE, then set the <span>frameset-ok
;;    flag</span> to "not ok".</p>
;;
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <span>current
;;    node</span> with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt id="scriptForeignEndTag">An end tag whose tag name is "script", if the <span>current node</span> is a <code title="">script</code> element in the <span>SVG namespace</span>.</dt>
;;   <dd>
;;
;;    <p>Pop the <span>current node</span> off the <span>stack of open
;;    elements</span>.</p>
;;
;;    <p>Let the <var title="">old insertion point</var> have the
;;    same value as the current <span>insertion point</span>. Let
;;    the <span>insertion point</span> be just before the <span>next
;;    input character</span>.</p>
;;
;;    <p>Increment the parser's <span>script nesting level</span> by
;;    one. Set the <span>parser pause flag</span> to true.</p>
;;
;;    <p><a
;;    href="http://www.w3.org/TR/SVGMobile12/script.html#ScriptContentProcessing">Process
;;    the <code title="">script</code> element</a> according to the SVG
;;    rules, if the user agent supports SVG. <a
;;    href="#refsSVG">[SVG]</a></p>
;;
;;    <p class="note">Even if this causes <span
;;    title="dom-document-write">new characters to be inserted into the
;;    tokenizer</span>, the parser will not be executed reentrantly,
;;    since the <span>parser pause flag</span> is true.</p>
;;
;;    <p>Decrement the parser's <span>script nesting level</span> by
;;    one. If the parser's <span>script nesting level</span> is zero,
;;    then set the <span>parser pause flag</span> to false.</p>
;;
;;    <p>Let the <span>insertion point</span> have the value of the <var
;;    title="">old insertion point</var>. (In other words, restore the
;;    <span>insertion point</span> to its previous value. This value
;;    might be the "undefined" value.)</p>
;;
;;   </dd>
;;
;;   <dt>An end tag, if the <span>current node</span> is not an element in the <span>HTML namespace</span>.</dt>
;;
;;   <dd>
;;
;;    <p>Run these steps:</p>
;;
;;    <ol>
;;
;;     <li><p>Initialize <var title="">node</var> to be the <span>current
;;     node</span> (the bottommost node of the stack).</p></li>
;;
;;     <li><p>If <var title="">node</var> is not an element with the
;;     same tag name as the token, then this is a <span>parse
;;     error</span>.</p></li>
;;
;;     <li><p><i>Loop</i>: If <var title="">node</var> has the same tag
;;     name as the token, pop elements from the <span>stack of open
;;     elements</span> until <var title="">node</var> has been popped
;;     from the stack, and then jump to the last step of this list of
;;     steps.</p></li>
;;
;;     <li><p>Set <var title="">node</var> to the previous entry in the
;;     <span>stack of open elements</span>.</p></li>
;;
;;     <li><p>If <var title="">node</var> is not an element in the
;;     <span>HTML namespace</span>, return to the step labeled
;;     <i>loop</i>.</p></li>
;;
;;     <li><p>Otherwise, process the token <span>using the rules
;;     for</span> the <span>secondary insertion mode</span>.</p></li>
;;
;;     <li><p>If the <span>insertion mode</span> is still "<span
;;     title="insertion mode: in foreign content">in foreign
;;     content</span>", but there is no element <span title="has an
;;     element in scope">in scope</span> that has a namespace other than
;;     the <span>HTML namespace</span>, switch the <span>insertion
;;     mode</span> to the <span>secondary insertion
;;     mode</span>.</p></li>
;;
;;    </ol>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is neither "mglyph" nor "malignmark", if the <span>current node</span> is an <code title="">mi</code> element in the <span>MathML namespace</span>.</dt>
;;   <dt>A start tag whose tag name is neither "mglyph" nor "malignmark", if the <span>current node</span> is an <code title="">mo</code> element in the <span>MathML namespace</span>.</dt>
;;   <dt>A start tag whose tag name is neither "mglyph" nor "malignmark", if the <span>current node</span> is an <code title="">mn</code> element in the <span>MathML namespace</span>.</dt>
;;   <dt>A start tag whose tag name is neither "mglyph" nor "malignmark", if the <span>current node</span> is an <code title="">ms</code> element in the <span>MathML namespace</span>.</dt>
;;   <dt>A start tag whose tag name is neither "mglyph" nor "malignmark", if the <span>current node</span> is an <code title="">mtext</code> element in the <span>MathML namespace</span>.</dt>
;;   <dt>A start tag whose tag name is "svg", if the <span>current node</span> is an <code title="">annotation-xml</code> element in the <span>MathML namespace</span>.</dt>
;;   <dt>A start tag, if the <span>current node</span> is a <code title="">foreignObject</code> element in the <span>SVG namespace</span>.</dt>
;;   <dt>A start tag, if the <span>current node</span> is a <code title="">desc</code> element in the <span>SVG namespace</span>.</dt>
;;   <dt>A start tag, if the <span>current node</span> is a <code title="">title</code> element in the <span>SVG namespace</span>.</dt>
;;   <dt>A start tag, if the <span>current node</span> is an element in the <span>HTML namespace</span>.</dt>
;;   <dt>Any other end tag</dt>
;;   <dd>
;;
;;    <p>Process the token <span>using the rules for</span> the
;;    <span>secondary insertion mode</span>.</p>
;;
;;    <p>If, after doing so, the <span>insertion mode</span> is still
;;    "<span title="insertion mode: in foreign content">in foreign
;;    content</span>", but there is no element <span title="has an
;;    element in scope">in scope</span> that has a namespace other than
;;    the <span>HTML namespace</span>, switch the <span>insertion
;;    mode</span> to the <span>secondary insertion mode</span>.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is one of: <!--"a",--> "b", "big",
;;   "blockquote", "body"<!--by inspection-->, "br", "center", "code",
;;   "dd", "div", "dl", "dt"<!-- so that dd and dt can be handled
;;   uniformly throughout the parser -->, "em", "embed", "h1", "h2",
;;   "h3", "h4"<!--for completeness-->, "h5", "h6"<!--for
;;   completeness-->, "head"<!--by inspection-->, "hr", "i", "img",
;;   "li", "listing"<!-- so that pre and listing can be handled
;;   uniformly throughout the parser -->, "menu", "meta", "nobr",
;;   "ol"<!-- so that dl, ul, and ol can be handled uniformly throughout
;;   the parser -->, "p", "pre", "ruby", "s", <!--"script",--> "small",
;;   "span", "strong", "strike"<!-- so that s and strike can be handled
;;   uniformly throughout the parser -->, <!--"style",--> "sub", "sup",
;;   "table"<!--by inspection-->, "tt", "u", "ul", "var"</dt> <!-- this
;;   list was determined empirically by studying over 6,000,000,000
;;   pages that were specifically not XML pages -->
;;   <dt>A start tag whose tag name is "font", if the token has any
;;   attributes named "color", "face", or "size"</dt> <!-- the
;;   attributes here are required so that SVG <font> will go through as
;;   SVG but legacy <font>s won't -->
;;   <dt>An end-of-file token</dt> <dd>
;;
;;    <p><span>Parse error</span>.</p>
;;
;;    <p>Pop elements from the <span>stack of open elements</span> until
;;    the <span>current node</span> is one of the following:</p>
;;
;;    <ul class="brief">
;;
;;     <li>an <code title="">mi</code> element in the <span>MathML namespace</span></li>
;;     <li>an <code title="">mo</code> element in the <span>MathML namespace</span></li>
;;     <li>an <code title="">mn</code> element in the <span>MathML namespace</span></li>
;;     <li>an <code title="">ms</code> element in the <span>MathML namespace</span></li>
;;     <li>an <code title="">mtext</code> element in the <span>MathML namespace</span></li>
;;     <li>a <code title="">foreignObject</code> element in the <span>SVG namespace</span></li>
;;     <li>a <code title="">desc</code> element in the <span>SVG namespace</span></li>
;;     <li>a <code title="">title</code> element in the <span>SVG namespace</span></li>
;;     <li>an element in the <span>HTML namespace</span></li>
;;
;;    </ul>
;;
;;    <p>If, after doing so, the <span>insertion mode</span> is still
;;    "<span title="insertion mode: in foreign content">in foreign
;;    content</span>", but there is no element <span title="has an
;;    element in scope">in scope</span> that has a namespace other than
;;    the <span>HTML namespace</span>, switch the <span>insertion
;;    mode</span> to the <span>secondary insertion mode</span>.</p>
;;
;;    <p>Reprocess the token.</p>
;;
;;   </dd>
;;
;;   <dt>Any other start tag</dt>
;;   <dd>
;;
;;    <p>If the <span>current node</span> is an element in the
;;    <span>MathML namespace</span>, <span>adjust MathML
;;    attributes</span> for the token. (This fixes the case of MathML
;;    attributes that are not all lowercase.)</p>
;;
;;    <p>If the <span>current node</span> is an element in the <span>SVG
;;    namespace</span>, and the token's tag name is one of the ones in
;;    the first column of the following table, change the tag name to
;;    the name given in the corresponding cell in the second
;;    column. (This fixes the case of SVG elements that are not all
;;    lowercase.)</p>
;;
;;    <table>
;;     <thead>
;;      <tr> <th> Tag name <th> Element name
;;     <tbody>
;;      <tr> <td> <code title="">altglyph</code> <td> <code title="">altGlyph</code>
;;      <tr> <td> <code title="">altglyphdef</code> <td> <code title="">altGlyphDef</code>
;;      <tr> <td> <code title="">altglyphitem</code> <td> <code title="">altGlyphItem</code>
;;      <tr> <td> <code title="">animatecolor</code> <td> <code title="">animateColor</code>
;;      <tr> <td> <code title="">animatemotion</code> <td> <code title="">animateMotion</code>
;;      <tr> <td> <code title="">animatetransform</code> <td> <code title="">animateTransform</code>
;;      <tr> <td> <code title="">clippath</code> <td> <code title="">clipPath</code>
;;      <tr> <td> <code title="">feblend</code> <td> <code title="">feBlend</code>
;;      <tr> <td> <code title="">fecolormatrix</code> <td> <code title="">feColorMatrix</code>
;;      <tr> <td> <code title="">fecomponenttransfer</code> <td> <code title="">feComponentTransfer</code>
;;      <tr> <td> <code title="">fecomposite</code> <td> <code title="">feComposite</code>
;;      <tr> <td> <code title="">feconvolvematrix</code> <td> <code title="">feConvolveMatrix</code>
;;      <tr> <td> <code title="">fediffuselighting</code> <td> <code title="">feDiffuseLighting</code>
;;      <tr> <td> <code title="">fedisplacementmap</code> <td> <code title="">feDisplacementMap</code>
;;      <tr> <td> <code title="">fedistantlight</code> <td> <code title="">feDistantLight</code>
;;      <tr> <td> <code title="">feflood</code> <td> <code title="">feFlood</code>
;;      <tr> <td> <code title="">fefunca</code> <td> <code title="">feFuncA</code>
;;      <tr> <td> <code title="">fefuncb</code> <td> <code title="">feFuncB</code>
;;      <tr> <td> <code title="">fefuncg</code> <td> <code title="">feFuncG</code>
;;      <tr> <td> <code title="">fefuncr</code> <td> <code title="">feFuncR</code>
;;      <tr> <td> <code title="">fegaussianblur</code> <td> <code title="">feGaussianBlur</code>
;;      <tr> <td> <code title="">feimage</code> <td> <code title="">feImage</code>
;;      <tr> <td> <code title="">femerge</code> <td> <code title="">feMerge</code>
;;      <tr> <td> <code title="">femergenode</code> <td> <code title="">feMergeNode</code>
;;      <tr> <td> <code title="">femorphology</code> <td> <code title="">feMorphology</code>
;;      <tr> <td> <code title="">feoffset</code> <td> <code title="">feOffset</code>
;;      <tr> <td> <code title="">fepointlight</code> <td> <code title="">fePointLight</code>
;;      <tr> <td> <code title="">fespecularlighting</code> <td> <code title="">feSpecularLighting</code>
;;      <tr> <td> <code title="">fespotlight</code> <td> <code title="">feSpotLight</code>
;;      <tr> <td> <code title="">fetile</code> <td> <code title="">feTile</code>
;;      <tr> <td> <code title="">feturbulence</code> <td> <code title="">feTurbulence</code>
;;      <tr> <td> <code title="">foreignobject</code> <td> <code title="">foreignObject</code>
;;      <tr> <td> <code title="">glyphref</code> <td> <code title="">glyphRef</code>
;;      <tr> <td> <code title="">lineargradient</code> <td> <code title="">linearGradient</code>
;;      <tr> <td> <code title="">radialgradient</code> <td> <code title="">radialGradient</code>
;;      <!--<tr> <td> <code title="">solidcolor</code> <td> <code title="">solidColor</code> (SVG 1.2)-->
;;      <tr> <td> <code title="">textpath</code> <td> <code title="">textPath</code>
;;    </table>
;;
;;    <p>If the <span>current node</span> is an element in the <span>SVG
;;    namespace</span>, <span>adjust SVG attributes</span> for the
;;    token. (This fixes the case of SVG attributes that are not all
;;    lowercase.)</p>
;;
;;    <p><span>Adjust foreign attributes</span> for the token. (This
;;    fixes the use of namespaced attributes, in particular XLink in
;;    SVG.)</p>
;;
;;    <p><span>Insert a foreign element</span> for the token, in the
;;    same namespace as the <span>current node</span>.</p>
;;
;;    <p>If the token has its <i>self-closing flag</i> set, pop the
;;    <span>current node</span> off the <span>stack of open
;;    elements</span> and <span title="acknowledge self-closing
;;    flag">acknowledge the token's <i>self-closing flag</i></span>.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-afterbody">The "<dfn title="insertion mode: after body">after body</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: after body">after body</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the first element in
;;    the <span>stack of open elements</span> (the <code>html</code>
;;    element), with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "html"</dt>
;;   <dd>
;;
;;    <p>If the parser was originally created as part of the <span>HTML
;;    fragment parsing algorithm</span>, this is a <span>parse
;;    error</span>; ignore the token. (<span>fragment case</span>)</p>
;;
;;    <p>Otherwise, switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: after after body">after after
;;    body</span>".</p>
;;
;;   </dd>
;;
;;   <dt>An end-of-file token</dt>
;;   <dd>
;;    <p><span>Stop parsing</span>.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;
;;    <p><span>Parse error</span>. Switch the <span>insertion
;;    mode</span> to "<span title="insertion mode: in body">in
;;    body</span>" and reprocess the token.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-inframeset">The "<dfn title="insertion mode: in frameset">in frameset</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: in frameset">in frameset</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dd>
;;    <p><span title="insert a character">Insert the character</span> into
;;    the <span>current node</span>.</p>
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <span>current
;;    node</span> with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "frameset"</dt>
;;   <dd>
;;    <p><span>Insert an HTML element</span> for the token.</p>
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "frameset"</dt>
;;   <dd>
;;
;;    <p>If the <span>current node</span> is the root
;;    <code>html</code> element, then this is a <span>parse
;;    error</span>; ignore the token. (<span>fragment
;;    case</span>)</p>
;;
;;    <p>Otherwise, pop the <span>current node</span> from the
;;    <span>stack of open elements</span>.</p>
;;
;;    <p>If the parser was <em>not</em> originally created as part
;;    of the <span>HTML fragment parsing algorithm</span>
;;    (<span>fragment case</span>), and the <span>current
;;    node</span> is no longer a <code>frameset</code> element, then
;;    switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: after frameset">after
;;    frameset</span>".</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "frame"</dt>
;;   <dd>
;;
;;    <p><span>Insert an HTML element</span> for the token.
;;    Immediately pop the <span>current node</span> off the
;;    <span>stack of open elements</span>.</p>
;;
;;    <p><span title="acknowledge self-closing flag">Acknowledge the
;;    token's <i>self-closing flag</i></span>, if it is set.</p>
;;
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "noframes"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in head">in head</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>An end-of-file token</dt>
;;   <dd>
;;
;;    <p>If the <span>current node</span> is not the root
;;    <code>html</code> element, then this is a <span>parse
;;    error</span>.</p>
;;
;;    <p class="note">It can only be the <span>current node</span> in
;;    the <span>fragment case</span>.</p>
;;
;;    <p><span>Stop parsing</span>.</p>
;;
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5 id="parsing-main-afterframeset">The "<dfn title="insertion mode: after frameset">after frameset</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: after frameset">after frameset</span>", tokens must be handled as follows:</p>
;;
;;  <!-- due to rules in the "in frameset" mode, this can't be entered in the fragment case -->
;;  <dl class="switch">
;;
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dd>
;;    <p><span title="insert a character">Insert the character</span> into
;;    the <span>current node</span>.</p>
;;   </dd>
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <span>current
;;    node</span> with the <code title="">data</code> attribute set to
;;    the data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>An end tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Switch the <span>insertion mode</span> to "<span
;;    title="insertion mode: after after frameset">after after
;;    frameset</span>".</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "noframes"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in head">in head</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>An end-of-file token</dt>
;;   <dd>
;;    <p><span>Stop parsing</span>.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5>The "<dfn title="insertion mode: after after body">after after body</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: after after body">after after body</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <code>Document</code>
;;    object with the <code title="">data</code> attribute set to the
;;    data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>An end-of-file token</dt>
;;   <dd>
;;    <p><span>Stop parsing</span>.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Switch the <span>insertion mode</span>
;;    to "<span title="insertion mode: in body">in body</span>" and
;;    reprocess the token.</p>
;;   </dd>
;;
;;  </dl>
;;
;;
;;  <h5>The "<dfn title="insertion mode: after after frameset">after after frameset</dfn>" insertion mode</h5>
;;
;;  <p>When the <span>insertion mode</span> is "<span title="insertion
;;  mode: after after frameset">after after frameset</span>", tokens must be handled as follows:</p>
;;
;;  <dl class="switch">
;;
;;   <dt>A comment token</dt>
;;   <dd>
;;    <p>Append a <code>Comment</code> node to the <code>Document</code>
;;    object with the <code title="">data</code> attribute set to the
;;    data given in the comment token.</p>
;;   </dd>
;;
;;   <dt>A DOCTYPE token</dt>
;;   <dt>A character token that is one of U+0009 CHARACTER
;;   TABULATION, U+000A LINE FEED (LF), U+000C FORM FEED (FF),
;;   U+000D CARRIAGE RETURN (CR), or U+0020 SPACE</dt>
;;   <dt>A start tag whose tag name is "html"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in body">in body</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>An end-of-file token</dt>
;;   <dd>
;;    <p><span>Stop parsing</span>.</p>
;;   </dd>
;;
;;   <dt>A start tag whose tag name is "noframes"</dt>
;;   <dd>
;;    <p>Process the token <span>using the rules for</span> the "<span
;;    title="insertion mode: in head">in head</span>" <span>insertion
;;    mode</span>.</p>
;;   </dd>
;;
;;   <dt>Anything else</dt>
;;   <dd>
;;    <p><span>Parse error</span>. Ignore the token.</p>
;;   </dd>
;;
;;  </dl>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The end</h4>
;;
;;  <p>Once the user agent <dfn title="stop parsing">stops parsing</dfn>
;;  the document, the user agent must run the following steps:</p>
;;
;;  <ol>
;;
;;   <!-- this happens as part of one of the tasks that runs the parser -->
;;
;;   <li><p>Set the <span>current document readiness</span> to
;;   "interactive" <!-- this also synchronously fires an event --> and
;;   the <span>insertion point</span> to undefined.</p></li>
;;
;;   <li><p>Pop <em>all</em> the nodes off the <span>stack of open
;;   elements</span>.</p></li>
;;
;;   <li><p>If the <span>list of scripts that will execute when the
;;   document has finished parsing</span> is not empty, run these
;;   substeps:</p>
;;
;;    <ol>
;;
;;     <li><p><span>Spin the event loop</span> until the first
;;     <code>script</code> in the <span>list of scripts that will
;;     execute when the document has finished parsing</span> has its
;;     <span>"ready to be parser-executed"</span> flag set <em>and</em> there
;;     is no <span title="a style sheet blocking scripts">style sheet
;;     blocking scripts</span>.</p></li>
;;
;;     <li><p><span title="executing a script block">Execute</span> the
;;     first <code>script</code> in the <span>list of scripts that will
;;     execute when the document has finished parsing</span>.</p></li>
;;
;;     <li><p>Remove the first <code>script</code> element from the
;;     <span>list of scripts that will execute when the document has
;;     finished parsing</span> (i.e. shift out the first entry in the
;;     list).</p></li>
;;
;;     <li><p>If the <span>list of scripts that will execute when the
;;     document has finished parsing</span> is still not empty, repeat
;;     these substeps again from substep 1.</p>
;;
;;    </ol>
;;
;;   </li>
;;
;;   <li><p><span>Queue a task</span> to <span>fire a simple
;;   event</span> that bubbles named <code
;;   title="event-DOMContentLoaded">DOMContentLoaded</code> at the
;;   <code>Document</code>.</p></li>
;;
;;   <li><p><span>Spin the event loop</span> until the <span>set of
;;   scripts that will execute as soon as possible</span> is
;;   empty.</p></li> <!-- this step is redundant with the next one,
;;   really, since all those scripts also delay the load event. It's
;;   here in case we add an event between this step and the next or if
;;   we move the previous step (DOMContentLoaded) down again. -->
;;
;;   <li><p><span>Spin the event loop</span> until there is nothing that
;;   <dfn title="delay the load event">delays the load event</dfn> in
;;   the <code>Document</code>.</p></li>
;;
;;   <li><p><span>Queue a task</span> to set the <span>current document
;;   readiness</span> to "complete". <!-- this also fires an event
;;   synchronously during the task --></p></li>
;;
;;   <li><p>If the <code>Document</code> is in a <span>browsing
;;   context</span>, then <span>queue a task</span> to <span>fire a
;;   simple event</span> named <code title="event-load">load</code> at
;;   the <code>Document</code>'s <code>Window</code> object, but with
;;   its <code title="dom-event-target">target</code> set to the
;;   <code>Document</code> object (and the <code
;;   title="dom-event-currentTarget">currentTarget</code> set to the
;;   <code>Window</code> object).</p></li>
;;
;;   <li><p>If the <code>Document</code> is in a <span>browsing
;;   context</span>, then <span>queue a task</span> to fire a <code
;;   title="event-pageshow">pageshow</code> event at the
;;   <code>Window</code> object of the <code>Document</code>, but with
;;   its <code title="dom-event-target">target</code> set to the
;;   <code>Document</code> object (and the <code
;;   title="dom-event-currentTarget">currentTarget</code> set to the
;;   <code>Window</code> object), using the
;;   <code>PageTransitionEvent</code> interface, with the <code
;;   title="dom-PageTransitionEvent-persisted">persisted</code>
;;   attribute set to false. This event must not bubble, must not be
;;   cancelable, and has no default action.</p></li>
;;
;;   <li><p>If the <code>Document</code> has a <span>pending state
;;   object</span>, then <span>queue a task</span> to fire a <code
;;   title="event-popstate">popstate</code> event at the
;;   <code>Document</code>'s <code>Window</code> object using the
;;   <code>PopStateEvent</code> interface, with the <code
;;   title="dom-PopStateEvent-state">state</code> attribute set to the
;;   current value of the <span>pending state object</span>. This event
;;   must bubble but not be cancelable and has no default
;;   action.</p></li>
;;
;;   <li><p>If the <code>Document</code> has any <span>pending
;;   application cache download process tasks</span>, then <span
;;   title="queue a task">queue</span> each such <span
;;   title="concept-task">task</span> in the order they were added to
;;   the list of <span>pending application cache download process
;;   tasks</span>, and then empty the list of <span>pending application
;;   cache download process tasks</span>. The <span>task source</span>
;;   for these <span title="concept-task">tasks</span> is the
;;   <span>networking task source</span>.</p></li>
;;
;;   <li><p>The <code>Document</code> is now <dfn>completely
;;   loaded</dfn>.</p></li>
;;
;;  </ol>
;;
;;  <p>When the user agent is to <dfn>abort an HTML parser</dfn>, it
;;  must run the following steps:</p>
;;
;;  <ol>
;;
;;   <li><p>Throw away any pending content in the <span>input
;;   stream</span>, and discard any future content that would have been
;;   added to it.</p></li>
;;
;;   <li><p>Pop <em>all</em> the nodes off the <span>stack of open
;;   elements</span>.</p></li>
;;
;;   <!-- anything else? this is things that happen when you call
;;   document.open() on a document that's still being parsed. Should the
;;   pending scripts be blown away or anything? -->
;;
;;  </ol>
;;
;;  <p>Except where otherwise specified, the <span>task source</span>
;;  for the <span title="concept-task">tasks</span> mentioned in this
;;  section is the <span>DOM manipulation task source</span>.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Coercing an HTML DOM into an infoset</h4>
;;
;;  <p>When an application uses an <span>HTML parser</span> in
;;  conjunction with an XML pipeline, it is possible that the
;;  constructed DOM is not compatible with the XML tool chain in certain
;;  subtle ways. For example, an XML toolchain might not be able to
;;  represent attributes with the name <code title="">xmlns</code>,
;;  since they conflict with the Namespaces in XML syntax. There is also
;;  some data that the <span>HTML parser</span> generates that isn't
;;  included in the DOM itself. This section specifies some rules for
;;  handling these issues.</p>
;;
;;  <p>If the XML API being used doesn't support DOCTYPEs, the tool may
;;  drop DOCTYPEs altogether.</p>
;;
;;  <p>If the XML API doesn't support attributes in no namespace that
;;  are named "<code title="">xmlns</code>", attributes whose names
;;  start with "<code title="">xmlns:</code>", or attributes in the
;;  <span>XMLNS namespace</span>, then the tool may drop such
;;  attributes.</p>
;;
;;  <p>The tool may annotate the output with any namespace declarations
;;  required for proper operation.</p>
;;
;;  <p>If the XML API being used restricts the allowable characters in
;;  the local names of elements and attributes, then the tool may map
;;  all element and attribute local names that the API wouldn't support
;;  to a set of names that <em>are</em> allowed, by replacing any
;;  character that isn't supported with the uppercase letter U and the
;;  six digits of the character's Unicode code point when expressed in
;;  hexadecimal, using digits 0-9 and capital letters A-F as the
;;  symbols, in increasing numeric order.</p>
;;
;;  <p class="example">For example, the element name <code
;;  title="">foo&lt;bar</code>, which can be output by the <span>HTML
;;  parser</span>, though it is neither a legal HTML element name nor a
;;  well-formed XML element name, would be converted into <code
;;  title="">fooU00003Cbar</code>, which <em>is</em> a well-formed XML
;;  element name (though it's still not legal in HTML by any means).</p>
;;
;;  <p class="example">As another example, consider the attribute
;;  <code>xlink:href</code>. Used on a MathML element, it becomes, after
;;  being <span title="adjust foreign attributes">adjusted</span>, an
;;  attribute with a prefix "<code title="">xlink</code>" and a local
;;  name "<code title="">href</code>". However, used on an HTML element,
;;  it becomes an attribute with no prefix and the local name "<code
;;  title="">xlink:href</code>", which is not a valid NCName, and thus
;;  might not be accepted by an XML API. It could thus get converted,
;;  becoming "<code title="">xlinkU00003Ahref</code>".</p>
;;
;;  <p class="note">The resulting names from this conversion
;;  conveniently can't clash with any attribute generated by the
;;  <span>HTML parser</span>, since those are all either lowercase or
;;  those listed in the <span>adjust foreign attributes</span>
;;  algorithm's table.</p>
;;
;;  <p>If the XML API restricts comments from having two consecutive
;;  U+002D HYPHEN-MINUS characters (--), the tool may insert a single
;;  U+0020 SPACE character between any such offending characters.</p>
;;
;;  <p>If the XML API restricts comments from ending in a
;;  U+002D HYPHEN-MINUS character (-), the tool may insert a single
;;  U+0020 SPACE character at the end of such comments.</p>
;;
;;  <p>If the XML API restricts allowed characters in character data,
;;  attribute values, or comments, the tool may replace any U+000C FORM
;;  FEED (FF) character with a U+0020 SPACE character, and any other
;;  literal non-XML character with a U+FFFD REPLACEMENT CHARACTER.</p>
;;
;;  <p>If the tool has no way to convey out-of-band information, then
;;  the tool may drop the following information:</p>
;;
;;  <ul>
;;
;;   <li>Whether the document is set to <i>no-quirks mode</i>,
;;   <i>limited-quirks mode</i>, or <i>quirks mode</i></li>
;;
;;   <li>The association between form controls and forms that aren't
;;   their nearest <code>form</code> element ancestor (use of the
;;   <span><code>form</code> element pointer</span> in the parser)</li>
;;
;;  </ul>
;;
;;  <p class="note">The mutations allowed by this section apply
;;  <em>after</em> the <span>HTML parser</span>'s rules have been
;;  applied. For example, a <code title="">&lt;a::></code> start tag
;;  will be closed by a <code title="">&lt;/a::></code> end tag, and
;;  never by a <code title="">&lt;/aU00003AU00003A></code> end tag, even
;;  if the user agent is using the rules above to then generate an
;;  actual element in the DOM with the name <code
;;  title="">aU00003AU00003A</code> for that start tag.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>An introduction to error handling and strange cases in the parser</h4>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <p>This section examines some erroneous markup and discusses how
;;  the <span>HTML parser</span> handles these cases.</p>
;;
;;
;;  <h5>Misnested tags: &lt;b>&lt;i>&lt;/b>&lt;/i></h5>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <p>The most-often discussed example of erroneous markup is as
;;  follows:</p>
;;
;;  <pre>&lt;p>1&lt;b>2&lt;i>3&lt;/b>4&lt;/i>5&lt;/p></pre>
;;
;;  <p>The parsing of this markup is straightforward up to the "3". At
;;  this point, the DOM looks like this:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <span title="">1</span></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">2</span></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <span title="">3</span></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>
;;
;;  <p>Here, the <span>stack of open elements</span> has five elements
;;  on it: <code>html</code>, <code>body</code>, <code>p</code>,
;;  <code>b</code>, and <code>i</code>. The <span>list of active
;;  formatting elements</span> just has two: <code>b</code> and
;;  <code>i</code>. The <span>insertion mode</span> is "<span
;;  title="insertion mode: in body">in body</span>".</p>
;;
;;  <p>Upon receiving the end tag token with the tag name "b", the "<a
;;  href="#adoptionAgency">adoption agency algorithm</a>" is
;;  invoked. This is a simple case, in that the <var title="">formatting
;;  element</var> is the <code>b</code> element, and there is no
;;  <var title="">furthest block</var>. Thus, the <span>stack of open
;;  elements</span> ends up with just three elements: <code>html</code>,
;;  <code>body</code>, and <code>p</code>, while the <span>list of
;;  active formatting elements</span> has just one: <code>i</code>. The
;;  DOM tree is unmodified at this point.</p>
;;
;;  <p>The next token is a character ("4"), triggers the <span
;;  title="reconstruct the active formatting elements">reconstruction of
;;  the active formatting elements</span>, in this case just the
;;  <code>i</code> element. A new <code>i</code> element is thus created
;;  for the "4" text node. After the end tag token for the "i" is also
;;  received, and the "5" text node is inserted, the DOM looks as
;;  follows:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <span title="">1</span></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">2</span></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <span title="">3</span></li></ul></li></ul></li><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <span title="">4</span></li></ul></li><li class="t3"><code>#text</code>: <span title="">5</span></li></ul></li></ul></li></ul></li></ul>
;;
;;
;;  <h5>Misnested tags: &lt;b>&lt;p>&lt;/b>&lt;/p></h5>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <p>A case similar to the previous one is the following:</p>
;;
;;  <pre>&lt;b>1&lt;p>2&lt;/b>3&lt;/p></pre>
;;
;;  <p>Up to the "2" the parsing here is straightforward:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">1</span></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <span title="">2</span></li></ul></li></ul></li></ul></li></ul></li></ul>
;;
;;  <p>The interesting part is when the end tag token with the tag name
;;  "b" is parsed.</p>
;;
;;  <p>Before that token is seen, the <span>stack of open
;;  elements</span> has four elements on it: <code>html</code>,
;;  <code>body</code>, <code>b</code>, and <code>p</code>. The
;;  <span>list of active formatting elements</span> just has the one:
;;  <code>b</code>. The <span>insertion mode</span> is "<span
;;  title="insertion mode: in body">in body</span>".</p>
;;
;;  <p>Upon receiving the end tag token with the tag name "b", the "<a
;;  href="#adoptionAgency">adoption agency algorithm</a>" is invoked, as
;;  in the previous example. However, in this case, there <em>is</em> a
;;  <var title="">furthest block</var>, namely the <code>p</code> element. Thus,
;;  this time the adoption agency algorithm isn't skipped over.</p>
;;
;;  <p>The <var title="">common ancestor</var> is the <code>body</code>
;;  element. A conceptual "bookmark" marks the position of the
;;  <code>b</code> in the <span>list of active formatting
;;  elements</span>, but since that list has only one element in it,
;;  it won't have much effect.</p>
;;
;;  <p>As the algorithm progresses, <var title="">node</var> ends up set
;;  to the formatting element (<code>b</code>), and <var title="">last
;;  node</var> ends up set to the <var title="">furthest block</var>
;;  (<code>p</code>).</p>
;;
;;  <p>The <var title="">last node</var> gets appended (moved) to the
;;  <var title="">common ancestor</var>, so that the DOM looks like:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">1</span></li></ul></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <span title="">2</span></li></ul></li></ul></li></ul></li></ul>
;;
;;  <p>A new <code>b</code> element is created, and the children of the
;;  <code>p</code> element are moved to it:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">1</span></li></ul></li><li class="t1"><code>p</code></li></ul></li></ul></li></ul>
;;  <ul class="domTree"><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">2</span></li></ul></li></ul>
;;
;;  <p>Finally, the new <code>b</code> element is appended to the
;;  <code>p</code> element, so that the DOM looks like:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">1</span></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">2</span></li></ul></li></ul></li></ul></li></ul></li></ul>
;;
;;  <p>The <code>b</code> element is removed from the <span>list of
;;  active formatting elements</span> and the <span>stack of open
;;  elements</span>, so that when the "3" is parsed, it is appended to
;;  the <code>p</code> element:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">1</span></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">2</span></li></ul></li><li class="t3"><code>#text</code>: <span title="">3</span></li></ul></li></ul></li></ul></li></ul>
;;
;;
;;  <h5>Unexpected markup in tables</h5>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <p>Error handling in tables is, for historical reasons, especially
;;  strange. For example, consider the following markup:</p>
;;
;;  <pre>&lt;table><strong>&lt;b></strong>&lt;tr>&lt;td>aaa&lt;/td>&lt;/tr><strong>bbb</strong>&lt;/table>ccc</pre>
;;
;;  <p>The highlighted <code>b</code> element start tag is not allowed
;;  directly inside a table like that, and the parser handles this case
;;  by placing the element <em>before</em> the table. (This is called <i
;;  title="foster parent">foster parenting</i>.) This can be seen by
;;  examining the DOM tree as it stands just after the
;;  <code>table</code> element's start tag has been seen:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>table</code></li></ul></li></ul></li></ul>
;;
;;  <p>...and then immediately after the <code>b</code> element start
;;  tag has been seen:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code></li></ul></li></ul></li></ul>
;;
;;  <p>At this point, the <span>stack of open elements</span> has on it
;;  the elements <code>html</code>, <code>body</code>,
;;  <code>table</code>, and <code>b</code> (in that order, despite the
;;  resulting DOM tree); the <span>list of active formatting
;;  elements</span> just has the <code>b</code> element in it; and the
;;  <span>insertion mode</span> is "<span title="insertion mode: in
;;  table">in table</span>".</p>
;;
;;  <p>The <code>tr</code> start tag causes the <code>b</code> element
;;  to be popped off the stack and a <code>tbody</code> start tag to be
;;  implied; the <code>tbody</code> and <code>tr</code> elements are
;;  then handled in a rather straight-forward manner, taking the parser
;;  through the "<span title="insertion mode: in table body">in table
;;  body</span>" and "<span title="insertion mode: in row">in
;;  row</span>" insertion modes, after which the DOM looks as
;;  follows:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code></li></ul></li></ul></li></ul></li></ul></li></ul>
;;
;;  <p>Here, the <span>stack of open elements</span> has on it the
;;  elements <code>html</code>, <code>body</code>, <code>table</code>,
;;  <code>tbody</code>, and <code>tr</code>; the <span>list of active
;;  formatting elements</span> still has the <code>b</code> element in
;;  it; and the <span>insertion mode</span> is "<span title="insertion
;;  mode: in row">in row</span>".</p>
;;
;;  <p>The <code>td</code> element start tag token, after putting a
;;  <code>td</code> element on the tree, puts a marker on the <span>list
;;  of active formatting elements</span> (it also switches to the "<span
;;  title="insertion mode: in cell">in cell</span>" <span>insertion
;;  mode</span>).</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>
;;
;;  <p>The marker means that when the "aaa" character tokens are seen,
;;  no <code>b</code> element is created to hold the resulting text
;;  node:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <span title="">aaa</span></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>
;;
;;  <p>The end tags are handled in a straight-forward manner; after
;;  handling them, the <span>stack of open elements</span> has on it the
;;  elements <code>html</code>, <code>body</code>, <code>table</code>,
;;  and <code>tbody</code>; the <span>list of active formatting
;;  elements</span> still has the <code>b</code> element in it (the
;;  marker having been removed by the "td" end tag token); and the
;;  <span>insertion mode</span> is "<span title="insertion mode: in
;;  table body">in table body</span>".</p>
;;
;;  <p>Thus it is that the "bbb" character tokens are found. These
;;  trigger the "<span title="insertion mode: in table text">in table
;;  text</span>" insertion mode to be used (with the <span>original
;;  insertion mode</span> set to "<span title="insertion mode: in table
;;  body">in table body</span>"). The character tokens are collected,
;;  and when the next token (the <code>table</code> element end tag) is
;;  seen, they are processed as a group. Since they are not all spaces,
;;  they are handled as per the "anything else" rules in the "<span
;;  title="insertion mode: in table">in table</span>" insertion mode,
;;  which defer to the "<span title="insertion mode: in body">in
;;  body</span>" insertion mode but with <span title="foster
;;  parent">foster parenting</span>.</p>
;;
;;  <p>When <span title="reconstruct the active formatting elements">the
;;  active formatting elements are reconstructed</span>, a
;;  <code>b</code> element is created and <span title="foster
;;  parent">foster parented</span>, and then the "bbb" text node is
;;  appended to it:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">bbb</span></li></ul></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <span title="">aaa</span></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>
;;
;;  <p>The <span>stack of open elements</span> has on it the elements
;;  <code>html</code>, <code>body</code>, <code>table</code>,
;;  <code>tbody</code>, and the new <code>b</code> (again, note that
;;  this doesn't match the resulting tree!); the <span>list of active
;;  formatting elements</span> has the new <code>b</code> element in it;
;;  and the <span>insertion mode</span> is still "<span title="insertion
;;  mode: in table body">in table body</span>".</p>
;;
;;  <p>Had the character tokens been only <span title="space
;;  character">space characters</span> instead of "bbb", then those
;;  <span title="space character">space characters</span> would just be
;;  appended to the <code>tbody</code> element.</p>
;;
;;  <p>Finally, the <code>table</code> is closed by a "table" end
;;  tag. This pops all the nodes from the <span>stack of open
;;  elements</span> up to and including the <code>table</code> element,
;;  but it doesn't affect the <span>list of active formatting
;;  elements</span>, so the "ccc" character tokens after the table
;;  result in yet another <code>b</code> element being created, this
;;  time after the table:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>b</code></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">bbb</span></li></ul></li><li class="t1"><code>table</code><ul><li class="t1"><code>tbody</code><ul><li class="t1"><code>tr</code><ul><li class="t1"><code>td</code><ul><li class="t3"><code>#text</code>: <span title="">aaa</span></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>b</code><ul><li class="t3"><code>#text</code>: <span title="">ccc</span></li></ul></li></ul></li></ul></li></ul>
;;
;;
;;  <h5>Scripts that modify the page as it is being parsed</h5>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <p>Consider the following markup, which for this example we will
;;  assume is the document with <span>URL</span> <code
;;  title="">http://example.com/inner</code>, being rendered as the
;;  content of an <code>iframe</code> in another document with the
;;  <span>URL</span> <code title="">http://example.com/outer</code>:</p>
;;
;;  <pre>&lt;div id=a>
;; &lt;script>
;;  var div = document.getElementById('a');
;;  parent.document.body.appendChild(div);
;; &lt;/script>
;; &lt;script>
;;  alert(document.URL);
;; &lt;/script>
;;&lt;/div>
;;&lt;script>
;; alert(document.URL);
;;&lt;/script></pre>
;;
;;  <p>Up to the first "script" end tag, before the script is parsed,
;;  the result is relatively straightforward:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>div</code> <span title="" class="t2"><code class="attribute name">id</code>="<code class="attribute value">a</code>"</span><ul><li class="t3"><code>#text</code>: <span title="">
;; </span></li><li class="t1"><code>script</code><ul><li class="t3"><code>#text</code>: <span title="">var div = document.getElementById('a'); &#x23CE; parent.document.body.appendChild(div);</span></li></ul></li></ul></li></ul></li></ul></li></ul>
;;
;;  <p>After the script is parsed, though, the <code>div</code> element
;;  and its child <code>script</code> element are gone:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code></li></ul></li></ul>
;;
;;  <p>They are, at this point, in the <code>Document</code> of the
;;  aforementioned outer <span>browsing context</span>. However, the
;;  <span>stack of open elements</span> <em>still contains the
;;  <code>div</code> element</em>.</p>
;;
;;  <p>Thus, when the second <code>script</code> element is parsed, it
;;  is inserted <em>into the outer <code>Document</code>
;;  object</em>.</p>
;;
;;  <p>This also means that the <span>script's global object</span> is
;;  the outer <span>browsing context</span>'s <code>Window</code>
;;  object, <em>not</em> the <code>Window</code> object inside the
;;  <code>iframe</code>.</p>
;;
;;  <p class="note">This isn't a security problem since the script that
;;  moves the <code>div</code> into the outer <code>Document</code> can
;;  only do so because the two <code>Document</code> object have the
;;  same <span>origin</span>.</p>
;;
;;  <p>Thus, the first alert says "http://example.com/outer".</p>
;;
;;  <p>Once the <code>div</code> element's end tag is parsed, the
;;  <code>div</code> element is popped off the stack, and so the next
;;  <code>script</code> element is in the inner <code>Document</code>:</p>
;;
;;  <ul class="domTree"><li class="t1"><code>html</code><ul><li class="t1"><code>head</code></li><li class="t1"><code>body</code><ul><li class="t1"><code>script</code><ul><li class="t3"><code>#text</code>: <span title="">alert(document.URL);</span></li></ul></li></ul></li></ul></li></ul>
;;
;;  <p>This second alert will say "http://example.com/inner".</p>
;;
;;
;;
;;
;;  <h3>Serializing HTML fragments</h3>
;;
;;  <p>The following steps form the <dfn>HTML fragment serialization
;;  algorithm</dfn>. The algorithm takes as input a DOM
;;  <code>Element</code>, <code>Document</code>, or
;;  <code>DocumentFragment</code> referred to as <var title="">the
;;  node</var>, and either returns a string or raises an exception.</p>
;;
;;  <p class="note">This algorithm serializes the <em>children</em> of
;;  the node being serialized, not the node itself.</p>
;;
;;  <ol>
;;
;;   <li><p>Let <var title="">s</var> be a string, and initialize it to
;;   the empty string.</p></li>
;;
;;   <li>
;;
;;    <p>For each child node of <var title="">the node</var>, in
;;    <span>tree order</span>, run the following steps:
;;
;;    <ol>
;;
;;     <li><p>Let <var title="">current node</var> be the child node
;;     being processed.</p></li>
;;
;;     <li>
;;
;;      <p>Append the appropriate string from the following list to
;;      <var title="">s</var>:</p>
;;
;;      <dl class="switch">
;;
;;       <dt>If <var title="">current node</var> is an <code title="">Element</code></dt>
;;
;;       <dd>
;;
;;        <p>Append a U+003C LESS-THAN SIGN character (&lt;),
;;        followed by the element's tag name. (For nodes created by the
;;        <span>HTML parser</span> or <code
;;        title="">Document.createElement()</code>, the tag name will be
;;        lowercase.)</p>
;;
;;        <p>For each attribute that the element has, append a U+0020
;;        SPACE character, the attribute's name (which, for attributes
;;        set by the <span>HTML parser</span> or by <code
;;        title="">Element.setAttributeNode()</code> or <code
;;        title="">Element.setAttribute()</code>, will be lowercase), a
;;        U+003D EQUALS SIGN character (=), a U+0022 QUOTATION MARK
;;        character (&quot;), the attribute's value, <span
;;        title="escaping a string">escaped as described below</span> in
;;        <i>attribute mode</i>, and a second U+0022 QUOTATION MARK
;;        character (&quot;).</p>
;;
;;        <p>While the exact order of attributes is UA-defined, and may
;;        depend on factors such as the order that the attributes were
;;        given in the original markup, the sort order must be stable,
;;        such that consecutive invocations of this algorithm serialize an
;;        element's attributes in the same order.</p>
;;
;;        <p>Append a U+003E GREATER-THAN SIGN character (&gt;).</p>
;;
;;        <p>If <var title="">current node</var> is an
;;        <code>area</code>, <code>base</code>, <code>basefont</code>,
;;        <code>bgsound</code>, <code>br</code>, <code>col</code>,
;;        <code>embed</code>, <code>frame</code>, <code>hr</code>,
;;        <code>img</code>, <code>input</code>, <code>keygen</code>,
;;        <code>link</code>, <code>meta</code>, <code>param</code>, or
;;        <code>wbr</code> element, then continue on to the next child
;;        node at this point.</p> <!-- also, i guess: image and isindex,
;;        but we don't list those because we don't consider those
;;        "elements", more "macros", and thus we should never serialize
;;        them -->
;;
;;        <p>If <var title="">current node</var> is a <code>pre</code>,
;;        <code>textarea</code>, or <code>listing</code> element, append
;;        a U+000A LINE FEED (LF) character.</p>
;;
;;        <p>Append the value of running the <span>HTML fragment
;;        serialization algorithm</span> on the <var title="">current
;;        node</var> element (thus recursing into this algorithm for
;;        that element), followed by a U+003C LESS-THAN SIGN character
;;        (&lt;), a U+002F SOLIDUS character (/), the element's tag name
;;        again, and finally a U+003E GREATER-THAN SIGN character
;;        (&gt;).</p>
;;
;;       </dd>
;;
;;
;;       <dt>If <var title="">current node</var> is a <code
;;       title="">Text</code> or <code title="">CDATASection</code>
;;       node</dt>
;;
;;       <dd>
;;
;;        <p>If the parent of <var title="">current node</var> is a
;;        <code>style</code>, <code>script</code>, <code>xmp</code>,
;;        <code>iframe</code>, <code>noembed</code>,
;;        <code>noframes</code>, or <code>plaintext</code> element, or
;;        if the parent of <var title="">current node</var> is
;;        <code>noscript</code> element and <span
;;        title="concept-n-script">scripting is enabled</span> for the
;;        node, then append the value of <var title="">current
;;        node</var>'s <code title="">data</code> IDL attribute
;;        literally.</p>
;;
;;        <p>Otherwise, append the value of <var title="">current
;;        node</var>'s <code title="">data</code> IDL attribute, <span
;;        title="escaping a string">escaped as described
;;        below</span>.</p>
;;
;;       </dd>
;;
;;
;;       <dt>If <var title="">current node</var> is a <code
;;       title="">Comment</code></dt>
;;
;;       <dd>
;;
;;        <p>Append the literal string <code>&lt;!--</code> (U+003C
;;        LESS-THAN SIGN, U+0021 EXCLAMATION MARK, U+002D HYPHEN-MINUS,
;;        U+002D HYPHEN-MINUS), followed by the value of <var
;;        title="">current node</var>'s <code title="">data</code> IDL
;;        attribute, followed by the literal string <code>--&gt;</code>
;;        (U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS, U+003E GREATER-THAN
;;        SIGN).</p>
;;
;;       </dd>
;;
;;
;;       <dt>If <var title="">current node</var> is a <code
;;       title="">ProcessingInstruction</code></dt>
;;
;;       <dd>
;;
;;        <p>Append the literal string <code>&lt;?</code> (U+003C
;;        LESS-THAN SIGN, U+003F QUESTION MARK), followed by the value
;;        of <var title="">current node</var>'s <code
;;        title="">target</code> IDL attribute, followed by a single
;;        U+0020 SPACE character, followed by the value of <var
;;        title="">current node</var>'s <code title="">data</code> IDL
;;        attribute, followed by a single U+003E GREATER-THAN SIGN
;;        character (>).</p>
;;
;;       </dd>
;;
;;
;;       <dt>If <var title="">current node</var> is a <code title="">DocumentType</code></dt>
;;
;;       <dd>
;;
;;        <p>Append the literal string <code>&lt;!DOCTYPE</code> (U+003C
;;        LESS-THAN SIGN, U+0021 EXCLAMATION MARK, U+0044 LATIN CAPITAL
;;        LETTER D, U+004F LATIN CAPITAL LETTER O, U+0043 LATIN CAPITAL
;;        LETTER C, U+0054 LATIN CAPITAL LETTER T, U+0059 LATIN CAPITAL
;;        LETTER Y, U+0050 LATIN CAPITAL LETTER P, U+0045 LATIN CAPITAL
;;        LETTER E), followed by a space (U+0020 SPACE), followed by the
;;        value of <var title="">current node</var>'s <code
;;        title="">name</code> IDL attribute, followed by the literal
;;        string <code>&gt;</code> (U+003E GREATER-THAN SIGN).</p>
;;
;;       </dd>
;;
;;
;;      </dl>
;;
;;      <p>Other node types (e.g. <code title="">Attr</code>) cannot
;;      occur as children of elements. If, despite this, they somehow do
;;      occur, this algorithm must raise an
;;      <code>INVALID_STATE_ERR</code> exception.</p>
;;
;;     </li>
;;
;;    </ol>
;;
;;   </li>
;;
;;   <li><p>The result of the algorithm is the string <var
;;   title="">s</var>.</p></li>
;;
;;  </ol>
;;
;;  <p><dfn id="escapingString">Escaping a string</dfn> (for the
;;  purposes of the algorithm above) consists of replacing any
;;  occurrences of the "<code title="">&amp;</code>" character by the
;;  string "<code title="">&amp;amp;</code>", any occurrences of the
;;  U+00A0 NO-BREAK SPACE character by the string "<code
;;  title="">&amp;nbsp;</code>", and, if the algorithm was invoked in
;;  the <i>attribute mode</i>, any occurrences of the "<code
;;  title="">&quot;</code>" character by the string "<code
;;  title="">&amp;quot;</code>", or if it was not, any occurrences of
;;  the "<code title="">&lt;</code>" character by the string "<code
;;  title="">&amp;lt;</code>", any occurrences of the "<code
;;  title="">&gt;</code>" character by the string "<code
;;  title="">&amp;gt;</code>".</p>
;;
;;  <p class="note">Entity reference nodes are <a
;;  href="#entity-references">assumed to be expanded</a> by the user
;;  agent, and are therefore not covered in the algorithm above.</p>
;;
;;  <p class="note">It is possible that the output of this algorithm, if
;;  parsed with an <span>HTML parser</span>, will not return the
;;  original tree structure. For instance, if a <code>textarea</code>
;;  element to which a <code title="">Comment</code> node has been
;;  appended is serialized and the output is then reparsed, the comment
;;  will end up being displayed in the text field. Similarly, if, as a
;;  result of DOM manipulation, an element contains a comment that
;;  contains the literal string "<code title="">--&gt;</code>", then
;;  when the result of serializing the element is parsed, the comment
;;  will be truncated at that point and the rest of the comment will be
;;  interpreted as markup. More examples would be making a
;;  <code>script</code> element contain a text node with the text string
;;  "<code>&lt;/script></code>", or having a <code>p</code> element that
;;  contains a <code>ul</code> element (as the <code>ul</code> element's
;;  <span title="syntax-start-tag">start tag</span> would imply the end
;;  tag for the <code>p</code>).</p>
;;
;;
;;  <h3>Parsing HTML fragments</h3>
;;
;;  <p>The following steps form the <dfn>HTML fragment parsing
;;  algorithm</dfn>. The algorithm optionally takes as input an
;;  <code>Element</code> node, referred to as the <var
;;  title="">context</var> element, which gives the context for the
;;  parser, as well as <var title="">input</var>, a string to parse, and
;;  returns a list of zero or more nodes.</p>
;;
;;  <p class="note">Parts marked <dfn>fragment case</dfn> in algorithms
;;  in the parser section are parts that only occur if the parser was
;;  created for the purposes of this algorithm (and with a <var
;;  title="">context</var> element). The algorithms have been annotated
;;  with such markings for informational purposes only; such markings
;;  have no normative weight. If it is possible for a condition
;;  described as a <span>fragment case</span> to occur even when the
;;  parser wasn't created for the purposes of handling this algorithm,
;;  then that is an error in the specification.</p>
;;
;;  <ol>
;;
;;   <li>
;;
;;    <p>Create a new <code>Document</code> node, and mark it as being
;;    an <span title="HTML documents">HTML document</span>.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If there is a <var title="">context</var> element, and the
;;    <code>Document</code> of the <var title="">context</var> element
;;    is in <span>quirks mode</span>, then let the <code>Document</code>
;;    be in <span>quirks mode</span>. Otherwise, if there is a <var
;;    title="">context</var> element, and the <code>Document</code> of
;;    the <var title="">context</var> element is in <span>limited-quirks
;;    mode</span>, then let the <code>Document</code> be in
;;    <span>limited-quirks mode</span>. Otherwise, leave the
;;    <code>Document</code> in <span>no-quirks mode</span>.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>Create a new <span>HTML parser</span>, and associate it with
;;    the just created <code>Document</code> node.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If there is a <var title="">context</var> element, run these
;;    substeps:</p>
;;
;;    <ol>
;;
;;     <li>
;;
;;      <p>Set the state of the <span>HTML parser</span>'s
;;      <span>tokenization</span> stage as follows:</p>
;;
;;      <dl class="switch">
;;
;;       <dt>If it is a <code>title</code> or <code>textarea</code>
;;       element</dt>
;;
;;       <dd>Switch the tokenizer to the <span>RCDATA state</span>.</dd>
;;
;;
;;       <dt>If it is a <code>style</code>, <code>xmp</code>,
;;       <code>iframe</code>, <code>noembed</code>, or
;;       <code>noframes</code> element</dt>
;;
;;       <dd>Switch the tokenizer to the <span>RAWTEXT state</span>.</dd>
;;
;;
;;       <dt>If it is a <code>script</code> element</dt>
;;
;;       <dd>Switch the tokenizer to the <span>script data state</span>.</dd>
;;
;;
;;       <dt>If it is a <code>noscript</code> element</dt>
;;
;;       <dd>If the <span>scripting flag</span> is enabled, switch the
;;       tokenizer to the <span>RAWTEXT state</span>.  Otherwise,
;;       leave the tokenizer in the <span>data state</span>.</dd>
;;
;;
;;       <dt>If it is a <code>plaintext</code> element</dt>
;;
;;       <dd>Switch the tokenizer to the <span>PLAINTEXT
;;       state</span>.</dd>
;;
;;
;;       <dt>Otherwise</dt>
;;
;;       <dd>Leave the tokenizer in the <span>data state</span>.</dd>
;;
;;      </dl>
;;
;;      <p class="note">For performance reasons, an implementation that
;;      does not report errors and that uses the actual state machine
;;      described in this specification directly could use the PLAINTEXT
;;      state instead of the RAWTEXT and script data states where those
;;      are mentioned in the list above. Except for rules regarding
;;      parse errors, they are equivalent, since there is no
;;      <span>appropriate end tag token</span> in the fragment case, yet
;;      they involve far fewer state transitions.</p>
;;
;;     </li>
;;
;;     <li>
;;
;;      <p>Let <var title="">root</var> be a new <code>html</code> element
;;      with no attributes.</p>
;;
;;     </li>
;;
;;     <li>
;;
;;      <p>Append the element <var title="">root</var> to the
;;      <code>Document</code> node created above.</p>
;;
;;     </li>
;;
;;     <li>
;;
;;      <p>Set up the parser's <span>stack of open elements</span> so that
;;      it contains just the single element <var title="">root</var>.</p>
;;
;;     </li>
;;
;;     <li>
;;
;;      <p><span title="reset the insertion mode appropriately">Reset the
;;      parser's insertion mode appropriately</span>.</p>
;;
;;      <p class="note">The parser will reference the <var
;;      title="">context</var> element as part of that algorithm.</p>
;;
;;     </li>
;;
;;     <li>
;;
;;      <p>Set the parser's <span><code>form</code> element pointer</span>
;;      to the nearest node to the <var title="">context</var> element
;;      that is a <code>form</code> element (going straight up the
;;      ancestor chain, and including the element itself, if it is a
;;      <code>form</code> element), or, if there is no such
;;      <code>form</code> element, to null.</p>
;;
;;     </li>
;;
;;    </ol>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>Place into the <span>input stream</span> for the <span>HTML
;;    parser</span> just created the <var title="">input</var>. The
;;    encoding <span
;;    title="concept-encoding-confidence">confidence</span> is
;;    <i>irrelevant</i>.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>Start the parser and let it run until it has consumed all the
;;    characters just inserted into the input stream.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If there is a <var title="">context</var> element, return the
;;    child nodes of <var title="">root</var>, in <span>tree
;;    order</span>.</p>
;;
;;    <p>Otherwise, return the children of the <code>Document</code>
;;    object, in <span>tree order</span>.</p>
;;
;;   </li>
;;
;;  </ol>
;;
;;  </div>
;;
;;
;;
;;  <h3><dfn>Named character references</dfn></h3>
;;
;;  <p>This table lists the character reference names that are supported
;;  by HTML, and the code points to which they refer. It is referenced
;;  by the previous sections.</p>
;;
;;  <div id="named-character-references-table">
;;   <table>
;;    <thead>
;;     <tr> <th> Name </th> <th> Character </th> <th> Glyph </th> </tr>
;;    </thead>
;;<!--BOILERPLATE entities.inc-->
;;   </table>
;;  <!--
;;   If we want to add character references, Almorca suggests:
;;   > I would add &sub1; (character U+2081), &sub2;
;;   > (character U+2082) and &sub3; (character U+2083). They
;;   > would are the equivalent to &sup1;, &sup2;, and &sup3;.
;;   See also: http://www.w3.org/2003/entities/
;;  -->
;;  </div>
;;
;;  <p><i>The glyphs displayed above are non-normative. Refer to the
;;  Unicode specifications for formal definitions of the characters
;;  listed above.</i></p>
;;
;;
;;
;;  <h2><dfn id="xhtml">The XHTML syntax</dfn></h2>
;;
;;  <p class="note">This section only describes the rules for XML
;;  resources. Rules for <code>text/html</code> resources are discussed
;;  in the section above entitled "<span>The HTML syntax</span>".</p>
;;
;;
;;  <div class="impl">
;;
;;  <h3>Writing XHTML documents</h3>
;;
;;  </div>
;;
;;  <p>The syntax for using HTML with XML, whether in XHTML documents or
;;  embedded in other XML documents, is defined in the XML and
;;  Namespaces in XML specifications. <a href="#refsXML">[XML]</a> <a
;;  href="#refsXMLNS">[XMLNS]</a></p>
;;
;;  <p>This specification does not define any syntax-level requirements
;;  beyond those defined for XML proper.</p>
;;
;;  <p>XML documents may contain a <code>DOCTYPE</code> if desired, but
;;  this is not required to conform to this specification. This
;;  specification does not define a public or system identifier, nor
;;  provide a format DTD.</p>
;;
;;  <p class="note">According to the XML specification, XML processors
;;  are not guaranteed to process the external DTD subset referenced in
;;  the DOCTYPE. This means, for example, that using entity references
;;  for characters in XHTML documents is unsafe if they are defined in
;;  an external file (except for <code title="">&amp;lt;</code>, <code
;;  title="">&amp;gt;</code>, <code title="">&amp;amp;</code>, <code
;;  title="">&amp;quot;</code> and <code
;;  title="">&amp;apos;</code>).</p>
;;
;;
;;  <div class="impl">
;;
;;  <h3>Parsing XHTML documents</h3>
;;
;;  <p>This section describes the relationship between XML and the DOM,
;;  with a particular emphasis on how this interacts with HTML.</p>
;;
;;  <p>An <dfn>XML parser</dfn>, for the purposes of this specification,
;;  is a construct that follows the rules given in the XML specification
;;  to map a string of bytes or characters into a <code>Document</code>
;;  object.</p>
;;
;;  <p>An <span>XML parser</span> is either associated with a
;;  <code>Document</code> object when it is created, or creates one
;;  implicitly.</p>
;;
;;  <p>This <code>Document</code> must then be populated with DOM nodes
;;  that represent the tree structure of the input passed to the parser,
;;  as defined by the XML specification, the Namespaces in XML
;;  specification, and the DOM Core specification. DOM mutation events
;;  must not fire for the operations that the <span>XML parser</span>
;;  performs on the <code>Document</code>'s tree, but the user agent
;;  must act as if elements and attributes were individually appended
;;  and set respectively so as to trigger rules in this specification
;;  regarding what happens when an element is inserted into a document
;;  or has its attributes set. <a href="#refsXML">[XML]</a> <a
;;  href="#refsXMLNS">[XMLNS]</a> <a href="#refsDOMCORE">[DOMCORE]</a>
;;  <a href="#refsDOMEVENTS">[DOMEVENTS]</a></p>
;;
;;  <p>Between the time an element's start tag is parsed and the time
;;  either the element's end tag is parsed or the parser detects a
;;  well-formedness error, the user agent must act as if the element was
;;  in a <span>stack of open elements</span>.</p>
;;
;;  <p class="note">This is used by the <code>object</code> element to
;;  avoid instantiating plugins before the <code>param</code> element
;;  children have been parsed.</p>
;;
;;  <p>This specification provides the following additional information
;;  that user agents should use when retrieving an external entity: the
;;  public identifiers given in the following list all correspond to <a
;;  href="<!--BOILERPLATE entities-dtd.url-->">the URL given by this
;;  link</a>.</p>
;;
;;  <ul class="brief">
;;   <li><code title="">-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Transitional//EN</code></li>
;;   <li><code title="">-//W3C//DTD&nbsp;XHTML&nbsp;1.1//EN</code></li>
;;   <li><code title="">-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Strict//EN</code></li>
;;   <li><code title="">-//W3C//DTD&nbsp;XHTML&nbsp;1.0&nbsp;Frameset//EN</code></li>
;;   <li><code title="">-//W3C//DTD&nbsp;XHTML&nbsp;Basic&nbsp;1.0//EN</code></li>
;;   <li><code title="">-//W3C//DTD&nbsp;XHTML&nbsp;1.1&nbsp;plus&nbsp;MathML&nbsp;2.0//EN</code></li>
;;   <li><code title="">-//W3C//DTD&nbsp;XHTML&nbsp;1.1&nbsp;plus&nbsp;MathML&nbsp;2.0&nbsp;plus&nbsp;SVG&nbsp;1.1//EN</code></li>
;;   <li><code title="">-//W3C//DTD&nbsp;MathML&nbsp;2.0//EN</code></li>
;;   <li><code title="">-//WAPFORUM//DTD&nbsp;XHTML&nbsp;Mobile&nbsp;1.0//EN</code></li>
;;  </ul>
;;
;;  <p>Furthermore, user agents should attempt to retrieve the above
;;  external entity's content when one of the above public identifiers
;;  is used, and should not attempt to retrieve any other external
;;  entity's content.</p>
;;
;;  <p class="note">This is not strictly a <span title="willful
;;  violation">violation</span> of the XML specification, but it does
;;  contradict the spirit of the XML specification's requirements. This
;;  is motivated by a desire for user agents to all handle entities in
;;  an interoperable fashion without requiring any network access for
;;  handling external subsets. <a href="#refsXML">[XML]</a></p>
;;
;;  <p id="scriptTagXML">When an <span>XML parser</span> creates a
;;  <code>script</code> element, it must be marked as being
;;  <span>"parser-inserted"</span>.  If the parser was originally
;;  created for the <span>XML fragment parsing algorithm</span>, then
;;  the element must be marked as <span>"already started"</span>
;;  also. When the element's end tag is parsed, the user agent must
;;  <span title="running a script">run</span> the <code>script</code>
;;  element. If this causes there to be a <span>pending parsing-blocking
;;  script</span>, then the user agent must run the following steps:</p>
;;
;;  <ol>
;;
;;   <li><p>Block this instance of the <span>XML parser</span>, such
;;   that the <span>event loop</span> will not run <span
;;   title="concept-task">tasks</span> that invoke it.</p></li>
;;
;;   <li><p><span>Spin the event loop</span> until there is no <span
;;   title="a style sheet blocking scripts">style sheet blocking
;;   scripts</span> and the <span>pending parsing-blocking
;;   script</span>'s <span>"ready to be parser-executed"</span> flag is
;;   set.</p></li>
;;
;;   <li><p>Unblock this instance of the <span>XML parser</span>, such
;;   that <span title="concept-task">tasks</span> that invoke it can
;;   again be run.</p></li>
;;
;;   <li><p><span title="executing a script block">Execute</span> the
;;   <span>pending parsing-blocking script</span>.</p></li>
;;
;;   <li><p>There is no longer a <span>pending parsing-blocking
;;   script</span>.</p></li>
;;
;;  </ol>
;;
;;  <p class="note">Since the <code
;;  title="dom-document-write">document.write()</code> API is not
;;  available for <span>XML documents</span>, much of the complexity in
;;  the <span>HTML parser</span> is not needed in the <span>XML
;;  parser</span>.</p>
;;
;;  <p>Certain algorithms in this specification <dfn title="feed the
;;  parser">spoon-feed the parser</dfn> characters one string at a
;;  time. In such cases, the <span>XML parser</span> must act as it
;;  would have if faced with a single string consisting of the
;;  concatenation of all those characters.</p>
;;
;;  <p>When an <span>XML parser</span> reaches the end of its input, it
;;  must <span>stop parsing</span>, following the same rules as the
;;  <span>HTML parser</span>.</p>
;;
;;  <p>For the purposes of conformance checkers, if a resource is
;;  determined to be in <span>the XHTML syntax</span>, then it is an
;;  <span title="XML documents">XML document</span>.</p>
;;
;;
;;
;;  <h3>Serializing XHTML fragments</h3>
;;
;;  <p>The <dfn>XML fragment serialization algorithm</dfn> for a
;;  <code>Document</code> or <code>Element</code> node either returns a
;;  fragment of XML that represents that node or raises an
;;  exception.</p>
;;
;;  <p>For <code>Document</code>s, the algorithm must return a string in
;;  the form of a <a
;;  href="http://www.w3.org/TR/xml/#sec-well-formed">document
;;  entity</a>, if none of the error cases below apply.</p>
;;
;;  <p>For <code>Element</code>s, the algorithm must return a string in
;;  the form of an <a
;;  href="http://www.w3.org/TR/xml/#wf-entities">internal general parsed
;;  entity</a>, if none of the error cases below apply.</p>
;;
;;  <p>In both cases, the string returned must be XML
;;  namespace-well-formed and must be an isomorphic serialization of all
;;  of that node's child nodes, in <span>tree order</span>. User agents
;;  may adjust prefixes and namespace declarations in the serialization
;;  (and indeed might be forced to do so in some cases to obtain
;;  namespace-well-formed XML). User agents may use a combination of
;;  regular text, character references, and CDATA sections to represent
;;  <span title="text node">text nodes</span> in the DOM (and indeed
;;  might be forced to use representations that don't match the DOM's,
;;  e.g. if a <code>CDATASection</code> node contains the string "<code
;;  title="">]]&gt;</code>").</p>
;;
;;  <p>For <code>Element</code>s, if any of the elements in the
;;  serialization are in no namespace, the default namespace in scope
;;  for those elements must be explicitly declared as the empty
;;  string.<!-- because otherwise round-tripping might break since it'll
;;  pick up the surrounding default ns when setting --> (This doesn't
;;  apply in the <code>Document</code> case.) <a
;;  href="#refsXML">[XML]</a> <a href="#refsXMLNS">[XMLNS]</a></p>
;;
;;  <p>For the purposes of this section, an internal general parsed
;;  entity is considered XML namespace-well-formed if a document
;;  consisting of an element with no namespace declarations whose
;;  contents are the internal general parsed entity would itself be XML
;;  namespace-well-formed.</p>
;;
;;  <p>If any of the following error cases are found in the DOM subtree
;;  being serialized, then the algorithm must raise an
;;  <code>INVALID_STATE_ERR</code> exception instead of returning a
;;  string:</p>
;;
;;  <ul>
;;
;;   <li>A <code>Document</code> node with no child element nodes.</li>
;;
;;   <li>A <code>DocumentType</code> node that has an external subset
;;   public identifier that contains characters that are not matched by
;;   the XML <code title="">PubidChar</code> production. <a
;;   href="#refsXML">[XML]</a></li>
;;
;;   <li>A <code>DocumentType</code> node that has an external subset
;;   system identifier that contains both a U+0022 QUOTATION MARK (")
;;   and a U+0027 APOSTROPHE (') or that contains characters that are
;;   not matched by the XML <code title="">Char</code> production. <a
;;   href="#refsXML">[XML]</a></li>
;;
;;   <li>A node with a <!--prefix or--> local name containing a U+003A
;;   COLON (:).</li> <!--(prefixes can get adjusted, so this isn't an
;;   excuse) -->
;;
;;   <li>A node with a <!--prefix or--> local name that does not match
;;   the XML <code title="">Name</code> production. <a
;;   href="#refsXML">[XML]</a></li> <!--(again, prefixes can get
;;   adjusted, so this isn't an excuse) -->
;;
;;   <li>An <code>Attr</code> node with no namespace whose local name is
;;   the lowercase string "<code title="">xmlns</code>". <a
;;   href="#refsXMLNS">[XMLNS]</a></li>
;;
;;   <li>An <code>Element</code> node with two or more attributes with
;;   the same local name and namespace.</li>
;;
;;   <li>An <code>Attr</code> node, <code>Text</code> node,
;;   <code>CDATASection</code> node, <code>Comment</code> node, or
;;   <code>ProcessingInstruction</code> node whose data contains
;;   characters that are not matched by the XML <code
;;   title="">Char</code> production. <a href="#refsXML">[XML]</a></li>
;;
;;   <!--<li>A <code>CDATASection</code> node whose data contains the
;;   string "<code title="">]]&gt;</code>".</li> (these can be split)-->
;;
;;   <li>A <code>Comment</code> node whose data contains two adjacent
;;   U+002D HYPHEN-MINUS characters (-) or ends with such a
;;   character.</li>
;;
;;   <li>A <code>ProcessingInstruction</code> node whose target name is
;;   an <span>ASCII case-insensitive</span> match for the string "<code
;;   title="">xml</code>".</li>
;;
;;   <li>A <code>ProcessingInstruction</code> node whose target name
;;   contains a U+003A COLON (:).</li>
;;
;;   <li>A <code>ProcessingInstruction</code> node whose data contains
;;   the string "<code title="">?></code>".</li>
;;
;;  </ul>
;;
;;  <p class="note">These are the only ways to make a DOM
;;  unserializable. The DOM enforces all the other XML constraints; for
;;  example, trying to append two elements to a <code>Document</code>
;;  node will raise a <code>HIERARCHY_REQUEST_ERR</code> exception.</p>
;;
;;
;;
;;  <h3>Parsing XHTML fragments</h3>
;;
;;  <p>The <dfn>XML fragment parsing algorithm</dfn> for either returns
;;  a <code>Document</code> or raises a <code>SYNTAX_ERR</code>
;;  exception. Given a string <var title="">input</var> and an optional
;;  context element <var title="">context</var>, the algorithm is as
;;  follows:</p>
;;
;;  <ol>
;;
;;   <li>
;;
;;    <p>Create a new <span>XML parser</span>.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If there is a <var title="">context</var> element, <span>feed
;;    the parser</span> just created the string corresponding to the
;;    start tag of that element, declaring all the namespace prefixes
;;    that are in scope on that element in the DOM, as well as declaring
;;    the default namespace (if any) that is in scope on that element in
;;    the DOM.</p>
;;
;;    <p>A namespace prefix is in scope if the DOM Core <code
;;    title="">lookupNamespaceURI()</code> method on the element would
;;    return a non-null value for that prefix.</p>
;;
;;    <p>The default namespace is the namespace for which the DOM Core
;;    <code title="">isDefaultNamespace()</code> method on the element
;;    would return true.</p>
;;
;;    <p class="note">If there is a <var title="">context</var> element,
;;    no <code title="">DOCTYPE</code> is passed to the parser, and
;;    therefore no external subset is referenced, and therefore no
;;    entities will be recognized.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p><span>Feed the parser</span> just created the string <var
;;    title="">input</var>.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If there is a <var title="">context</var> element, <span>feed
;;    the parser</span> just created the string corresponding to the
;;    end tag of that element.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If there is an XML well-formedness or XML namespace
;;    well-formedness error, then raise a <code>SYNTAX_ERR</code>
;;    exception and abort these steps.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If there is a <var title="">context</var> element, then return
;;    the child nodes of the root element of the resulting
;;    <code>Document</code>, in <span>tree order</span>.</p>
;;
;;    <p>Otherwise, return the children of the <code>Document</code>
;;    object, in <span>tree order</span>.</p>
;;
;;   </li>
;;
;;  </ol>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h2 id="rendering">Rendering</h2>
;;
;;  <p><i>User agents are not required to present HTML documents in any
;;  particular way. However, this section provides a set of suggestions
;;  for rendering HTML documents that, if followed, are likely to lead
;;  to a user experience that closely resembles the experience intended
;;  by the documents' authors. So as to avoid confusion regarding the
;;  normativity of this section, RFC2119 terms have not been used.
;;  Instead, the term "expected" is used to indicate behavior that will
;;  lead to this experience.</i></p>
;;
;;
;;  <h3>Introduction</h3>
;;
;;  <p>In general, user agents are expected to support CSS, and many of
;;  the suggestions in this section are expressed in CSS terms. User
;;  agents that use other presentation mechanisms can derive their
;;  expected behavior by translating from the CSS rules given in this
;;  section.</p>
;;
;;  <p>In the absence of style-layer rules to the contrary (e.g. author
;;  style sheets), user agents are expected to render an element so that
;;  it conveys to the user the meaning that the element
;;  <dfn>represents</dfn>, as described by this specification.</p>
;;
;;  <p>The suggestions in this section generally assume a visual output
;;  medium with a resolution of 96dpi or greater, but HTML is intended
;;  to apply to multiple media (it is a <i>media-independent</i>
;;  language). User agents are encouraged to adapt the suggestions in
;;  this section to their target media.</p>
;;
;;  <hr>
;;
;;  <p>An element is <dfn>being rendered</dfn> if it is <span>in a
;;  <code>Document</code></span>, either its parent node is itself
;;  <span>being rendered</span> or it is the <code>Document</code> node,
;;  and it is not explicitly excluded from the rendering using either:</p>
;;  <ul class="brief">
;;   <li>the CSS 'display' property's 'none' value, or</li>
;;   <li>the 'visibility' property's 'collapse' value unless it is being treated as equivalent to the 'hidden' value, or</li>
;;   <li>some equivalent in other styling languages.</li>
;;  </ul>
;;
;;  <p class="note">Just being off-screen does not mean the element is
;;  not <span>being rendered</span>. The presence of the <code
;;  title="attr-hidden">hidden</code> attribute normally means the
;;  element is not <span>being rendered</span>, though this might be
;;  overriden by the style sheets.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h3>The CSS user agent style sheet and presentational hints</h3>
;;
;;  <h4>Introduction</h4>
;;
;;  <p>The CSS rules given in these subsections are, except where
;;  otherwise specified, expected to be used as part of the user-agent
;;  level style sheet defaults for all documents that contain <span>HTML
;;  elements</span>.</p>
;;
;;  <p>Some rules are intended for the author-level zero-specificity
;;  presentational hints part of the CSS cascade; these are explicitly
;;  called out as <dfn>presentational hints</dfn>.</p>
;;
;;  <p>Some of the rules regarding left and right margins are given here
;;  as appropriate for elements whose 'direction' property is 'ltr', and
;;  are expected to be flipped around on elements whose 'direction'
;;  property is 'rtl'. These are marked "<dfn>LTR-specific</dfn>".</p>
;;<!--
;;  <p id="case-sensitive-selector-exception">For the purpose of the
;;  rules marked "case-sensitive", user agents are expected to use
;;  case-sensitive matching of attribute values rather than
;;  case-insensitive matching, regardless of whether a case-insensitive
;;  matching is normally required for the given attribute.</p>
;;-->
;;  <p id="case-insensitive-selector-exception">Similarly, for the
;;  purpose of the rules marked "case-insensitive", user agents are
;;  expected to use <span>ASCII case-insensitive</span> matching of
;;  attribute values rather than case-sensitive matching, even for
;;  attributes in XHTML documents.</p>
;;
;;  <p class="note">These markings only affect the handling of attribute
;;  <em>values</em>, not attribute names or element names.</p>
;;
;;  <hr>
;;
;;  <p>When the text below says that an attribute <var
;;  title="">attribute</var> on an element <var title="">element</var>
;;  <dfn>maps to the pixel length property</dfn> (or properties) <var
;;  title="">properties</var>, it means that if <var
;;  title="">element</var> has an attribute <var
;;  title="">attribute</var> set, and parsing that attribute's value
;;  using the <span>rules for parsing non-negative integers</span>
;;  doesn't generate an error, then the user agent is expected to use
;;  the parsed value as a pixel length for a <span title="presentational
;;  hints">presentational hint</span> for <var
;;  title="">properties</var>.</p>
;;
;;  <p>When the text below says that an attribute <var
;;  title="">attribute</var> on an element <var title="">element</var>
;;  <dfn>maps to the dimension property</dfn> (or properties) <var
;;  title="">properties</var>, it means that if <var
;;  title="">element</var> has an attribute <var
;;  title="">attribute</var> set, and parsing that attribute's value
;;  using the <span>rules for parsing dimension values</span> doesn't
;;  generate an error, then the user agent is expected to use the parsed
;;  dimension as the value for a <span title="presentational
;;  hints">presentational hint</span> for <var
;;  title="">properties</var>, with the value given as a pixel length if
;;  the dimension was an integer, and with the value given as a
;;  percentage if the dimension was a percentage.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Display types</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;[hidden], area, base, basefont, command, datalist, head,
;;input[type=hidden], link, menu[type=context], meta, noembed, noframes,
;;param, rp, script, source, style, track, title { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  display: none;
;;}
;;
;;address, article, aside, blockquote, body, center, dd, dir, div, dl,
;;dt, figure, figcaption, footer, form, h1, h2, h3, h4, h5, h6, header,
;;hgroup, hr, html, legend, listing, menu, nav, ol, p, plaintext, pre,
;;section, summary, ul, xmp { display: block; unicode-bidi: embed; }
;;
;;table { display: table; unicode-bidi: embed; }
;;caption { display: table-caption; unicode-bidi: embed; }
;;colgroup, colgroup[hidden] { display: table-column-group; unicode-bidi: embed; }
;;col, col[hidden] { display: table-column; unicode-bidi: embed; }
;;thead, thead[hidden] { display: table-header-group; unicode-bidi: embed; }
;;tbody, tbody[hidden] { display: table-row-group; unicode-bidi: embed; }
;;tfoot, tfoot[hidden] { display: table-footer-group; unicode-bidi: embed; }
;;tr, tr[hidden] { display: table-row; unicode-bidi: embed; }
;;td, th, td[hidden], th[hidden] { display: table-cell; unicode-bidi: embed; }
;;
;;colgroup[hidden], col[hidden], thead[hidden], tbody[hidden],
;;tfoot[hidden], tr[hidden], td[hidden], th[hidden] {
;;  visibility: collapse;
;;}
;;
;;li { display: list-item; unicode-bidi: embed; }
;;
;;ruby { display: ruby; }
;;rt { display: ruby-text; }</pre>
;;
;;  <!-- del, ins, and map are inline. -->
;;
;;  <p>For the purposes of the CSS table model, the <code>col</code>
;;  element is expected to be treated as if it was present as many times
;;  as its <code title="attr-col-span">span</code> attribute <span
;;  title="rules for parsing non-negative
;;  integers">specifies</span>.</p>
;;
;;  <p>For the purposes of the CSS table model, the
;;  <code>colgroup</code> element, if it contains no <code>col</code>
;;  element, is expected to be treated as if it had as many such
;;  children as its <code title="attr-colgroup-span">span</code>
;;  attribute <span title="rules for parsing non-negative
;;  integers">specifies</span>.</p>
;;
;;  <p>For the purposes of the CSS table model, the <code
;;  title="attr-tdth-colspan">colspan</code> and <code
;;  title="attr-tdth-rowspan">rowspan</code> attributes on
;;  <code>td</code> and <code>th</code> elements are expected to <span
;;  title="rules for parsing non-negative integers">provide</span> the
;;  <i>special knowledge</i> regarding cells spanning rows and
;;  columns.</p>
;;
;;  <p>For the purposes of the CSS ruby model, runs of children of
;;  <code>ruby</code> elements that are not <code>rt</code> or
;;  <code>rp</code> elements are expected to be wrapped in anonymous
;;  boxes whose 'display' property has the value 'ruby-base'. <a
;;  href="#refsCSSRUBY">[CSSRUBY]</a></p>
;;
;;  <p>User agents that do not support correct ruby rendering are
;;  expected to render parentheses around the text of <code>rt</code>
;;  elements in the absence of <code>rp</code> elements.</p>
;;
;;  <p>The <code>br</code> element is expected to render as if its
;;  contents were a single U+000A LINE FEED (LF) character and its
;;  'white-space' property was 'pre'. User agents are expected to
;;  support the 'clear' property on inline elements (in order to render
;;  <code>br</code> elements with <code
;;  title="attr-br-clear">clear</code> attributes) in the manner
;;  described in the non-normative note to this effect in CSS2.1.</p>
;;  <!-- section 9.5.2 of CSS2.1 -->
;;  <!-- br { content: '\A'; } /* waiting for 'content' to apply to elements */ -->
;;
;;  <p>The user agent is expected to hide <code>noscript</code> elements
;;  for whom <span title="concept-n-script">scripting is enabled</span>,
;;  irrespective of CSS rules.</p>
;;
;;  <p>In <span>HTML documents</span>, the user agent is expected to
;;  hide <code>form</code> elements that are children of
;;  <code>table</code>, <code>thead</code>, <code>tbody</code>,
;;  <code>tfoot</code>, or <code>tr</code> elements, irrespective of CSS
;;  rules.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Margins and padding</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;blockquote, dir, dl, figure, listing, menu, ol, p, plaintext,
;;pre, ul, xmp {
;;  margin-top: 1em; margin-bottom: 1em;
;;}
;;
;;dir dir, dir dl, dir menu, dir ol, dir ul,
;;dl dir, dl dl, dl menu, dl ol, dl ul,
;;menu dir, menu dl, menu menu, menu ol, menu ul,
;;ol dir, ol dl, ol menu, ol ol, ol ul,
;;ul dir, ul dl, ul menu, ul ol, ul ul {
;;  margin-top: 0; margin-bottom: 0;
;;}
;;
;;h1 { margin-top: 0.67em; margin-bottom; 0.67em; }
;;h2 { margin-top: 0.83em; margin-bottom; 0.83em; }
;;h3 { margin-top: 1.00em; margin-bottom; 1.00em; }
;;h4 { margin-top: 1.33em; margin-bottom; 1.33em; }
;;h5 { margin-top: 1.67em; margin-bottom; 1.67em; }
;;h6 { margin-top: 2.33em; margin-bottom; 2.33em; }
;;
;;dd { margin-left: 40px; } /* <span>LTR-specific</span>: use 'margin-right' for rtl elements */
;;dir, menu, ol, ul { padding-left: 40px; } /* <span>LTR-specific</span>: use 'padding-right' for rtl elements */
;;blockquote, figure { margin-left: 40px; margin-right: 40px; }
;;
;;table { border-spacing: 2px; border-collapse: separate; }
;;td, th { padding: 1px; }</pre>
;;
;;  <p>The <code>article</code>, <code>aside</code>, <code>nav</code>,
;;  and <code>section</code> elements are expected to affect the margins
;;  of <code>h1</code> elements, based on the nesting depth. If <var
;;  title="">x</var> is a selector that matches elements that are either
;;  <code>article</code>, <code>aside</code>, <code>nav</code>, or
;;  <code>section</code> elements, then the following rules capture what
;;  is expected:</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;<var title="">x</var> h1 { margin-top: 0.83em; margin-bottom: 0.83em; }
;;<var title="">x</var> <var title="">x</var> h1 { margin-top: 1.00em; margin-bottom: 1.00em; }
;;<var title="">x</var> <var title="">x</var> <var title="">x</var> h1 { margin-top: 1.33em; margin-bottom: 1.33em; }
;;<var title="">x</var> <var title="">x</var> <var title="">x</var> <var title="">x</var> h1 { margin-top: 1.67em; margin-bottom: 1.67em; }
;;<var title="">x</var> <var title="">x</var> <var title="">x</var> <var title="">x</var> <var title="">x</var> h1 { margin-top: 2.33em; margin-bottom: 2.33em; }</pre>
;;
;;  <hr>
;;
;;  <p>For each property in the table below, given a <code>body</code>
;;  element, the first attribute that exists <span>maps to the pixel
;;  length property</span> on the <code>body</code> element. If none of
;;  the attributes for a property are found, or if the value of the
;;  attribute that was found cannot be parsed successfully, then a
;;  default value of 8px is expected to be used for that property
;;  instead.</p>
;;
;;  <table>
;;   <thead>
;;    <tr>
;;     <th>Property
;;     <th>Source
;;   <tbody>
;;    <tr>
;;     <td rowspan="3">'margin-top'
;;     <td><code>body</code> element's <code title="attr-body-marginheight">marginheight</code> attribute
;;    <tr>
;;     <td>The <code>body</code> element's <span>container frame element</span>'s <code title="attr-iframe-marginheight">marginheight</code> attribute
;;    <tr>
;;     <td><code>body</code> element's <code title="attr-body-topmargin">topmargin</code> attribute
;;   <tbody>
;;    <tr>
;;     <td rowspan="3">'margin-right'
;;     <td><code>body</code> element's <code title="attr-body-marginwidth">marginwidth</code> attribute
;;    <tr>
;;     <td>The <code>body</code> element's <span>container frame element</span>'s <code title="attr-iframe-marginwidth">marginwidth</code> attribute
;;    <tr>
;;     <td><code>body</code> element's <code title="attr-body-rightmargin">rightmargin</code> attribute
;;   <tbody>
;;    <tr>
;;     <td rowspan="3">'margin-bottom'
;;     <td><code>body</code> element's <code title="attr-body-marginheight">marginheight</code> attribute
;;    <tr>
;;     <td>The <code>body</code> element's <span>container frame element</span>'s <code title="attr-iframe-marginheight">marginheight</code> attribute
;;    <tr>
;;     <td><code>body</code> element's <code title="attr-body-bottommargin">topmargin</code> attribute
;;   <tbody>
;;    <tr>
;;     <td rowspan="3">'margin-left'
;;     <td><code>body</code> element's <code title="attr-body-marginwidth">marginwidth</code> attribute
;;    <tr>
;;     <td>The <code>body</code> element's <span>container frame element</span>'s <code title="attr-iframe-marginwidth">marginwidth</code> attribute
;;    <tr>
;;     <td><code>body</code> element's <code title="attr-body-leftmargin">rightmargin</code> attribute
;;  </table>
;;
;;  <p>If the <code>body</code> element's <code>Document</code>'s
;;  <span>browsing context</span> is a <span>nested browsing
;;  context</span>, and the <span>browsing context container</span> of
;;  that <span>nested browsing context</span> is a <code>frame</code> or
;;  <code>iframe</code> element, then the <dfn>container frame
;;  element</dfn> of the <code>body</code> element is that
;;  <code>frame</code> or <code>iframe</code> element. Otherwise, there
;;  is no <span>container frame element</span>.</p>
;;
;;  <p class="warning">The above requirements imply that a page can
;;  change the margins of another page (including one from another
;;  <span>origin</span>) using, for example, an
;;  <code>iframe</code>. This is potentially a security risk, as it
;;  might in some cases allow an attack to contrive a situation in which
;;  a page is rendered not as the author intended, possibly for the
;;  purposes of phishing or otherwise misleading the user.</p>
;;
;;  <hr>
;;
;;  <p>If the <code>Document</code> has a <span>root element</span>, and
;;  the <code>Document</code>'s <span>browsing context</span> is a
;;  <span>nested browsing context</span>, and the <span>browsing context
;;  container</span> of that <span>nested browsing context</span> is a
;;  <code>frame</code> or <code>iframe</code> element, and that element
;;  has a <code title="attr-frames-scrolling">scrolling</code>
;;  attribute, then the user agent is expected to compare the value of
;;  the attribute in an <span>ASCII case-insensitive</span> manner to
;;  the values in the first column of the following table, and if one of
;;  them matches, then the user agent is expected to treat that
;;  attribute as a <span title="presentational hints">presentational
;;  hint</span> for the aforementioned root element's 'overflow'
;;  property, setting it to the value given in the corresponding cell on
;;  the same row in the second column:</p>
;;
;;  <table>
;;   <thead>
;;    <tr>
;;     <th> Attribute value
;;     <th> 'overflow' value
;;   <tbody>
;;    <tr>
;;     <td><code title="">on</code>
;;     <td>'scroll'
;;    <tr>
;;     <td><code title="">scroll</code>
;;     <td>'scroll'
;;    <tr>
;;     <td><code title="">yes</code>
;;     <td>'scroll'
;;    <tr>
;;     <td><code title="">off</code>
;;     <td>'hidden'
;;    <tr>
;;     <td><code title="">noscroll</code>
;;     <td>'hidden'
;;    <tr>
;;     <td><code title="">no</code>
;;     <td>'hidden'
;;    <tr>
;;     <td><code title="">auto</code>
;;     <td>'auto'
;;  </table>
;;
;;  <hr>
;;
;;  <p>The <code>table</code> element's <code
;;  title="attr-table-cellspacing">cellspacing</code> attribute
;;  <span>maps to the pixel length property</span> 'border-spacing' on the
;;  element.</p>
;;
;;  <p>The <code>table</code> element's <code
;;  title="attr-table-cellpadding">cellpadding</code> attribute <span
;;  title="maps to the pixel length property">maps to the pixel length
;;  properties</span> 'padding-top', 'padding-right', 'padding-bottom',
;;  and 'padding-left' of any <code>td</code> and <code>th</code>
;;  elements that have corresponding <span
;;  title="concept-cell">cells</span> in the <span
;;  title="concept-table">table</span> corresponding to the
;;  <code>table</code> element.</p>
;;
;;  <p>The <code>table</code> element's <code
;;  title="attr-table-hspace">hspace</code> attribute <span title="maps
;;  to the dimension property">maps to the dimension properties</span>
;;  'margin-left' and 'margin-right' on the <code>table</code>
;;  element.</p>
;;
;;  <p>The <code>table</code> element's <code
;;  title="attr-table-vspace">vspace</code> attribute <span title="maps
;;  to the dimension property">maps to the dimension properties</span>
;;  'margin-top' and 'margin-bottom' on the <code>table</code>
;;  element.</p>
;;
;;  <p>The <code>table</code> element's <code
;;  title="attr-table-height">height</code> attribute <span>maps to the
;;  dimension property</span> 'height' on the <code>table</code>
;;  element.</p>
;;
;;  <p>The <code>table</code> element's <code
;;  title="attr-table-width">width</code> attribute <span>maps to the
;;  dimension property</span> 'width' on the <code>table</code>
;;  element.</p>
;;
;;  <p>The <code>col</code> element's <code
;;  title="attr-col-width">width</code> attribute <span>maps to the
;;  dimension property</span> 'width' on the <code>col</code>
;;  element.</p>
;;
;;  <p>The <code>tr</code> element's <code
;;  title="attr-tr-height">height</code> attribute <span>maps to the
;;  dimension property</span> 'height' on the <code>tr</code>
;;  element.</p>
;;
;;  <p>The <code>td</code> and <code>th</code> elements' <code
;;  title="attr-tdth-height">height</code> attributes <span title="maps
;;  to the dimension property">map to the dimension property</span> 'height'
;;  on the element.</p>
;;
;;  <p>The <code>td</code> and <code>th</code> elements' <code
;;  title="attr-tdth-width">width</code> attributes <span title="maps
;;  to the dimension property">map to the dimension property</span> 'width'
;;  on the element.</p>
;;
;;  <hr>
;;
;;  <p>In <span>quirks mode</span>, the following rules are also
;;  expected to apply:</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;form { margin-bottom: 1em; }</pre>
;;
;;  <p>When a <code>Document</code> is in <span>quirks mode</span>,
;;  margins on <span>HTML elements</span> at the top or bottom of
;;  <code>body</code>, <code>td</code>, or <code>th</code> elements are
;;  expected to be collapsed to zero.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Alignment</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;thead, tbody, tfoot, table > tr { vertical-align: middle; }
;;tr, td, th { vertical-align: inherit; }
;;sub { vertical-align: sub; }
;;sup { vertical-align: super; }</pre>
;;
;;  <hr>
;;
;;  <p>The following rules are also expected to apply, as
;;  <span>presentational hints</span>:</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;table[align=left] { float: left; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;table[align=right] { float: right; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;table[align=center], table[align=abscenter],
;;table[align=absmiddle], table[align=middle] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  margin-left: auto; margin-right: auto;
;;}
;;thead[align=absmiddle], tbody[align=absmiddle], tfoot[align=absmiddle],
;;tr[align=absmiddle], td[align=absmiddle], th[align=absmiddle] {
;;  text-align: center;
;;}
;;
;;caption[align=bottom] { caption-side: bottom; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;p[align=left], h1[align=left], h2[align=left], h3[align=left],
;;h4[align=left], h5[align=left], h6[align=left] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  text-align: left;
;;}
;;p[align=right], h1[align=right], h2[align=right], h3[align=right],
;;h4[align=right], h5[align=right], h6[align=right] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  text-align: right;
;;}
;;p[align=center], h1[align=center], h2[align=center], h3[align=center],
;;h4[align=center], h5[align=center], h6[align=center] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  text-align: center;
;;}
;;p[align=justify], h1[align=justify], h2[align=justify], h3[align=justify],
;;h4[align=justify], h5[align=justify], h6[align=justify] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  text-align: justify;
;;}
;;thead[valign=top], tbody[valign=top], tfoot[valign=top],
;;tr[valign=top], td[valign=top], th[valign=top] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  vertical-align: top;
;;}
;;thead[valign=middle], tbody[valign=middle], tfoot[valign=middle],
;;tr[valign=middle], td[valign=middle], th[valign=middle] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  vertical-align: middle;
;;}
;;thead[valign=bottom], tbody[valign=bottom], tfoot[valign=bottom],
;;tr[valign=bottom], td[valign=bottom], th[valign=bottom] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  vertical-align: bottom;
;;}
;;thead[valign=baseline], tbody[valign=baseline], tfoot[valign=baseline],
;;tr[valign=baseline], td[valign=baseline], th[valign=baseline] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  vertical-align: baseline;
;;}</pre>
;;
;;  <p>The <code>center</code> element, the <code>caption</code> element
;;  unless specified otherwise below, and the <code>div</code>,
;;  <code>thead</code>, <code>tbody</code>, <code>tfoot</code>,
;;  <code>tr</code>, <code>td</code>, and <code>th</code> elements when
;;  they have an <code title="attr-div-align">align</code> attribute
;;  whose value is an <span>ASCII case-insensitive</span> match for
;;  either the string "<code title="">center</code>" or the string
;;  "<code title="">middle</code>", are expected to center text within
;;  themselves, as if they had their 'text-align' property set to
;;  'center' in a <span title="presentational hints">presentational
;;  hint</span>, and to <span>align descendants</span> to the
;;  center.</p>
;;
;;  <p>The <code>div</code>, <code>caption</code>, <code>thead</code>,
;;  <code>tbody</code>, <code>tfoot</code>, <code>tr</code>,
;;  <code>td</code>, and <code>th</code> elements, when they have an
;;  <code title="attr-align">align</code> attribute whose value is an
;;  <span>ASCII case-insensitive</span> match for the string "<code
;;  title="">left</code>", are expected to left-align text within
;;  themselves, as if they had their 'text-align' property set to 'left'
;;  in a <span title="presentational hints">presentational hint</span>,
;;  and to <span>align descendants</span> to the left.</p>
;;
;;  <p>The <code>div</code>, <code>caption</code>, <code>thead</code>,
;;  <code>tbody</code>, <code>tfoot</code>, <code>tr</code>,
;;  <code>td</code>, and <code>th</code> elements, when they have an
;;  <code title="attr-align">align</code> attribute whose value is an
;;  <span>ASCII case-insensitive</span> match for the string "<code
;;  title="">right</code>", are expected to right-align text within
;;  themselves, as if they had their 'text-align' property set to
;;  'right' in a <span title="presentational hints">presentational
;;  hint</span>, and to <span>align descendants</span> to the right.</p>
;;
;;  <p>The <code>div</code>, <code>caption</code>, <code>thead</code>,
;;  <code>tbody</code>, <code>tfoot</code>, <code>tr</code>,
;;  <code>td</code>, and <code>th</code> elements, when they have an
;;  <code title="attr-align">align</code> attribute whose value is an
;;  <span>ASCII case-insensitive</span> match for the string "<code
;;  title="">justify</code>", are expected to full-justify text within
;;  themselves, as if they had their 'text-align' property set to
;;  'justify' in a <span title="presentational hints">presentational
;;  hint</span>, and to <span>align descendants</span> to the left.</p>
;;
;;  <p>When a user agent is to <dfn>align descendants</dfn> of a node,
;;  the user agent is expected to align only those descendants that have
;;  both their 'margin-left' and 'margin-right' properties computing to
;;  a value other than 'auto', that are over-constrained and that have
;;  one of those two margins with a used value forced to a greater
;;  value, and that do not themselves have an applicable <code
;;  title="attr-align">align</code> attribute. When multiple elements
;;  are to <span title="align descendants">align</span> a particular
;;  descendant, the most deeply nested such element is expected to
;;  override the others.</p>
;;
;;  <p>User agents are expected to have a rule in their user agent
;;  stylesheet that matches <code>th</code> elements that have a parent
;;  node whose computed value for the 'text-align' property is its
;;  initial value, whose declaration block consists of just a single
;;  declaration that sets the 'text-align' property to the value
;;  'center'.</p> <!-- q.v. '-moz-center-or-inherit' -->
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Fonts and colors</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;address, cite, dfn, em, i, var { font-style: italic; }
;;b, strong, th { font-weight: bold; }
;;code, kbd, listing, plaintext, pre, samp, tt, xmp { font-family: monospace; }
;;h1 { font-size: 2.00em; font-weight: bold; }
;;h2 { font-size: 1.50em; font-weight: bold; }
;;h3 { font-size: 1.17em; font-weight: bold; }
;;h4 { font-size: 1.00em; font-weight: bold; }
;;h5 { font-size: 0.83em; font-weight: bold; }
;;h6 { font-size: 0.67em; font-weight: bold; }
;;big { font-size: larger; }
;;small, sub, sup { font-size: smaller; }
;;sub, sup { line-height: normal; }
;;
;;:link { color: blue; }
;;:visited { color: purple; }
;;mark { background: yellow; color: black; }
;;
;;table, td, th { border-color: gray; }
;;thead, tbody, tfoot, tr { border-color: inherit; }
;;table[rules=none], table[rules=groups], table[rules=rows],
;;table[rules=cols], table[rules=all], table[frame=void],
;;table[frame=above], table[frame=below], table[frame=hsides],
;;table[frame=lhs], table[frame=rhs], table[frame=vsides],
;;table[frame=box], table[frame=border],
;;table[rules=none] > tr > td, table[rules=none] > tr > th,
;;table[rules=groups] > tr > td, table[rules=groups] > tr > th,
;;table[rules=rows] > tr > td, table[rules=rows] > tr > th,
;;table[rules=cols] > tr > td, table[rules=cols] > tr > th,
;;table[rules=all] > tr > td, table[rules=all] > tr > th,
;;table[rules=none] > thead > tr > td, table[rules=none] > thead > tr > th,
;;table[rules=groups] > thead > tr > td, table[rules=groups] > thead > tr > th,
;;table[rules=rows] > thead > tr > td, table[rules=rows] > thead > tr > th,
;;table[rules=cols] > thead > tr > td, table[rules=cols] > thead > tr > th,
;;table[rules=all] > thead > tr > td, table[rules=all] > thead > tr > th,
;;table[rules=none] > tbody > tr > td, table[rules=none] > tbody > tr > th,
;;table[rules=groups] > tbody > tr > td, table[rules=groups] > tbody > tr > th,
;;table[rules=rows] > tbody > tr > td, table[rules=rows] > tbody > tr > th,
;;table[rules=cols] > tbody > tr > td, table[rules=cols] > tbody > tr > th,
;;table[rules=all] > tbody > tr > td, table[rules=all] > tbody > tr > th,
;;table[rules=none] > tfoot > tr > td, table[rules=none] > tfoot > tr > th,
;;table[rules=groups] > tfoot > tr > td, table[rules=groups] > tfoot > tr > th,
;;table[rules=rows] > tfoot > tr > td, table[rules=rows] > tfoot > tr > th,
;;table[rules=cols] > tfoot > tr > td, table[rules=cols] > tfoot > tr > th,
;;table[rules=all] > tfoot > tr > td, table[rules=all] > tfoot > tr > th { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  border-color: black;
;;}</pre>
;;
;;  <hr>
;;
;;  <p>The initial value for the 'color' property is expected to be
;;  black. The initial value for the 'background-color' property is
;;  expected to be 'transparent'. The canvas's background is expected to
;;  be white.</p>
;;
;;  <hr>
;;
;;  <p>The <code>article</code>, <code>aside</code>, <code>nav</code>,
;;  and <code>section</code> elements are expected to affect the font
;;  size of <code>h1</code> elements, based on the nesting depth. If
;;  <var title="">x</var> is a selector that matches elements that are
;;  either <code>article</code>, <code>aside</code>, <code>nav</code>,
;;  or <code>section</code> elements, then the following rules capture
;;  what is expected:</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;<var title="">x</var> h1 { font-size: 1.50em; }
;;<var title="">x</var> <var title="">x</var> h1 { font-size: 1.17em; }
;;<var title="">x</var> <var title="">x</var> <var title="">x</var> h1 { font-size: 1.00em; }
;;<var title="">x</var> <var title="">x</var> <var title="">x</var> <var title="">x</var> h1 { font-size: 0.83em; }
;;<var title="">x</var> <var title="">x</var> <var title="">x</var> <var title="">x</var> <var title="">x</var> h1 { font-size: 0.67em; }</pre>
;;
;;  <hr>
;;
;;  <p>When a <code>body</code>, <code>table</code>, <code>thead</code>,
;;  <code>tbody</code>, <code>tfoot</code>, <code>tr</code>,
;;  <code>td</code>, or <code>th</code> element has a <code
;;  title="attr-background">background</code> attribute set to a
;;  non-empty value, the new value is expected to be <span
;;  title="resolve a url">resolved</span> relative to the element, and
;;  if this is successful, the user agent is expected to treat the
;;  attribute as a <span title="presentational hints">presentational
;;  hint</span> setting the element's 'background-image' property to the
;;  resulting <span>absolute URL</span>.</p>
;;
;;  <p>When a <code>body</code>, <code>table</code>, <code>thead</code>,
;;  <code>tbody</code>, <code>tfoot</code>, <code>tr</code>,
;;  <code>td</code>, or <code>th</code> element has a <code
;;  title="">bgcolor</code> attribute set, the new value is expected to
;;  be parsed using the <span>rules for parsing a legacy color
;;  value</span>, and if that does not return an error, the user agent
;;  is expected to treat the attribute as a <span title="presentational
;;  hints">presentational hint</span> setting the element's
;;  'background-color' property to the resulting color.</p>
;;
;;  <p>When a <code>body</code> element has a <code
;;  title="attr-body-text">text</code> attribute, its value is expected
;;  to be parsed using the <span>rules for parsing a legacy color
;;  value</span>, and if that does not return an error, the user
;;  agent is expected to treat the attribute as a <span
;;  title="presentational hints">presentational hint</span> setting the
;;  element's 'color' property to the resulting color.</p>
;;
;;  <p>When a <code>body</code> element has a <code
;;  title="attr-body-link">link</code> attribute, its value is expected
;;  to be parsed using the <span>rules for parsing a legacy color
;;  value</span>, and if that does not return an error, the user agent
;;  is expected to treat the attribute as a <span title="presentational
;;  hints">presentational hint</span> setting the 'color' property of
;;  any element in the <code>Document</code> matching the ':link'
;;  pseudo-class to the resulting color.</p>
;;
;;  <p>When a <code>body</code> element has a <code
;;  title="attr-body-vlink">vlink</code> attribute, its value is
;;  expected to be parsed using the <span>rules for parsing a legacy
;;  color value</span>, and if that does not return an error, the user
;;  agent is expected to treat the attribute as a <span
;;  title="presentational hints">presentational hint</span> setting the
;;  'color' property of any element in the <code>Document</code>
;;  matching the ':visited' pseudo-class to the resulting color.</p>
;;
;;  <p>When a <code>body</code> element has a <code
;;  title="attr-body-alink">alink</code> attribute, its value is
;;  expected to be parsed using the <span>rules for parsing a legacy
;;  color value</span>, and if that does not return an error, the user
;;  agent is expected to treat the attribute as a <span
;;  title="presentational hints">presentational hint</span> setting the
;;  'color' property of any element in the <code>Document</code>
;;  matching the ':active' pseudo-class and either the ':link'
;;  pseudo-class or the ':visited' pseudo-class to the resulting
;;  color.</p>
;;
;;  <p>When a <code>table</code> element has a <code
;;  title="attr-table-bordercolor">bordercolor</code> attribute, its
;;  value is expected to be parsed using the <span>rules for parsing a
;;  legacy color value</span>, and if that does not return an error, the
;;  user agent is expected to treat the attribute as a <span
;;  title="presentational hints">presentational hint</span> setting the
;;  element's 'border-top-color', 'border-right-color',
;;  'border-bottom-color', and 'border-right-color' properties to the
;;  resulting color.</p>
;;
;;  <hr>
;;
;;  <p>When a <code>font</code> element has a <code
;;  title="attr-font-color">color</code> attribute, its value is
;;  expected to be parsed using the <span>rules for parsing a legacy
;;  color value</span>, and if that does not return an error, the user
;;  agent is expected to treat the attribute as a <span
;;  title="presentational hints">presentational hint</span> setting the
;;  element's 'color' property to the resulting color.</p>
;;
;;  <p>When a <code>font</code> element has a <code
;;  title="attr-font-face">face</code> attribute, the user agent is
;;  expected to treat the attribute as a <span title="presentational
;;  hints">presentational hint</span> setting the element's
;;  'font-family' property to the attribute's value.</p>
;;
;;  <!-- (Apparently only IE supports this?) (Note: if you add this
;;  back, make sure to define which of 'size' vs 'pointsize' wins.)
;;
;;  <p>When a <code>font</code> element has a <code
;;  title="attr-font-pointsize">pointsize</code> attribute, the user
;;  agent is expected to parse that attribute's value using the
;;  <span>rules for parsing non-negative integers</span>, and if this
;;  doesn't generate an error, then the user agent is expected to use
;;  the parsed value as a <em>point</em> length for a <span
;;  title="presentational hints">presentational hint</span> for the
;;  'font-size' property on the element.</p>
;;  -->
;;
;;  <p>When a <code>font</code> element has a <code
;;  title="attr-font-size">size</code> attribute, the user agent is
;;  expected to use the following steps to treat the attribute as a
;;  <span title="presentational hints">presentational hint</span>
;;  setting the element's 'font-size' property:</p>
;;
;;  <ol>
;;
;;   <li><p>Let <var title="">input</var> be the attribute's
;;   value.</p></li>
;;
;;   <li><p>Let <var title="">position</var> be a pointer into <var
;;   title="">input</var>, initially pointing at the start of the
;;   string.</p></li>
;;
;;   <li><p><span>Skip whitespace</span>.</p></li>
;;
;;   <li><p>If <var title="">position</var> is past the end of <var
;;   title="">input</var>, there is no <span title="presentational
;;   hints">presentational hint</span>. Abort these steps.</p></li>
;;
;;   <li><p>If the character at <var title="">position</var> is a U+002B
;;   PLUS SIGN character (+), then let <var title="">mode</var> be
;;   <i>relative-plus</i>, and advance <var title="">position</var> to
;;   the next character. Otherwise, if the character at <var
;;   title="">position</var> is a U+002D HYPHEN-MINUS character (-),
;;   then let <var title="">mode</var> be <i>relative-minus</i>, and
;;   advance <var title="">position</var> to the next
;;   character. Otherwise, let <var title="">mode</var> be
;;   <i>absolute</i>.</p></li>
;;
;;   <li><p><span>Collect a sequence of characters</span> in the range
;;   U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9), and let the
;;   resulting sequence be <var title="">digits</var>.</p></li>
;;
;;   <li><p>If <var title="">digits</var> is the empty string, there is
;;   no <span title="presentational hints">presentational
;;   hint</span>. Abort these steps.</p></li>
;;
;;   <li><p>Interpret <var title="">digits</var> as a base-ten
;;   integer. Let <var title="">value</var> be the resulting
;;   number.</p></li>
;;
;;   <li>
;;
;;    <!-- basefont support would go here, but we removed it -->
;;
;;    <p>If <var title="">mode</var> is <i>relative-plus</i>, then
;;    increment <var title="">value</var> by 3. If <var
;;    title="">mode</var> is <i>relative-minus</i>, then let <var
;;    title="">value</var> be the result of subtracting <var
;;    title="">value</var> from 3.</p>
;;
;;   </li>
;;
;;   <li><p>If <var title="">value</var> is greater than 7, let it be
;;   7.</p></li>
;;
;;   <li><p>If <var title="">value</var> is less than 1, let it be
;;   1.</p></li>
;;
;;   <li>
;;
;;    <p>Set 'font-size' to the keyword corresponding to the value of
;;    <var title="">value</var> according to the following table:</p>
;;
;;    <table>
;;     <thead>
;;      <tr>
;;       <th><var title="">value</var>
;;       <th>'font-size' keyword
;;       <th>Notes
;;     <tbody>
;;      <tr>
;;       <td>1
;;       <td>xx-small
;;       <td>
;;      <tr>
;;       <td>2
;;       <td>small
;;       <td>
;;      <tr>
;;       <td>3
;;       <td>medium
;;       <td>
;;      <tr>
;;       <td>4
;;       <td>large
;;       <td>
;;      <tr>
;;       <td>5
;;       <td>x-large
;;       <td>
;;      <tr>
;;       <td>6
;;       <td>xx-large
;;       <td>
;;      <tr>
;;       <td>7
;;       <td>x<!---->xx-large
;;       <td><i>see below</i>
;;    </table>
;;
;;    <p>The 'x<!---->xx-large' value is a non-CSS value used here to
;;    indicate a font size one "step" larger than 'xx-large'.</p>
;;
;;   </li>
;;
;;  </ol>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Punctuation and decorations</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;:link, :visited, ins, u { text-decoration: underline; }
;;abbr[title], acronym[title] { text-decoration: dotted underline; }<!-- CSS3 http://dev.w3.org/csswg/css3-text/#text-decoration-style -->
;;del, s, strike { text-decoration: line-through; }
;;blink { text-decoration: blink; }
;;
;;:focus { outline: auto; }
;;
;;q:before { content: open-quote; }
;;q:after { content: close-quote; }
;;
;;nobr { white-space: nowrap; }
;;listing, plaintext, pre, xmp { white-space: pre; }
;;textarea { white-space: pre-wrap; }
;;
;;ol { list-style-type: decimal; }
;;
;;dir, menu, ul {
;;  list-style-type: disc;
;;}
;;
;;dir dl, dir menu, dir ul,
;;menu dl, menu menu, menu ul,
;;ol dl, ol menu, ol ul,
;;ul dl, ul menu, ul ul {
;;  list-style-type: circle;
;;}
;;
;;dir dir dl, dir dir menu, dir dir ul,
;;dir menu dl, dir menu menu, dir menu ul,
;;dir ol dl, dir ol menu, dir ol ul,
;;dir ul dl, dir ul menu, dir ul ul,
;;menu dir dl, menu dir menu, menu dir ul,
;;menu menu dl, menu menu menu, menu menu ul,
;;menu ol dl, menu ol menu, menu ol ul,
;;menu ul dl, menu ul menu, menu ul ul,
;;ol dir dl, ol dir menu, ol dir ul,
;;ol menu dl, ol menu menu, ol menu ul,
;;ol ol dl, ol ol menu, ol ol ul,
;;ol ul dl, ol ul menu, ol ul ul,
;;ul dir dl, ul dir menu, ul dir ul,
;;ul menu dl, ul menu menu, ul menu ul,
;;ul ol dl, ul ol menu, ul ol ul,
;;ul ul dl, ul ul menu, ul ul ul {
;;  list-style-type: square;
;;}
;;
;;table { border-style: outset; }
;;td, th { border-style: inset; }
;;
;;[dir=ltr] { direction: ltr; unicode-bidi: embed; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;[dir=rtl] { direction: rtl; unicode-bidi: embed; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;bdo[dir=ltr], bdo[dir=rtl] { unicode-bidi: bidi-override; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */</pre>
;;
;;  <p>In addition, rules setting the 'quotes' property appropriately
;;  for the locales and languages understood by the user are expected to
;;  be present.</p>
;;
;;  <hr>
;;
;;  <p>The following rules are also expected to apply, as
;;  <span>presentational hints</span>:</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;td[nowrap], th[nowrap] { white-space: nowrap; }
;;pre[wrap] { white-space: pre-wrap; }
;;
;;br[clear=left] { clear: left; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;br[clear=right] { clear: right; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;br[clear=all], br[clear=both] { clear: both; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;
;;ol[type=1], li[type=1] { list-style-type: decimal; }
;;ol[type=a], li[type=a] { list-style-type: lower-alpha; }<!-- /* <a href="#case-sensitive-selector-exception">case-sensitive</a> */ -->
;;ol[type=A], li[type=A] { list-style-type: upper-alpha; }<!-- /* <a href="#case-sensitive-selector-exception">case-sensitive</a> */ -->
;;ol[type=i], li[type=i] { list-style-type: lower-roman; }<!-- /* <a href="#case-sensitive-selector-exception">case-sensitive</a> */ -->
;;ol[type=I], li[type=I] { list-style-type: upper-roman; }<!-- /* <a href="#case-sensitive-selector-exception">case-sensitive</a> */ -->
;;ul[type=disc], li[type=disc] { list-style-type: disc; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;ul[type=circle], li[type=circle] { list-style-type: circle; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;ul[type=square], li[type=square] { list-style-type: square; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;
;;table[rules=none], table[rules=groups], table[rules=rows],
;;table[rules=cols], table[rules=all] {
;;  border-style: none;
;;  border-collapse: collapse;
;;}
;;
;;table[frame=void] { border-style: hidden hidden hidden hidden; }
;;table[frame=above] { border-style: solid hidden hidden hidden; }
;;table[frame=below] { border-style: hidden hidden solid hidden; }
;;table[frame=hsides] { border-style: solid hidden solid hidden; }
;;table[frame=lhs] { border-style: hidden hidden hidden solid; }
;;table[frame=rhs] { border-style: hidden solid hidden hidden; }
;;table[frame=vsides] { border-style: hidden solid hidden solid; }
;;table[frame=box],
;;table[frame=border] { border-style: solid solid solid solid; }
;;
;;table[rules=none] > tr > td, table[rules=none] > tr > th,
;;table[rules=none] > thead > tr > td, table[rules=none] > thead > tr > th,
;;table[rules=none] > tbody > tr > td, table[rules=none] > tbody > tr > th,
;;table[rules=none] > tfoot > tr > td, table[rules=none] > tfoot > tr > th,
;;table[rules=groups] > tr > td, table[rules=groups] > tr > th,
;;table[rules=groups] > thead > tr > td, table[rules=groups] > thead > tr > th,
;;table[rules=groups] > tbody > tr > td, table[rules=groups] > tbody > tr > th,
;;table[rules=groups] > tfoot > tr > td, table[rules=groups] > tfoot > tr > th,
;;table[rules=rows] > tr > td, table[rules=rows] > tr > th,
;;table[rules=rows] > thead > tr > td, table[rules=rows] > thead > tr > th,
;;table[rules=rows] > tbody > tr > td, table[rules=rows] > tbody > tr > th,
;;table[rules=rows] > tfoot > tr > td, table[rules=rows] > tfoot > tr > th {
;;  border-style: none;
;;}
;;
;;table[rules=groups] > colgroup, table[rules=groups] > thead,
;;table[rules=groups] > tbody, table[rules=groups] > tfoot {
;;  border-style: solid;
;;}
;;
;;table[rules=rows] > tr, table[rules=rows] > thead > tr,
;;table[rules=rows] > tbody > tr, table[rules=rows] > tfoot > tr {
;;  border-style: solid;
;;}
;;
;;table[rules=cols] > tr > td, table[rules=cols] > tr > th,
;;table[rules=cols] > thead > tr > td, table[rules=cols] > thead > tr > th,
;;table[rules=cols] > tbody > tr > td, table[rules=cols] > tbody > tr > th,
;;table[rules=cols] > tfoot > tr > td, table[rules=cols] > tfoot > tr > th {
;;  border-style: none solid none solid;
;;}
;;
;;table[rules=all] > tr > td, table[rules=all] > tr > th,
;;table[rules=all] > thead > tr > td, table[rules=all] > thead > tr > th,
;;table[rules=all] > tbody > tr > td, table[rules=all] > tbody > tr > th,
;;table[rules=all] > tfoot > tr > td, table[rules=all] > tfoot > tr > th {
;;  border-style: solid;
;;}
;;
;;table[border] > tr > td, table[border] > tr > th,
;;table[border] > thead > tr > td, table[border] > thead > tr > th,
;;table[border] > tbody > tr > td, table[border] > tbody > tr > th,
;;table[border] > tfoot > tr > td, table[border] > tfoot > tr > th {
;;  border-width: 1px;
;;}</pre>
;;
;;  <p>When rendering <code>li</code> elements, user agents are expected
;;  to use the <span>ordinal value</span> of the <code>li</code> element
;;  to render the counter in the list item marker.</p>
;;
;;  <p>The <code>table</code> element's <code
;;  title="attr-table-border">border</code> attribute <span title="maps
;;  to the pixel length property">maps to the pixel length
;;  properties</span> 'border-top-width', 'border-right-width',
;;  'border-bottom-width', 'border-left-width' on the element. If the
;;  attribute is present but parsing the attribute's value using the
;;  <span>rules for parsing non-negative integers</span> generates an
;;  error, a default value of 1px is expected to be used for that
;;  property instead.</p>
;;
;;  <p>The <code>wbr</code> element is expected to override the
;;  'white-space' property and always provide a line-breaking
;;  opportunity.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Resetting rules for inherited properties</h4>
;;
;;  <p>The following rules are also expected to be in play, resetting
;;  certain properties to block inheritance by default.</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;table, input, select, option, optgroup, button, textarea, keygen {
;;  text-indent: initial;
;;}</pre>
;;
;;  <!-- arguably, the form controls' 'text-indent' lines should be in
;;  the sections below instead of here, but that would be far more
;;  complicated than this -->
;;
;;  <p>In <span>quirks mode</span>, the following rules are also
;;  expected to apply:</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;table {
;;  font-weight: initial;
;;  font-style: initial;
;;  font-variant: initial;
;;  font-size: initial;
;;  line-height: initial;
;;  white-space: initial;
;;  text-align: initial;
;;}
;;
;;input { box-sizing: border-box; }</pre>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>hr</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;hr { color: gray; border-style: inset; border-width: 1px; margin: 0.5em auto; }</pre>
;;
;;  <p>The following rules are also expected to apply, as
;;  <span>presentational hints</span>:</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;hr[align=left] { margin-left: 0; margin-right: auto; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;hr[align=right] { margin-left: auto; margin-right: 0; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;hr[align=center] { margin-left: auto; margin-right: auto; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;hr[color], hr[noshade] { border-style: solid; }</pre>
;;
;;  <p>If an <code>hr</code> element has either a <code
;;  title="attr-hr-color">color</code> attribute or a <code
;;  title="attr-hr-noshade">noshade</code> attribute, and furthermore
;;  also has a <code title="attr-hr-size">size</code> attribute, and
;;  parsing that attribute's value using the <span>rules for parsing
;;  non-negative integers</span> doesn't generate an error, then the
;;  user agent is expected to use the parsed value divided by two as a
;;  pixel length for <span>presentational hints</span> for the properties
;;  'border-top-width', 'border-right-width', 'border-bottom-width', and
;;  'border-left-width' on the element.</p>
;;
;;  <p>Otherwise, if an <code>hr</code> element has neither a <code
;;  title="attr-hr-color">color</code> attribute nor a <code
;;  title="attr-hr-noshade">noshade</code> attribute, but does have a
;;  <code title="attr-hr-size">size</code> attribute, and parsing that
;;  attribute's value using the <span>rules for parsing non-negative
;;  integers</span> doesn't generate an error, then: if the parsed value
;;  is one, then the user agent is expected to use the attribute as a
;;  <span title="presentational hints">presentational hint</span>
;;  setting the element's 'border-bottom-width' to 0; otherwise, if the
;;  parsed value is greater than one, then the user agent is expected to
;;  use the parsed value minus two as a pixel length for
;;  <span>presentational hints</span> for the 'height' property on the
;;  element.</p>
;;
;;  <p>The <code title="attr-hr-width">width</code> attribute on an
;;  <code>hr</code> element <span>maps to the dimension property</span>
;;  'width' on the element.</p>
;;
;;  <p>When an <code>hr</code> element has a <code
;;  title="attr-hr-color">color</code> attribute, its value is expected
;;  to be parsed using the <span>rules for parsing a legacy color
;;  value</span>, and if that does not return an error, the user agent
;;  is expected to treat the attribute as a <span title="presentational
;;  hints">presentational hint</span> setting the element's 'color'
;;  property to the resulting color.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>fieldset</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;fieldset {
;;  margin-left: 2px; margin-right: 2px;
;;  border: groove 2px ThreeDFace;
;;  padding: 0.35em 0.625em 0.75em;
;;}</pre>
;;
;;  <p>The <code>fieldset</code> element is expected to establish a new
;;  block formatting context.</p>
;;
;;  <p>The first <code>legend</code> element child of a
;;  <code>fieldset</code> element, if any, is expected to be rendered
;;  over the top border edge of the <code>fieldset</code> element. If
;;  the <code>legend</code> element in question has an <code
;;  title="attr-legend-align">align</code> attribute, and its value is
;;  an <span>ASCII case-insensitive</span> match for one of the strings
;;  in the first column of the following table, then the
;;  <code>legend</code> is expected to be rendered horizontally aligned
;;  over the border edge in the position given in the corresponding cell
;;  on the same row in the second column. If the attribute is absent or
;;  has a value that doesn't match any of the cases in the table, then
;;  the position is expected to be on the right if the 'direction'
;;  property on this element has a computed value of 'rtl', and on the
;;  left otherwise.</p>
;;
;;  <table>
;;   <thead>
;;    <tr>
;;     <th>Attribute value
;;     <th>Alignment position
;;   <tbody>
;;    <tr>
;;     <td><code title="">left</code>
;;     <td>On the left
;;    <tr>
;;     <td><code title="">right</code>
;;     <td>On the right
;;    <tr>
;;     <td><code title="">center</code>
;;     <td>In the middle
;;  </table>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h3>Replaced elements</h3>
;;
;;  <h4>Embedded content</h4>
;;
;;  <p>The <code>embed</code>, <code>iframe</code>, and
;;  <code>video</code> elements are expected to be treated as replaced
;;  elements.</p>
;;
;;  <p>A <code>canvas</code> element that <span>represents</span>
;;  <span>embedded content</span> is expected to be treated as a
;;  replaced element. Other <code>canvas</code> elements are expected to
;;  be treated as ordinary elements in the rendering model.</p>
;;
;;  <p>An <code>object</code> element that <span>represents</span> an
;;  image, plugin, or <span>nested browsing context</span> is expected
;;  to be treated as a replaced element. Other <code>object</code>
;;  elements are expected to be treated as ordinary elements in the
;;  rendering model.</p>
;;
;;  <p>An <code>applet</code> element that <span>represents</span> a
;;  <span>plugin</span> is expected to be treated as a replaced
;;  element. Other <code>applet</code> elements are expected to be
;;  treated as ordinary elements in the rendering model.</p>
;;
;;  <p>The <code>audio</code> element, when it is <span title="expose a
;;  user interface to the user">exposing a user interface</span>, is
;;  expected to be treated as a replaced element about one line high, as
;;  wide as is necessary to expose the user agent's user interface
;;  features. When an <code>audio</code> element is not <span
;;  title="expose a user interface to the user">exposing a user
;;  interface</span>, the user agent is expected to hide it,
;;  irrespective of CSS rules.</p>
;;
;;  <p>Whether a <code>video</code> element is <span title="expose a
;;  user interface to the user">exposing a user interface</span> is not
;;  expected to affect the size of the rendering; controls are expected
;;  to be overlaid with the page content without causing any layout
;;  changes, and are expected to disappear when the user does not need
;;  them.</p>
;;
;;  <p>When a <code>video</code> element represents a poster frame or
;;  frame of video, the poster frame or frame of video is expected to be
;;  rendered at the largest size that maintains the aspect ratio of that
;;  poster frame or frame of video without being taller or wider than
;;  the <code>video</code> element itself, and is expected to be
;;  centered in the <code>video</code> element.</p>
;;
;;<!--END w3c-html--><!--TT-->
;;  <p>Any subtitles or captions are expected to be overlayed directly
;;  on top of their <code>video</code> element, as defined by the
;;  relevant rendering rules; for <span>WebSRT</span>, those are the
;;  <span>WebSRT cue text rendering rules</span> defined below.</p>
;;
;;  <p>When the user agent starts <span title="expose a user interface
;;  to the user">exposing a user interface</span> for a
;;  <code>video</code> element, user agents should run the <span>rules
;;  for updating the timed track rendering</span> of each of the <span
;;  title="timed track">timed tracks</span> in the <code>video</code>
;;  element's <span>list of timed tracks</span> that are <span
;;  title="timed track showing">showing</span> (e.g., for <span
;;  title="timed track">timed tracks</span> based on
;;  <span>WebSRT</span>, the <span>rules for updating the display of
;;  WebSRT timed tracks</span>).</p>
;;<!--START w3c-html--><!--TT-->
;;
;;  <p class="note">Resizing <code>video</code> and <code>canvas</code>
;;  elements does not interrupt video playback or clear the canvas.</p>
;;
;;  <hr>
;;
;;  <p>The following CSS rules are expected to apply:</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;iframe { border: 2px inset; }</pre>
;;
;;  </div>
;;
;;
;;<!--END w3c-html--><!--TT-->
;;<div data-component="other Hixie drafts (editor: Ian Hickson)">
;;  <div class="impl">
;;
;;  <h4>Timed tracks</h4>
;;
;;  <p class="note">This section is intended to be moved to its own CSS
;;  module once an editor is found to run with it.</p>
;;
;;<!--START websrt-->
;;  <h5><dfn>WebSRT cue text rendering rules</dfn></h5>
;;
;;  <p>The <dfn>rules for updating the display of WebSRT timed
;;  tracks</dfn> render the <span title="timed track">timed
;;  tracks</span> of a <span>media element</span> (specifically, a
;;  <code>video</code> element), or of another playback mechanism, by
;;  applying the steps below. All the <span title="timed track">timed
;;  tracks</span> that use these rules for a given <span>media
;;  element</span>, or other playback mechanism, are rendered together,
;;  to avoid overlapping subtitles from multiple tracks.</p>
;;
;;  <p>The output of the steps below is a set of CSS boxes that covers
;;  the rendering area of the <span>media element</span> or other
;;  playback mechanism, which user agents are expected to render in a
;;  manner suiting the user.</p>
;;
;;  <p>The rules are as follows:</p>
;;
;;  <ol>
;;
;;   <li><p>If the <span>media element</span> is an <code>audio</code>
;;   element, or is another playback mechanism with no rendering area,
;;   abort these steps. There is nothing to render.</p></li>
;;
;;   <li><p>Let <var title="">video</var> be the <span>media
;;   element</span> or other playback mechanism.</p></li>
;;
;;   <li><p>Let <var title="">output</var> be an empty list of
;;   absolutely positioned CSS block boxes.</p></li>
;;
;;   <li><p>If the user agent is <span title="expose a user interface to
;;   the user">exposing a user interface</span> for <var
;;   title="">video</var>, add to <var title="">output</var> one or more
;;   completely transparent positioned CSS block boxes that cover the
;;   same region as the user interface.</p>
;;
;;   <li><p>If the last time these rules were run, the user agent was
;;   not <span title="expose a user interface to the user">exposing a
;;   user interface</span> for <var title="">video</var>, but now it is,
;;   let <var title="">reset</var> be true. Otherwise, let <var
;;   title="">reset</var> be false.</p>
;;
;;   <li><p>Let <var title="">tracks</var> be the subset of
;;   <var title="">video</var>'s <span>list of timed tracks</span> that
;;   have as their <span>rules for updating the timed track
;;   rendering</span> these <span>rules for updating the display of
;;   WebSRT timed tracks</span>, and whose <span>timed track mode</span>
;;   is <span title="timed track showing">showing</span>.</p></li>
;;
;;   <li><p>Let <var title="">cues</var> be an empty list of <span
;;   title="timed track cue">timed track cues</span>.</p></li>
;;
;;   <li><p>For each track <var title="">track</var> in <var
;;   title="">tracks</var>, append to <var title="">cues</var> all the
;;   <span title="timed track cue">cues</span> from <var
;;   title="">track</var>'s <span title="timed track list of cues">list
;;   of cues</span> that have their <span>timed track cue active
;;   flag</span> set.</p></li>
;;
;;   <li><p>If <var title="">reset</var> is false, then, for each
;;   <span>timed track cue</span> <var title="">cue</var> in <var
;;   title="">cues</var>: if <var title="">cue</var>'s <span>timed track
;;   cue display state</span> has a set of CSS boxes, then add those
;;   boxes to <var title="">output</var>, and remove <var
;;   title="">cue</var> from <var title="">cues</var>.</p></li>
;;
;;   <li>
;;
;;    <p>For each <span>timed track cue</span> <var title="">cue</var>
;;    in <var title="">cues</var> that has not yet had corresponding CSS
;;    boxes added to <var title="">output</var>, in <span>timed track
;;    cue order</span>, run the following substeps:</p>
;;
;;    <ol>
;;
;;     <li><p>Let <var title="">nodes</var> be the <span>list of WebSRT
;;     Node Objects</span> obtained by applying the <span>WebSRT cue
;;     text parsing rules</span> to the <var title="">cue</var>'s
;;     <span>timed track cue text</span>.</p>
;;
;;     <li>
;;
;;      <p>Apply the Unicode Bidirectional Algorithm's Paragraph Level
;;      steps to <var title="">nodes</var> using the following
;;      constraints, to determine the <i>paragraph embedding level</i>
;;      of the cue: <a href="#BIDI">[BIDI]</a></p>
;;
;;      <ul>
;;
;;       <li><var title="">nodes</var> represents a single paragraph.</li>
;;
;;       <li>The paragraph's text consists of the concatenation of the
;;       values of each <span>WebSRT Text Object</span> in <var
;;       title="">nodes</var>, in a pre-order, depth-first traversal,
;;       excluding <span title="WebSRT Ruby Text Object">WebSRT Ruby
;;       Text Objects</span> and their descendants.</li>
;;
;;      </ul>
;;
;;     </li>
;;
;;     <li>
;;
;;      <p>If the <i>paragraph embedding level</i> determined in the
;;      previous step is even (the <i>paragraph direction</i> is
;;      left-to-right), let <var title="">direction</var> be 'ltr',
;;      otherwise, let it be 'rtl'.</p>
;;
;;     </li>
;;
;;     <li><p>If the <span>timed track cue writing direction</span> is
;;     <span title="timed track cue horizontal writing
;;     direction">horizontal</span>, then let <var
;;     title="">block-flow</var> be 'tb'. Otherwise, if the <span>timed
;;     track cue writing direction</span> is <span title="timed track
;;     cue vertical growing left writing direction">vertical growing
;;     left</span>, then let <var title="">block-flow</var> be
;;     'lr'. Otherwise, the <span>timed track cue writing
;;     direction</span> is <span title="timed track cue vertical growing
;;     right writing direction">vertical growing right</span>; let <var
;;     title="">block-flow</var> be 'rl'.</p></li>
;;
;;     <li>
;;
;;      <p>Determine the value of <var title="">maximum size</var> for
;;      <var title="">cue</var> as per the appropriate rules from the
;;      following list:</p>
;;
;;      <dl class="switch">
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue start alignment">start</span>,
;;              and <var title="">direction</var> is 'ltr'</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue end alignment">end</span>,
;;              and <var title="">direction</var> is 'rtl'</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing left writing direction">vertical growing left</span>,
;;              and the <span>timed track cue alignment</span> is <span title="timed track cue start alignment">start</span></dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing right writing direction">vertical growing right</span>,
;;              and the <span>timed track cue alignment</span> is <span title="timed track cue start alignment">start</span></dt>
;;       <dd>
;;        <p>Let <var title="">maximum size</var> be the <span>timed track cue text position</span> subtracted from 100.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue end alignment">end</span>,
;;              and <var title="">direction</var> is 'ltr'</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue start alignment">start</span>,
;;              and <var title="">direction</var> is 'rtl'</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing left writing direction">vertical growing left</span>,
;;              and the <span>timed track cue alignment</span> is <span title="timed track cue end alignment">end</span></dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing right writing direction">vertical growing right</span>,
;;              and the <span>timed track cue alignment</span> is <span title="timed track cue end alignment">end</span></dt>
;;       <dd>
;;        <p>Let <var title="">maximum size</var> be the <span>timed track cue text position</span>.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span>,
;;              the <span>timed track cue text position</span> is less than or equal to 50,
;;              and <var title="">direction</var> is 'ltr'</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span>,
;;              the <span>timed track cue text position</span> is greater than <!-- or equal to --> 50,
;;              and <var title="">direction</var> is 'rtl'</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing left writing direction">vertical growing left</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span>,
;;              and the <span>timed track cue text position</span> is less than or equal to 50</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing right writing direction">vertical growing right</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span>,
;;              and the <span>timed track cue text position</span> is less than or equal to 50</dt>
;;       <dd>
;;        <p>Let <var title="">maximum size</var> be the <span>timed track cue text position</span> multiplied by two.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span>,
;;              the <span>timed track cue text position</span> is greater than <!-- or equal to --> 50,
;;              and <var title="">direction</var> is 'ltr'</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span>,
;;              the <span>timed track cue text position</span> is less than or equal to 50,
;;              and <var title="">direction</var> is 'rtl'</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing left writing direction">vertical growing left</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span>,
;;              and the <span>timed track cue text position</span> is greater than <!-- or equal to --> 50</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing right writing direction">vertical growing right</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span>,
;;              and the <span>timed track cue text position</span> is greater than <!-- or equal to --> 50</dt>
;;       <dd>
;;        <p>Let <var title="">maximum size</var> be the result of subtracting <span>timed track cue text position</span> from 100 and then multiplying the result by two.</p>
;;       </dd>
;;
;;      </dl>
;;
;;     </li>
;;
;;     <li><p>If the <span>timed track cue size</span> is less than <var
;;     title="">maximum size</var>, then let <var title="">size</var> be
;;     <span>timed track cue size</span>. Otherwise, let <var
;;     title="">size</var> be <var title="">maximum size</var>.</p></li>
;;
;;     <li><p>If the <span>timed track cue writing direction</span> is
;;     <span title="timed track cue horizontal writing
;;     direction">horizontal</span>, then let <var title="">width</var>
;;     be '<var title="">size</var>vw' and <var title="">height</var> be
;;     'auto'. Otherwise, let <var title="">width</var> be 'auto' and
;;     <var title="">height</var> be '<var
;;     title="">size</var>vh'. (These are CSS values used by the next
;;     section to set CSS properties for the rendering.)</p></li>
;;
;;     <li>
;;
;;      <p>Determine the value of <var title="">x-position</var> or <var
;;      title="">y-position</var> for <var title="">cue</var> as per the
;;      appropriate rules from the following list:</p>
;;
;;      <dl class="switch">
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue start alignment">start</span>,
;;              and <var title="">direction</var> is 'ltr'</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue end alignment">end</span>,
;;              and <var title="">direction</var> is 'rtl'</dt>
;;       <dd>
;;        <p>Let <var title="">x-position</var> be the <span>timed track cue text position</span>.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue end alignment">end</span>,
;;              and <var title="">direction</var> is 'ltr'</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue start alignment">start</span>,
;;              and <var title="">direction</var> is 'rtl'</dt>
;;       <dd>
;;        <p>Let <var title="">x-position</var> be the <span>timed track cue text position</span> subtracted from 100.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing left writing direction">vertical growing left</span>,
;;              and the <span>timed track cue alignment</span> is <span title="timed track cue start alignment">start</span></dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing right writing direction">vertical growing right</span>,
;;              and the <span>timed track cue alignment</span> is <span title="timed track cue start alignment">start</span></dt>
;;       <dd>
;;        <p>Let <var title="">y-position</var> be the <span>timed track cue text position</span>.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing left writing direction">vertical growing left</span>,
;;              and the <span>timed track cue alignment</span> is <span title="timed track cue end alignment">end</span></dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing right writing direction">vertical growing right</span>,
;;              and the <span>timed track cue alignment</span> is <span title="timed track cue end alignment">end</span></dt>
;;       <dd>
;;        <p>Let <var title="">y-position</var> be the <span>timed track cue text position</span> subtracted from 100.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span>,
;;              and <var title="">direction</var> is 'ltr'</dt>
;;       <dd>
;;        <p>Let <var title="">x-position</var> be the <span>timed track cue text position</span> minus half of <var title="">size</var>.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span>,
;;              and <var title="">direction</var> is 'rtl'</dt>
;;       <dd>
;;        <p>Let <var title="">x-position-reverse</var> be the <span>timed track cue text position</span> minus half of <var title="">size</var>.</p>
;;        <p>Let <var title="">x-position</var> be <var title="">x-position-reverse</var> subtracted from 100.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing left writing direction">vertical growing left</span>,
;;              and the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span></dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing right writing direction">vertical growing right</span>,
;;              and the <span>timed track cue alignment</span> is <span title="timed track cue middle alignment">middle</span></dt>
;;       <dd>
;;        <p>Let <var title="">y-position</var> be the <span>timed track cue text position</span> minus half of <var title="">size</var>.</p>
;;       </dd>
;;
;;      </dl>
;;
;;     </li>
;;
;;     <li>
;;
;;      <p>Determine the value of whichever of <var
;;      title="">x-position</var> or <var title="">y-position</var> is
;;      not yet calculated for <var title="">cue</var> as per the
;;      appropriate rules from the following list:</p>
;;
;;      <dl class="switch">
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              and the <span>timed track cue snap-to-lines flag</span> is set</dt>
;;       <dd>
;;        <p>Let <var title="">y-position</var> be zero.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;              and the <span>timed track cue snap-to-lines flag</span> is not set</dt>
;;       <dd>
;;        <p>Let <var title="">y-position</var> be the <span>timed track cue line position</span>.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing left writing direction">vertical growing left</span>,
;;              and the <span>timed track cue snap-to-lines flag</span> is set</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing right writing direction">vertical growing right</span>,
;;              and the <span>timed track cue snap-to-lines flag</span> is set</dt>
;;       <dd>
;;        <p>Let <var title="">x-position</var> be zero.</p>
;;       </dd>
;;
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing left writing direction">vertical growing left</span>,
;;              and the <span>timed track cue snap-to-lines flag</span> is not set</dt>
;;       <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing right writing direction">vertical growing right</span>,
;;              and the <span>timed track cue snap-to-lines flag</span> is not set</dt>
;;       <dd>
;;        <p>Let <var title="">x-position</var> be the <span>timed track cue line position</span>.</p>
;;       </dd>
;;
;;      </dl>
;;
;;     </li>
;;
;;     <li><p>Let <var title="">left</var> be '<var
;;     title="">x-position</var>vw' and <var title="">top</var> be '<var
;;     title="">y-position</var>vh'. (These again are CSS values used by
;;     the next section to set CSS properties for the
;;     rendering.)</p></li>
;;
;;     <li>
;;
;;      <p>Apply the terms of the CSS specifications to <var
;;      title="">nodes</var> within the following constraints, thus
;;      obtaining a set of CSS boxes positioned relative to an initial
;;      containing block: <a href="#refsCSS">[CSS]</a></p>
;;
;;      <ul>
;;
;;       <li>The <i>document tree</i> is the tree of <span title="WebSRT
;;       Node Object">WebSRT Node Objects</span> rooted at <var
;;       title="">nodes</var>.</li>
;;
;;       <li>For the purposes of processing by the CSS specification,
;;       <span title="WebSRT Internal Node Object">WebSRT Internal Node
;;       Objects</span> are equivalent to elements with the same
;;       contents. The name of these elements is not explicitly
;;       specified. These elements have no attributes.</li>
;;
;;       <li>For the purposes of processing by the CSS
;;       specification, <span title="WebSRT Text Object">WebSRT Text
;;       Objects</span> are equivalent to text nodes.</li>
;;
;;       <li>No style sheets are associated with <var
;;       title="">nodes</var>.</li>
;;
;;       <li>The children of the <var title="">nodes</var> must be
;;       wrapped in an anonymous box whose 'display' property has the
;;       value 'inline'. This is the <dfn>WebSRT cue background
;;       box</dfn>.</li>
;;
;;       <li>Runs of children of <span title="WebSRT Ruby Object">WebSRT
;;       Ruby Objects</span> that are not <span title="WebSRT Ruby Text
;;       Object">WebSRT Ruby Text Objects</span> must be wrapped in
;;       anonymous boxes whose 'display' property has the value
;;       'ruby-base'. <a href="#refsCSSRUBY">[CSSRUBY]</a></li>
;;
;;       <li>Properties on <span title="WebSRT Node Object">WebSRT Node
;;       Objects</span> have their values set as defined in the next
;;       section. (That section uses some of the variables whose values
;;       were calculated earlier in this algorithm.)</li>
;;
;;       <li>Text runs must be wrapped at the edge of their containing
;;       blocks, regardless of the value of the 'white-space' property,
;;       even if doing so requires splitting a word where there is no
;;       line breaking opportunity.</li>
;;
;;       <li>The viewport (and initial containing block) is
;;       <var title="">video</var>'s rendering area.</li>
;;
;;      </ul>
;;
;;      <p>Let <var title="">boxes</var> be the boxes generated as
;;      descendants of the initial containing block, along with their
;;      positions.</p>
;;
;;     </li>
;;
;;     <li><p>If there are no line boxes in <var title="">boxes</var>,
;;     skip the remainder of these substeps for <var
;;     title="">cue</var>. The cue is ignored.</p></li>
;;
;;     <li>
;;
;;      <p>Adjust the positions of <var title="">boxes</var> according
;;      to the appropriate steps from the following list:</p>
;;
;;      <dl class="switch">
;;
;;       <dt>If <var title="">cue</var>'s <span>timed track cue snap-to-lines flag</span> is set</dt>
;;
;;       <dd>
;;
;;        <p>Many of the steps in this algorithm vary according to the
;;        <span>timed track cue writing direction</span>. Steps labeled
;;        "<strong>Horizontal</strong>" must be followed only when the
;;        <span>timed track cue writing direction</span> is <span
;;        title="timed track cue horizontal writing
;;        direction">horizontal</span>, steps labeled
;;        "<strong>Vertical</strong>" must be followed when the
;;        <span>timed track cue writing direction</span> is either <span
;;        title="timed track cue vertical growing left writing
;;        direction">vertical growing left</span> or <span title="timed
;;        track cue vertical growing right writing direction">vertical
;;        growing right</span>, steps labeled "<strong>Vertical Growing
;;        Left</strong>" must be followed only when the <span>timed
;;        track cue writing direction</span> is <span title="timed track
;;        cue vertical growing left writing direction">vertical growing
;;        left</span>, and steps labeled "<strong>Vertical Growing
;;        Right</strong>" must be followed only when the <span>timed
;;        track cue writing direction</span> is <span title="timed track
;;        cue vertical growing right writing direction">vertical growing
;;        right</span>.</p>
;;
;;        <ol>
;;
;;         <li>
;;
;;          <p><strong>Horizontal</strong>: Let <var title="">step</var>
;;          be the height of the first line box in <var
;;          title="">boxes</var>.</p>
;;
;;          <p><strong>Vertical</strong>: Let <var title="">step</var>
;;          be the width of the first line box in <var
;;          title="">boxes</var>.</p>
;;
;;         </li>
;;
;;         <li><p>If <var title="">step</var> is zero, then jump to the
;;         step labeled <i>done positioning</i> below.</p></li>
;;
;;         <li><p>Let <var title="">line position</var> be the
;;         <span>timed track cue line position</span>.</p></li>
;;
;;         <li><p><strong>Vertical Growing Left</strong>: Add one to
;;         <var title="">line position</var> then negate it.</p></li>
;;
;;         <li><p>Let <var title="">position</var> be the result of
;;         multiplying <var title="">step</var> and <var title="">line
;;         position</var>.</p></li>
;;
;;         <li><p><strong>Vertical Growing Left</strong>: Decrease <var
;;         title="">position</var> by the width of the bounding box of
;;         the boxes in <var title="">boxes</var>, then increase <var
;;         title="">position</var> by <var title="">step</var>.</p></li>
;;
;;         <li>
;;
;;          <p><strong>Horizontal</strong>: If <var title="">line
;;          position</var> is less than zero then increase <var
;;          title="">position</var> by the height of the <var
;;          title="">video</var>'s rendering area, and negate <var
;;          title="">step</var> (so its value is now minus the height of
;;          the first line box in <var title="">boxes</var>).</p>
;;
;;          <p><strong>Vertical</strong>: If <var title="">line
;;          position</var> is less than zero then increase <var
;;          title="">position</var> by the width of the <var
;;          title="">video</var>'s rendering area, and negate <var
;;          title="">step</var>.</p>
;;
;;         </li>
;;
;;         <li>
;;
;;          <p><strong>Horizontal</strong>: Move all the boxes in <var
;;          title="">boxes</var> down by the distance given by <var
;;          title="">position</var>.</p>
;;
;;          <p><strong>Vertical</strong>: Move all the boxes in <var
;;          title="">boxes</var> right by the distance given by <var
;;          title="">position</var>.</p>
;;
;;         </li>
;;
;;         <li><p><i>Default</i>: Remember the position of all the boxes in
;;         <var title="">boxes</var> as their <var title="">default
;;         position</var>.</p></li>
;;
;;         <li><p>Let <var title="">switched</var> be false.</p></li>
;;
;;         <li><p><i>Step loop</i>: If none of the boxes in <var
;;         title="">boxes</var> would overlap any of the boxes in <var
;;         title="">output</var>, and all the boxes in <var
;;         title="">output</var> are within the <var
;;         title="">video</var>'s rendering area, then jump to the step
;;         labeled <i>done positioning</i> below.</p></li>
;;
;;         <li>
;;
;;          <p><strong>Horizontal</strong>: If <var title="">step</var>
;;          is negative and the top of the first line box in <var
;;          title="">boxes</var> is now above the top of the <var
;;          title="">video</var>'s rendering area, or if <var
;;          title="">step</var> is positive and the bottom of the first
;;          line box in <var title="">boxes</var> is now below the
;;          bottom of the <var title="">video</var>'s rendering area,
;;          jump to the step labeled <i>switch direction</i>.</p>
;;
;;          <p><strong>Vertical</strong>: If <var title="">step</var> is
;;          negative and the left edge of the first line box in <var
;;          title="">boxes</var> is now to the left of the left edge of
;;          the <var title="">video</var>'s rendering area, or if <var
;;          title="">step</var> is positive and the right edge of the
;;          first line box in <var title="">boxes</var> is now to the
;;          right of the right edge of the <var title="">video</var>'s
;;          rendering area, jump to the step labeled <i>switch
;;          direction</i>.</p>
;;
;;         </li>
;;
;;         <li>
;;
;;          <p><strong>Horizontal</strong>: Move all the boxes in <var
;;          title="">boxes</var> down by the distance given by <var
;;          title="">step</var>. (If <var title="">step</var> is
;;          negative, then this will actually result in an upwards
;;          movement of the boxes in absolute terms.)</p>
;;
;;          <p><strong>Vertical</strong>: Move all the boxes in <var
;;          title="">boxes</var> right by the distance given by <var
;;          title="">step</var>. (If <var title="">step</var> is
;;          negative, then this will actually result in a leftwards
;;          movement of the boxes in absolute terms.)</p>
;;
;;         </li>
;;
;;         <li><p>Jump back to the step labeled <i>step
;;         loop</i>.</p></li>
;;
;;         <li><p><i>Switch direction</i>: Move all the boxes in <var
;;         title="">boxes</var> back to their <var title="">default
;;         position</var> as determined in the step above labeled
;;         <i>default</i>.</p></li>
;;
;;         <li><p>If <var title="">switched</var> is true, jump to the step
;;         labeled <i>done positioning</i> below.</p></li>
;;
;;         <li><p>Negate <var title="">step</var>.</p></li>
;;
;;         <li><p>Set <var title="">switched</var> to true.</p></li>
;;
;;         <li><p>Jump back to the step labeled <i>step
;;         loop</i>.</p></li>
;;
;;        </ol>
;;
;;       </dd>
;;
;;       <dt>If <var title="">cue</var>'s <span>timed track cue snap-to-lines flag</span> is not set</dt>
;;       <dd>
;;
;;        <ol>
;;
;;         <li>
;;
;;          <p>Set up <var title="">x</var> and <var title="">y</var> as
;;          follows:</p>
;;
;;          <dl class="switch">
;;
;;           <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;                  and <var title="">direction</var> is 'ltr'</dt>
;;           <dd>
;;            <p>Let <var title="">x</var> be a percentage given by the
;;            <span>timed track cue text position</span>, and let <var
;;            title="">y</var> be a percentage given by the <span>timed
;;            track cue line position</span>.</p>
;;           </dd>
;;
;;           <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue horizontal writing direction">horizontal</span>,
;;                  and <var title="">direction</var> is 'rtl'</dt>
;;           <dd>
;;            <p>Let <var title="">x</var> be a percentage given by the
;;            <span>timed track cue text position</span> subtracted from
;;            100, and let <var title="">y</var> be a percentage given
;;            by the <span>timed track cue line position</span>.</p>
;;           </dd>
;;
;;           <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing left writing direction">vertical growing left</span></dt>
;;           <dd>
;;            <p>Let <var title="">x</var> be a percentage given by the
;;            <span>timed track cue line position</span> subtracted from
;;            100, and let <var title="">y</var> be a percentage given
;;            by the <span>timed track cue text position</span>.</p>
;;           </dd>
;;
;;           <dt>If the <span>timed track cue writing direction</span> is <span title="timed track cue vertical growing right writing direction">vertical growing right</span></dt>
;;           <dd>
;;            <p>Let <var title="">x</var> be a percentage given by the
;;            <span>timed track cue line position</span>, and let <var
;;            title="">y</var> be a percentage given by the <span>timed
;;            track cue text position</span>.</p>
;;           </dd>
;;
;;          </dl>
;;
;;         </li>
;;
;;         <li><p>Position the boxes in <var title="">boxes</var> such
;;         that the point <var title="">x</var>% along the width of the
;;         bounding box of the boxes in <var title="">boxes</var> is
;;         <var title="">x</var>% of the way across the width of the
;;         <var title="">video</var>'s rendering area, and the point
;;         <var title="">y</var>% along the height of the bounding box
;;         of the boxes in <var title="">boxes</var> is <var
;;         title="">y</var>% of the way across the height of the <var
;;         title="">video</var>'s rendering area, while maintaining the
;;         relative positions of the boxes in <var title="">boxes</var>
;;         to each other.</p></li>
;;
;;         <li><p>If none of the boxes in <var title="">boxes</var>
;;         would overlap any of the boxes in <var title="">output</var>,
;;         and all the boxes in <var title="">output</var> are within
;;         the <var title="">video</var>'s rendering area, then jump to
;;         the step labeled <i>done positioning</i> below.</p></li>
;;
;;         <li><p>If there is a position to which the boxes in <var
;;         title="">boxes</var> can be moved while maintaining the
;;         relative positions of the boxes in <var title="">boxes</var>
;;         to each other such that none of the boxes in <var
;;         title="">boxes</var> would overlap any of the boxes in <var
;;         title="">output</var>, and all the boxes in <var
;;         title="">output</var> would be within the <var
;;         title="">video</var>'s rendering area, then move the boxes in
;;         <var title="">boxes</var> to the closest such position to
;;         their current position, and then jump to the step labeled
;;         <i>done positioning</i> below. If there are multiple such
;;         positions that are equidistant from their current position,
;;         use the highest one amongst them; if there are several at
;;         that height, then use the leftmost one amongst them.</p></li>
;;
;;         <li><p>Otherwise, jump to the step labeled <i>done
;;         positioning</i> below. (The boxes will unfortunately
;;         overlap.)</p></li>
;;
;;        </ol>
;;
;;       </dd>
;;
;;      </dl>
;;
;;     </li>
;;
;;     <li><p><i>Done positioning</i>: If there are any line boxes in
;;     the (possibly now repositioned) <var title="">boxes</var> that do
;;     not completely fit inside <var title="">video</var>'s rendering
;;     area, remove those offending line boxes from <var
;;     title="">boxes</var>.</p></li>
;;
;;     <li><p>Let <var title="">cue</var>'s <span>timed track cue
;;     display state</span> have the CSS boxes in <var
;;     title="">boxes</var>.</p></li>
;;
;;     <li><p>Add the CSS boxes in <var title="">boxes</var> to <var
;;     title="">output</var>.</p></li>
;;
;;    </ol>
;;
;;   </li>
;;
;;   <li><p>Return <var title="">output</var>.</p></li>
;;
;;  </ol>
;;
;;
;;  <h5>Applying CSS properties to <span title="WebSRT Node Object">WebSRT Node Objects</span></h5>
;;
;;  <p>When following the <span>rules for updating the display of WebSRT
;;  timed tracks</span>, user agents must set properties of <span
;;  title="WebSRT Node Object">WebSRT Node Objects</span> as defined in
;;  this section. <a href="#refsCSS">[CSS]</a></p>
;;
;;  <p>On the (root) <span>List of WebSRT Node Objects</span>, the
;;  'position' property must be set to 'absolute', the 'direction'
;;  property must be set to <var title="">direction</var>, the
;;  'block-flow' property must be set to <var title="">block-flow</var>,
;;  the 'top' property must be set to <var title="">top</var>, the
;;  'left' property must be set to <var title="">left</var>, the 'width'
;;  property must be set to <var title="">width</var>, and the 'height'
;;  property must be set to <var title="">height</var>, where <var
;;  title="">direction</var>, <var title="">block-flow</var>, <var
;;  title="">top</var>, <var title="">left</var>, <var
;;  title="">width</var>, and <var title="">height</var> are the values
;;  with those names determined by the <span>rules for updating the
;;  display of WebSRT timed tracks</span> for the <span>timed track
;;  cue</span> from whose <span title="timed track cue text">text</span>
;;  the <span>List of WebSRT Node Objects</span> was constructed.</p>
;;
;;  <p>The 'font' shorthand property on the (root) <span>List of WebSRT
;;  Node Objects</span> must be set to '0.1vh sans-serif'. <a
;;  href="#refsCSSRUBY">[CSSRUBY]</a> <a
;;  href="#refsCSSVALUES">[CSSVALUES]</a></p>
;;
;;  <p>The 'color' property on the (root) <span>List of WebSRT Node
;;  Objects</span> must be set to 'rgba(255,255,255,0)'. <a
;;  href="#refsCSSCOLOR">[CSSCOLOR]</a></p>
;;
;;  <p>The 'background' shorthand property on the <span>WebSRT cue
;;  background box</span> must be set to 'rgba(0,0,0,0.8)'. <a
;;  href="#refsCSSCOLOR">[CSSCOLOR]</a></p>
;;
;;  <p>A text outline or stroke may also be set on the (root) <span>List
;;  of WebSRT Node Objects</span>, if supported.</p> <!-- 'text-outline'
;;  is in CSS3 Text, but Tab says that's awaiting medical attention. -->
;;
;;  <p>The 'font-style' property on <span title="WebSRT Italic
;;  Object">WebSRT Italic Objects</span> must be set to 'italic'.</p>
;;  <p>The 'font-weight' property on <span title="WebSRT Bold
;;  Object">WebSRT Bold Objects</span> must be set to 'bold'.</p>
;;
;;  <p>The 'display' property on <span title="WebSRT Ruby Object">WebSRT
;;  Ruby Objects</span> must be set to 'ruby'. <a
;;  href="#refsCSSRUBY">[CSSRUBY]</a></p>
;;
;;  <p>The 'display' property on <span title="WebSRT Ruby Text
;;  Object">WebSRT Ruby Text Objects</span> must be set to
;;  'ruby-text'. <a href="#refsCSSRUBY">[CSSRUBY]</a></p>
;;
;;  <p>If there are style sheets that apply to the <span>media
;;  element</span> or other playback mechanism, then they must be
;;  interpreted as defined in the next section.</p>
;;
;;  <p>All other non-inherited properties must be set to their initial
;;  values; inherited properties on the root <span>List of WebSRT Node
;;  Objects</span> must inherit their values from the <span>media
;;  element</span> for which the <span>timed track cue</span> is being
;;  rendered, if any. If there is no <span>media element</span> (i.e. if
;;  the <span>timed track</span> is being rendered for another media
;;  playback mechanism), then inherited properties on the root
;;  <span>List of WebSRT Node Objects</span> must take their initial
;;  values.</p>
;;
;;
;;  <h5>CSS extensions</h5>
;;
;;  <p>When a user agent is rendering one or more <span title="timed
;;  track cue">timed track cues</span> according to the <span>WebSRT cue
;;  text rendering rules</span>, <span title="WebSRT Node Object">WebSRT
;;  Node Objects</span> in the <span>list of WebSRT Node Objects</span>
;;  used in the rendering can be matched by certain pseudo-selectors as
;;  defined below. These selector can begin or stop matching individual
;;  <span title="WebSRT Node Object">WebSRT Node Objects</span> while a
;;  <span title="timed track cue">cue</span> is being rendered, even in
;;  between applications of the <span>WebSRT cue text rendering
;;  rules</span> (which are only run when the set of active cues
;;  changes). User agents that support the pseudo-element described
;;  below must dynamically update renderings accordingly.</p>
;;
;;  <p>Pseudo-elements apply to elements that are matched by
;;  selectors. For the purpose of this section, that element is the
;;  <i>matched element</i>. The pseudo-elements defined in the following
;;  sections affect the styling of parts of <span title="timed track
;;  cue">timed track cues</span> that are being rendered for the
;;  <i>matched element</i>.</p>
;;
;;  <p class="note">If the <i>matched element</i> is not a
;;  <code>video</code> element, the pseudo-elements defined below won't
;;  have any effect according to this specification.</p>
;;
;;
;;  <h6>The '::cue' pseudo-element</h6>
;;
;;  <p>A CSS user agent that implemented the <span title="timed
;;  track">timed tracks</span> model must implement the '::cue'
;;  pseudo-element.</p>
;;
;;  <p>The '<dfn title="pseudo-cue">::cue</dfn>' pseudo-element matches
;;  any <span>List of WebSRT Node Objects</span> constructed for the
;;  <i>matched element</i>, with the exception that the properties
;;  corresponding to the 'background' shorthand must be applied to the
;;  <span>WebSRT cue background box</span> rather than the <span>List of
;;  WebSRT Node Objects</span>.</p>
;;
;;  <p>The following properties apply to the '::cue' pseudo-element;
;;  other properties set on the pseudo-element must be ignored:</p>
;;
;;  <ul class="brief">
;;   <li>'color'</li>
;;   <li>'text-shadow'</li>
;;   <li>'text-outline'</li>
;;   <li>the properties corresponding to the 'background' shorthand</li>
;;   <li>the properties corresponding to the 'outline' shorthand</li>
;;   <li>the properties corresponding to the 'font' shorthand, including 'line-height'</li>
;;   <!-- add more... -->
;;   <!-- definitely not:
;;          display, float, position, top, left, right, bottom, width,
;;          height, margin-top, margin-bottom, margin-left, margin-right,
;;          clip, clear, content, cursor, direction, max-height,
;;          min-height, max-width, min-width, orphans, overflow,
;;          page-break-*, text-align, unicode-bidi, widows, z-index
;;   -->
;;  </ul>
;;
;;
;;  <h6>The '::cue-part' pseudo-element</h6>
;;
;;  <p>A CSS user agent that implemented the <span title="timed
;;  track">timed tracks</span> model must implement the '::cue-part(<var
;;  title="">filter</var>)' pseudo-element.</p>
;;
;;  <p>The '<dfn title="pseudo-cue-part">::cue-part(<var
;;  title="">argument</var>)</dfn>' pseudo-element matches any
;;  <span>WebSRT Node Object</span> constructed for the <i>matched
;;  element</i> that matches the given <var title="">argument</var>.</p>
;;
;;  <p>The <var title="">argument</var> must match the syntax
;;  "&lt;voice>&nbsp;||&nbsp;&lt;part>&nbsp;||&nbsp;&lt;position>&nbsp;||&nbsp;&lt;future-compatibility>". <a
;;  href="#refsCSS">[CSS]</a></p>
;;  
;;  <p>The "&lt;voice>" component must be either a non-negative
;;  &lt;integer> or one of the keywords "<code
;;  title="pseudo-cue-part-narrator">narrator</code>", "<code
;;  title="pseudo-cue-part-music">music</code>", "<code
;;  title="pseudo-cue-part-lyric">lyric</code>", "<code
;;  title="pseudo-cue-part-sound">sound</code>", "<code
;;  title="pseudo-cue-part-comment">comment</code>", or "<code
;;  title="pseudo-cue-part-credit">credit</code>".</p>
;;
;;  <p>The "&lt;part>" component must be one of the keywords "<code
;;  title="pseudo-cue-part-i">i</code>", "<code
;;  title="pseudo-cue-part-b">b</code>", "<code
;;  title="pseudo-cue-part-ruby">ruby</code>", or "<code
;;  title="pseudo-cue-part-rt">rt</code>".</p>
;;
;;  <p>The "&lt;position>" component must be one of the keywords "<code
;;  title="pseudo-cue-part-past">past</code>" or "<code
;;  title="pseudo-cue-part-future">future</code>".</p>
;;
;;  <p>The "&lt;future-compatibility>" component can be any
;;  identifier.</p>
;;
;;  <p>Each component of <var title="">argument</var> restricts which
;;  <span title="WebSRT Node Object">WebSRT Node Objects</span> are
;;  matched by the pseudo-element, as follows:</p>
;;
;;  <dl>
;;
;;   <dt>An integer greater than or equal to zero</dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span
;;    title="WebSRT Node Object">WebSRT Node Objects</span> from <span
;;    title="timed track cue">timed track cues</span> whose <span>timed
;;    track cue voice identifier</span> is the given number expressed in
;;    base ten with digits in the range U+0030 DIGIT ZERO (0) to U+0039
;;    DIGIT NINE (9).</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-narrator"><code>narrator</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span
;;    title="WebSRT Node Object">WebSRT Node Objects</span> from <span
;;    title="timed track cue">timed track cues</span> whose <span>timed
;;    track cue voice identifier</span> is "<code title="timed track cue
;;    narrator voice">narrator</code>".</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-music"><code>music</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span
;;    title="WebSRT Node Object">WebSRT Node Objects</span> from <span
;;    title="timed track cue">timed track cues</span> whose <span>timed
;;    track cue voice identifier</span> is "<code title="timed track cue
;;    music voice">music</code>".</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-lyric"><code>lyric</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span
;;    title="WebSRT Node Object">WebSRT Node Objects</span> from <span
;;    title="timed track cue">timed track cues</span> whose <span>timed
;;    track cue voice identifier</span> is "<code title="timed track cue
;;    lyric voice">lyric</code>".</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-sound"><code>sound</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span
;;    title="WebSRT Node Object">WebSRT Node Objects</span> from <span
;;    title="timed track cue">timed track cues</span> whose <span>timed
;;    track cue voice identifier</span> is "<code title="timed track cue
;;    sound voice">sound</code>".</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-comment"><code>comment</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span
;;    title="WebSRT Node Object">WebSRT Node Objects</span> from <span
;;    title="timed track cue">timed track cues</span> whose <span>timed
;;    track cue voice identifier</span> is "<code title="timed track cue
;;    comment voice">comment</code>".</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-credit"><code>credit</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span
;;    title="WebSRT Node Object">WebSRT Node Objects</span> from <span
;;    title="timed track cue">timed track cues</span> whose <span>timed
;;    track cue voice identifier</span> is "<code title="timed track cue
;;    credit voice">credit</code>".</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-i"><code>i</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span title="WebSRT Italic Object">WebSRT Italic Objects</span>.</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-b"><code>b</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span title="WebSRT Bold Object">WebSRT Bold Objects</span>.</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-ruby"><code>ruby</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span title="WebSRT Ruby Object">WebSRT Ruby Objects</span>.</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-rt"><code>rt</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span title="WebSRT Ruby Text Object">WebSRT Ruby Text Objects</span>.</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-past"><code>past</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span title="WebSRT Node Object">WebSRT Node Objects</span> that are <i>in the past</i>.</p>
;;   </dd>
;;
;;   <dt><dfn title="pseudo-cue-part-future"><code>future</code></dfn></dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to only matching <span title="WebSRT Node Object">WebSRT Node Objects</span> that are <i>in the future</i>.</p>
;;   </dd>
;;
;;   <dt>Any other identifier</dt>
;;   <dd>
;;    <p>Restricts the pseudo-element to not matching any <span title="WebSRT Node Object">WebSRT Node Objects</span>.</p>
;;    <p class="note">This is intended to allow for future extensions
;;    while still allowing Selectors to include a mixture of old and new
;;    '::cue-part()' pseudo-elements.</p>
;;   </dd>
;;
;;  </dl>
;;
;;  <p>A <span>WebSRT Node Object</span> <var title="">c</var> is
;;  <dfn>in the past</dfn> if, in a pre-order, depth-first traversal of
;;  the <span>timed track cue</span>'s <span>List of WebSRT Node
;;  Objects</span>, there exists a <span>WebSRT Timestamp Object</span>
;;  whose value is less than the <span>current playback position</span>
;;  of the <span>media element</span> that is the <i>matched
;;  element</i>, entirely after the <span>WebSRT Node Object</span> <var
;;  title="">c</var>.</p>
;;
;;  <p>A <span>WebSRT Node Object</span> <var title="">c</var> is
;;  <dfn>in the future</dfn> if, in a pre-order, depth-first traversal
;;  of the <span>timed track cue</span>'s <span>List of WebSRT Node
;;  Objects</span>, there exists a <span>WebSRT Timestamp Object</span>
;;  whose value is greater than the <span>current playback
;;  position</span> of the <span>media element</span> that is the
;;  <i>matched element</i>, entirely before the <span>WebSRT Node
;;  Object</span> <var title="">c</var>.</p>
;;
;;  <p>The following properties apply to the '::cue-part(<var
;;  title="">filter</var>)' pseudo-element:</p>
;;
;;  <ul class="brief">
;;   <li>'color'</li>
;;   <li>'text-shadow'</li>
;;   <li>'text-outline'</li>
;;   <li>the properties corresponding to the 'background' shorthand</li>
;;   <li>the properties corresponding to the 'outline' shorthand</li>
;;   <li>properties relating to the transition and animation features</li>
;;   <!-- add more... -->
;;   <!-- but definitely not anything that affects dimensions of boxes -->
;;  </ul>
;;
;;  <!--v2
;;   Would be nice to support transitions that are directional,
;;   e.g. changing text fill colour or shadow size of the start of a
;;   segment when the segment becomes "past", and having the change
;;   propagate towards the end of the segment so that it reaches the end
;;   of the segment when the next segment becomes "past".
;;  -->
;;
;;  <p>The following properties apply to the '::cue-part(<var
;;  title="">filter</var>)' pseudo-element if the neither of the <code
;;  title="pseudo-cue-part-past">past</code> or <code
;;  title="pseudo-cue-part-future">future</code> keywords are
;;  present:</p>
;;
;;  <ul class="brief">
;;   <li>the properties corresponding to the 'font' shorthand, including 'line-height'</li>
;;   <!-- add more... -->
;;   <!-- definitely not:
;;          display, float, position, top, left, right, bottom, width,
;;          height, margin-top, margin-bottom, margin-left, margin-right,
;;          clip, clear, content, cursor, direction, max-height,
;;          min-height, max-width, min-width, orphans, overflow,
;;          page-break-*, text-align, unicode-bidi, widows, z-index
;;   -->
;;  </ul>
;;
;;  <p>Other properties must be ignored.</p>
;;
;;  <p>As a special exception, the properties corresponding to the
;;  'background' shorthand, when they would have been applied to the
;;  <span>List of WebSRT Node Objects</span>, must instead be applied to
;;  the <span>WebSRT cue background box</span>.</p>
;;
;;  </div>
;;<!--END websrt-->
;;</div>
;;<!--START w3c-html--><!--TT-->
;;
;;
;;  <div class="impl">
;;
;;  <h4>Images</h4>
;;
;;  <p>When an <code>img</code> element or an <code>input</code> element
;;  when its <code title="attr-input-type">type</code> attribute is in
;;  the <span title="attr-input-type-image">Image Button</span> state
;;  <span>represents</span> an image, it is expected to be treated as a
;;  replaced element.</p>
;;
;;  <p>When an <code>img</code> element or an <code>input</code> element
;;  when its <code title="attr-input-type">type</code> attribute is in
;;  the <span title="attr-input-type-image">Image Button</span> state
;;  does not <span title="represents">represent</span> an image, but the
;;  element already has intrinsic dimensions (e.g. from the
;;  <span>dimension attributes</span> or CSS rules), and either the user
;;  agent has reason to believe that the image will become <i
;;  title="img-available">available</i><!--input-img-available also-->
;;  and be rendered in due course or the <code>Document</code> is in
;;  <span>quirks mode</span>, the element is expected to be treated as a
;;  replaced element whose content is the text that the element
;;  represents, if any, optionally alongside an icon indicating that the
;;  image is being obtained. For <code>input</code> elements, the text
;;  is expected to appear button-like to indicate that the element is a
;;  <span title="concept-button">button</span>.</p>
;;
;;  <p>When an <code>img</code> element <span>represents</span> some
;;  text and the user agent does not expect this to change, the element
;;  is expected to be treated as an inline element whose content is the
;;  text, optionally with an icon indicating that an image is
;;  missing.</p>
;;
;;  <p>When an <code>img</code> element <span>represents</span> nothing
;;  and the user agent does not expect this to change, the element is
;;  expected to not be rendered at all.</p>
;;
;;  <p>When an <code>img</code> element might be a key part of the
;;  content, but neither the image nor any kind of alternative text is
;;  available, and the user agent does not expect this to change, the
;;  element is expected to be treated as an inline element whose content
;;  is an icon indicating that an image is missing.</p> <!-- there's
;;  also a should requirement for this case in the <img> section itself
;;  -->
;;
;;  <p>When an <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-image">Image Button</span> state does not
;;  <span title="represents">represent</span> an image and the user
;;  agent does not expect this to change, the element is expected to be
;;  treated as a replaced element consisting of a button whose content
;;  is the element's alternative text. The intrinsic dimensions of the
;;  button are expected to be about one line in height and whatever
;;  width is necessary to render the text on one line.</p>
;;
;;  <p>The icons mentioned above are expected to be relatively small so
;;  as not to disrupt most text but be easily clickable. In a visual
;;  environment, for instance, icons could be 16 pixels by 16 pixels
;;  square, or 1em by 1em if the images are scalable. In an audio
;;  environment, the icon could be a short bleep. The icons are intended
;;  to indicate to the user that they can be used to get to whatever
;;  options the UA provides for images, and, where appropriate, are
;;  expected to provide access to the context menu that would have come
;;  up if the user interacted with the actual image.</p>
;;
;;  <hr>
;;
;;  <p>The following CSS rules are expected to apply when the
;;  <code>Document</code> is in <span>quirks mode</span>:</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;img[align=left] { margin-right: 3px; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;img[align=right] { margin-left: 3px; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */</pre>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Attributes for embedded content and images</h4>
;;
;;  <p>The following CSS rules are expected to apply as
;;  <span>presentational hints</span>:</p>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;iframe[frameborder=0], iframe[frameborder=no] { border: none; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;
;;applet[align=left], embed[align=left], iframe[align=left],
;;img[align=left], input[type=image][align=left], object[align=left] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  float: left;
;;}
;;
;;applet[align=right], embed[align=right], iframe[align=right],
;;img[align=right], input[type=image][align=right], object[align=right] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  float: right;
;;}
;;
;;applet[align=top], embed[align=top], iframe[align=top],
;;img[align=top], input[type=image][align=top], object[align=top] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  vertical-align: top;
;;}
;;
;;applet[align=bottom], embed[align=bottom], iframe[align=bottom],
;;img[align=bottom], input[type=image][align=bottom], object[align=bottom],
;;applet[align=baseline], embed[align=baseline], iframe[align=baseline],
;;img[align=baseline], input[type=image][align=baseline], object[align=baseline] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  vertical-align: baseline;
;;}
;;
;;applet[align=texttop], embed[align=texttop], iframe[align=texttop],
;;img[align=texttop], input[type=image][align=texttop], object[align=texttop] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  vertical-align: text-top;
;;}
;;
;;applet[align=absmiddle], embed[align=absmiddle], iframe[align=absmiddle],
;;img[align=absmiddle], input[type=image][align=absmiddle], object[align=absmiddle],
;;applet[align=abscenter], embed[align=abscenter], iframe[align=abscenter],
;;img[align=abscenter], input[type=image][align=abscenter], object[align=abscenter] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  vertical-align: middle;
;;}
;;
;;applet[align=bottom], embed[align=bottom], iframe[align=bottom],
;;img[align=bottom], input[type=image][align=bottom],
;;object[align=bottom] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  vertical-align: bottom;
;;}</pre>
;;
;;  <p>When an <code>applet</code>, <code>embed</code>,
;;  <code>iframe</code>, <code>img</code>, or <code>object</code>
;;  element, or an <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-image">Image Button</span> state, has an
;;  <code title="attr-dim-align">align</code> attribute whose value is
;;  an <span>ASCII case-insensitive</span> match for the string "<code
;;  title="">center</code>" or the string "<code
;;  title="">middle</code>", the user agent is expected to act as if the
;;  element's 'vertical-align' property was set to a value that aligns
;;  the vertical middle of the element with the parent element's
;;  baseline.</p>
;;
;;  <p>The <code title="attr-dim-hspace">hspace</code> attribute of
;;  <code>applet</code>, <code>embed</code>, <code>iframe</code>,
;;  <code>img</code>, or <code>object</code> elements, and
;;  <code>input</code> elements with a <code
;;  title="attr-input-type">type</code> attribute in the <span
;;  title="attr-input-type-image">Image Button</span> state, <span
;;  title="maps to the dimension property">maps to the dimension
;;  properties</span> 'margin-left' and 'margin-right' on the
;;  element.</p>
;;
;;  <p>The <code title="attr-dim-vspace">vspace</code> attribute of
;;  <code>applet</code>, <code>embed</code>, <code>iframe</code>,
;;  <code>img</code>, or <code>object</code> elements, and
;;  <code>input</code> elements with a <code
;;  title="attr-input-type">type</code> attribute in the <span
;;  title="attr-input-type-image">Image Button</span> state, <span
;;  title="maps to the dimension property">maps to the dimension
;;  properties</span> 'margin-top' and 'margin-bottom' on the
;;  element.</p>
;;
;;  <p>When an <code>img</code> element, <code>object</code> element, or
;;  <code>input</code> element with a <code
;;  title="attr-input-type">type</code> attribute in the <span
;;  title="attr-input-type-image">Image Button</span> state is contained
;;  within a <span>hyperlink</span> and has a <code
;;  title="attr-dim-border">border</code> attribute whose value, when
;;  parsed using the <span>rules for parsing non-negative
;;  integers</span>, is found to be a number greater than zero, the user
;;  agent is expected to use the parsed value for eight
;;  <span>presentational hints</span>: four setting the parsed value as
;;  a pixel length for the element's 'border-top-width',
;;  'border-right-width', 'border-bottom-width', and 'border-left-width'
;;  properties, and four setting the element's 'border-top-style',
;;  'border-right-style', 'border-bottom-style', and 'border-left-style'
;;  properties to the value 'solid'.</p>
;;
;;  <p id="dimRendering">The <code title="attr-dim-width">width</code>
;;  and <code title="attr-dim-height">height</code> attributes on
;;  <code>applet</code>, <code>embed</code>, <code>iframe</code>,
;;  <code>img</code>, <code>object</code> or <code>video</code>
;;  elements, and <code>input</code> elements with a <code
;;  title="attr-input-type">type</code> attribute in the <span
;;  title="attr-input-type-image">Image Button</span> state, <span
;;  title="maps to the dimension property">map to the dimension
;;  properties</span> 'width' and 'height' on the element
;;  respectively.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Image maps</h4>
;;
;;  <p>Shapes on an <span>image map</span> are expected to act, for the
;;  purpose of the CSS cascade, as elements independent of the original
;;  <code>area</code> element that happen to match the same style rules
;;  but inherit from the <code>img</code> or <code>object</code>
;;  element.</p>
;;
;;  <p>For the purposes of the rendering, only the 'cursor' property is
;;  expected to have any effect on the shape.</p>
;;
;;  <p class="example">Thus, for example, if an <code>area</code>
;;  element has a <code title="attr-style">style</code> attribute that
;;  sets the 'cursor' property to 'help', then when the user designates
;;  that shape, the cursor would change to a Help cursor.</p>
;;
;;  <p class="example">Similarly, if an <code>area</code> element had a
;;  CSS rule that set its 'cursor' property to 'inherit' (or if no rule
;;  setting the 'cursor' property matched the element at all), the
;;  shape's cursor would be inherited from the <code>img</code> or
;;  <code>object</code> element of the <span>image map</span>, not from
;;  the parent of the <code>area</code> element.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Toolbars</h4>
;;
;;  <p>When a <code>menu</code> element's <code
;;  title="attr-menu-type">type</code> attribute is in the <span
;;  title="toolbar state">toolbar</span> state, the element is
;;  expected to be treated as a replaced element with a height about two
;;  lines high and a width derived from the contents of the element.</p>
;;
;;  <p>The element is expected to have, by default, the appearance of a
;;  toolbar on the user agent's platform. It is expected to contain the
;;  menu that is <span title="building menus and toolbars">built</span>
;;  from the element.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h3>Bindings</h3>
;;
;;  <h4>Introduction</h4>
;;
;;  <p>A number of elements have their rendering defined in terms of the
;;  'binding' property. <a href="#refsBECSS">[BECSS]</a></p>
;;
;;  <p>The CSS snippets below set the 'binding' property to a
;;  user-agent-defined value, represented below by keywords like <code
;;  title=""><i title="">button</i></code>. The rules then described for
;;  these bindings are only expected to apply if the element's 'binding'
;;  property has not been overridden (e.g. by the author) to have
;;  another value.</p>
;;
;;  <p>Exactly how the bindings are implemented is not specified by this
;;  specification. User agents are encouraged to make their bindings set
;;  the 'appearance' CSS property appropriately to achieve
;;  platform-native appearances for widgets, and are expected to
;;  implement any relevant animations, etc, that are appropriate for the
;;  platform. <a href="#refsCSSUI">[CSSUI]</a></p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>button</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;button { binding: <i title="">button</i>; }</pre>
;;
;;  <p>When the <i title="">button</i> binding applies to a
;;  <code>button</code> element, the element is expected to render as an
;;  'inline-block' box rendered as a button whose contents are the
;;  contents of the element.</p>
;;
;;  </div>
;;
;;
;;<!--v2DATAGRID
;;  <div class="impl">
;;
;;  <h4>The <code>datagrid</code> element</h4>
;;
;;  This section will probably include details on how to render DATAGRID
;;  (including <span id="datagridPseudos">its pseudo-elements</span>),
;;  drag-and-drop, etc, in a visual medium, in concert with
;;  CSS. Implementation experience is desired before this section is
;;  filled in.
;;
;;  </div>
;;-->
;;
;;  <div class="impl">
;;
;;  <h4>The <code>details</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;details { binding: <i title="">details</i>; }</pre>
;;
;;  <p>When the <i title="">details</i> binding applies to a
;;  <code>details</code> element, the element is expected to render as a
;;  'block' box with its 'padding-left' property set to '40px' for
;;  left-to-right elements (<span>LTR-specific</span>) and with its
;;  'padding-right' property set to '40px' for right-to-left
;;  elements. The element's shadow tree is expected to take the
;;  element's first child <code>summary</code> element, if any, and
;;  place it in a first 'block' box container, and then take the
;;  element's remaining descendants, if any, and place them in a second
;;  'block' box container.</p>
;;
;;  <p>The first container is expected to contain at least one line box,
;;  and that line box is expected to contain a disclosure widget
;;  (typically a triangle), horizontally positioned within the left
;;  padding of the <code>details</code> element. That widget is expected
;;  to allow the user to request that the details be shown or
;;  hidden.</p>
;;
;;  <p>The second container is expected to have its 'overflow' property
;;  set to 'hidden'. When the <code>details</code> element does not have
;;  an <code title="attr-details-open">open</code> attribute, this
;;  second container is expected to be removed from the rendering.</p>
;;
;;  <!-- http://mail.gnome.org/archives/usability/2006-June/msg00015.html -->
;;
;;  </div>
;;
;;  <div class="impl">
;;
;;  <h4>The <code>input</code> element as a text entry widget</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;input { binding: <i title="">input-textfield</i>; }
;;input[type=password] { binding: <i title="">input-password</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;/* later rules override this for other values of type="" */</pre>
;;
;;  <p>When the <i title="">input-textfield</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-text">Text</span>, <span
;;  title="attr-input-type-search">Search</span>, <span
;;  title="attr-input-type-tel">Telephone</span>, <span
;;  title="attr-input-type-url">URL</span>, or <span
;;  title="attr-input-type-email">E-mail</span> state, the element is
;;  expected to render as an 'inline-block' box rendered as a text
;;  field.</p>
;;
;;  <p>When the <i title="">input-password</i> binding applies, to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-password">Password</span> state, the element
;;  is expected to render as an 'inline-block' box rendered as a text
;;  field whose contents are obscured.</p>
;;
;;  <p>If an <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in one of the above
;;  states has a <code title="attr-input-size">size</code> attribute,
;;  and parsing that attribute's value using the <span>rules for parsing
;;  non-negative integers</span> doesn't generate an error, then the
;;  user agent is expected to use the attribute as a <span
;;  title="presentational hints">presentational hint</span> for the
;;  'width' property on the element, with the value obtained from
;;  applying the <span>converting a character width to pixels</span>
;;  algorithm to the value of the attribute.</p>
;;
;;  <p>If an <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in one of the above
;;  states does <em>not</em> have a <code
;;  title="attr-input-size">size</code> attribute, then the user agent
;;  is expected to act as if it had a user-agent-level style sheet rule
;;  setting the 'width' property on the element to the value obtained
;;  from applying the <span>converting a character width to
;;  pixels</span> algorithm to the number 20.</p>
;;
;;  <p>The <dfn>converting a character width to pixels</dfn> algorithm
;;  returns <span title="">(<var title="">size</var>-1)&times;<var
;;  title="">avg</var>&nbsp;+&nbsp;<var title="">max</var></span>, where
;;  <var title="">size</var> is the character width to convert, <var
;;  title="">avg</var> is the average character width of the primary
;;  font for the element for which the algorithm is being run, in
;;  pixels, and <var title="">max</var> is the maximum character width
;;  of that same font, also in pixels. (The element's 'letter-spacing'
;;  property does not affect the result.)</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>input</code> element as domain-specific widgets</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;input[type=datetime] { binding: <i title="">input-datetime</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;input[type=date] { binding: <i title="">input-date</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;input[type=month] { binding: <i title="">input-month</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;input[type=week] { binding: <i title="">input-week</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;input[type=time] { binding: <i title="">input-time</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;input[type=datetime-local] { binding: <i title="">input-datetime-local</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;input[type=number] { binding: <i title="">input-number</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */</pre>
;;
;;  <p>When the <i title="">input-datetime</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-datetime">Date and Time</span> state, the
;;  element is expected to render as an 'inline-block' box depicting a
;;  Date and Time control.</p>
;;
;;  <p>When the <i title="">input-date</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-date">Date</span> state, the element is
;;  expected to render as an 'inline-block' box depicting a Date
;;  control.</p>
;;
;;  <p>When the <i title="">input-month</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-month">Month</span> state, the element is
;;  expected to render as an 'inline-block' box depicting a Month
;;  control.</p>
;;
;;  <p>When the <i title="">input-week</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-week">Week</span> state, the element is
;;  expected to render as an 'inline-block' box depicting a Week
;;  control.</p>
;;
;;  <p>When the <i title="">input-time</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-time">Time</span> state, the element is
;;  expected to render as an 'inline-block' box depicting a Time
;;  control.</p>
;;
;;  <p>When the <i title="">input-datetime-local</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-datetime-local">Local Date and Time</span>
;;  state, the element is expected to render as an 'inline-block' box
;;  depicting a Local Date and Time control.</p>
;;
;;  <p>When the <i title="">input-number</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-number">Number</span> state, the element is
;;  expected to render as an 'inline-block' box depicting a Number
;;  control.</p>
;;
;;  <p>These controls are all expected to be about one line high, and
;;  about as wide as necessary to show the widest possible value.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>input</code> element as a range control</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;input[type=range] { binding: <i title="">input-range</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */</pre>
;;
;;  <p>When the <i title="">input-range</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-range">Range</span> state, the element is
;;  expected to render as an 'inline-block' box depicting a slider
;;  control.</p>
;;
;;  <p>When the control is wider than it is tall (or square), the
;;  control is expected to be a horizontal slider, with the lowest value
;;  on the right if the 'direction' property on this element has a
;;  computed value of 'rtl', and on the left otherwise. When the control
;;  is taller than it is wide, it is expected to be a vertical slider,
;;  with the lowest value on the bottom.</p>
;;
;;  <p>Predefined suggested values (provided by the <code
;;  title="attr-input-list">list</code> attribute) are expected to be
;;  shown as tick marks on the slider, which the slider can snap to.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>input</code> element as a color well</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;input[type=color] { binding: <i title="">input-color</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */</pre>
;;
;;  <p>When the <i title="">input-color</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-color">Color</span> state, the element is
;;  expected to render as an 'inline-block' box depicting a color well,
;;  which, when activated, provides the user with a color picker (e.g. a
;;  color wheel or color palette) from which the color can be
;;  changed.</p>
;;
;;  <p>Predefined suggested values (provided by the <code
;;  title="attr-input-list">list</code> attribute) are expected to be
;;  shown in the color picker interface, not on the color well
;;  itself.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>input</code> element as a check box and radio button widgets</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;input[type=checkbox] { binding: <i title="">input-checkbox</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;input[type=radio] { binding: <i title="">input-radio</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */</pre>
;;
;;  <p>When the <i title="">input-checkbox</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-checkbox">Checkbox</span> state, the element
;;  is expected to render as an 'inline-block' box containing a single
;;  check box control, with no label.</p>
;;
;;  <p>When the <i title="">input-radio</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-radio">Radio Button</span> state, the element
;;  is expected to render as an 'inline-block' box containing a single
;;  radio button control, with no label.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>input</code> element as a file upload control</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;input[type=file] { binding: <i title="">input-file</i>; } /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */</pre>
;;
;;  <p>When the <i title="">input-file</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-file">File Upload</span> state, the element
;;  is expected to render as an 'inline-block' box containing a span of
;;  text giving the filename(s) of the <span
;;  title="concept-input-type-file-selected">selected files</span>, if
;;  any, followed by a button that, when activated, provides the user
;;  with a file picker from which the selection can be changed.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>input</code> element as a button</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;input[type=submit], input[type=reset], input[type=button] { /* <a href="#case-insensitive-selector-exception">case-insensitive</a> */
;;  binding: <i title="">input-button</i>;
;;}</pre>
;;
;;  <p>When the <i title="">input-button</i> binding applies to an
;;  <code>input</code> element whose <code
;;  title="attr-input-type">type</code> attribute is in the <span
;;  title="attr-input-type-submit">Submit Button</span>, <span
;;  title="attr-input-type-reset">Reset Button</span>, or <span
;;  title="attr-input-type-button">Button</span> state, the element is
;;  expected to render as an 'inline-block' box rendered as a button,
;;  about one line high, containing the contents of the element's <code
;;  title="attr-input-value">value</code> attribute, if any, or text
;;  derived from the element's <code title="attr-input-type">type</code>
;;  attribute in a user-agent-defined (and probably locale-specific)
;;  fashion, if not.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>marquee</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;marquee { binding: <i title="">marquee</i>; }</pre>
;;
;;  <p>When the <i title="">marquee</i> binding applies to a
;;  <code>marquee</code> element, while the element is <span
;;  title="concept-marquee-on">turned on</span>, the element is expected
;;  to render in an animated fashion according to its attributes as
;;  follows:</p>
;;
;;  <dl>
;;
;;   <dt>If the element's <code
;;   title="attr-marquee-behavior">behavior</code> attribute is in the
;;   <span title="attr-marquee-behavior-scroll">scroll</span> state</dt>
;;
;;   <dd>
;;
;;    <p>Slide the contents of the element in the direction described by
;;    the <code title="attr-marquee-direction">direction</code>
;;    attribute as defined below, such that it begins off the start side
;;    of the <code>marquee</code>, and ends flush with the inner end
;;    side.</p>
;;
;;    <p class="example">For example, if the <code
;;    title="attr-marquee-direction">direction</code> attribute is <span
;;    title="attr-marquee-direction-left">left</span> (the default),
;;    then the contents would start such that their left edge are off
;;    the side of the right edge of the <code>marquee</code>'s content
;;    area, and the contents would then slide up to the point where the
;;    left edge of the contents are flush with the left inner edge of
;;    the <code>marquee</code>'s content area.</p>
;;
;;    <p>Once the animation has ended, the user agent is expected to
;;    <span>increment the marquee current loop index</span>. If the
;;    element is still <span title="concept-marquee-on">turned on</span>
;;    after this, then the user agent is expected to restart the
;;    animation.</p>
;;
;;   </dd>
;;
;;   <dt>If the element's <code
;;   title="attr-marquee-behavior">behavior</code> attribute is in the
;;   <span title="attr-marquee-behavior-slide">slide</span> state</dt>
;;
;;   <dd>
;;
;;    <p>Slide the contents of the element in the direction described by
;;    the <code title="attr-marquee-direction">direction</code>
;;    attribute as defined below, such that it begins off the start side
;;    of the <code>marquee</code>, and ends off the end side of the
;;    <code>marquee</code>.</p>
;;
;;    <p class="example">For example, if the <code
;;    title="attr-marquee-direction">direction</code> attribute is <span
;;    title="attr-marquee-direction-left">left</span> (the default),
;;    then the contents would start such that their left edge are off
;;    the side of the right edge of the <code>marquee</code>'s content
;;    area, and the contents would then slide up to the point where the
;;    <em>right</em> edge of the contents are flush with the left inner
;;    edge of the <code>marquee</code>'s content area.</p>
;;
;;    <p>Once the animation has ended, the user agent is expected to
;;    <span>increment the marquee current loop index</span>. If the
;;    element is still <span title="concept-marquee-on">turned on</span>
;;    after this, then the user agent is expected to restart the
;;    animation.</p>
;;
;;   </dd>
;;
;;   <dt>If the element's <code
;;   title="attr-marquee-behavior">behavior</code> attribute is in the
;;   <span title="attr-marquee-behavior-alternate">alternate</span>
;;   state</dt>
;;
;;   <dd>
;;
;;    <p>When the <span>marquee current loop index</span> is even (or
;;    zero), slide the contents of the element in the direction
;;    described by the <code
;;    title="attr-marquee-direction">direction</code> attribute as
;;    defined below, such that it begins flush with the start side of
;;    the <code>marquee</code>, and ends flush with the end side of the
;;    <code>marquee</code>.</p>
;;
;;    <p>When the <span>marquee current loop index</span> is odd, slide
;;    the contents of the element in the opposite direction than that
;;    described by the <code
;;    title="attr-marquee-direction">direction</code> attribute as
;;    defined below, such that it begins flush with the end side of the
;;    <code>marquee</code>, and ends flush with the start side of the
;;    <code>marquee</code>.</p>
;;
;;    <p class="example">For example, if the <code
;;    title="attr-marquee-direction">direction</code> attribute is <span
;;    title="attr-marquee-direction-left">left</span> (the default),
;;    then the contents would with their right edge flush with the right
;;    inner edge of the <code>marquee</code>'s content area, and the
;;    contents would then slide up to the point where the <em>left</em>
;;    edge of the contents are flush with the left inner edge of the
;;    <code>marquee</code>'s content area.</p>
;;
;;    <p>Once the animation has ended, the user agent is expected to
;;    <span>increment the marquee current loop index</span>. If the
;;    element is still <span title="concept-marquee-on">turned on</span>
;;    after this, then the user agent is expected to continue the
;;    animation.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;  <p>The <code title="attr-marquee-direction">direction</code>
;;  attribute has the meanings described in the following table:</p>
;;
;;  <table>
;;   <thead>
;;    <tr>
;;     <th><code title="attr-marquee-direction">direction</code> attribute state
;;     <th>Direction of animation
;;     <th>Start edge
;;     <th>End edge
;;     <th>Opposite direction
;;   <tbody>
;;    <tr>
;;     <td><span title="attr-marquee-direction-left">left</span>
;;     <td>&larr; Right to left
;;     <td>Right
;;     <td>Left
;;     <td>&rarr; Left to Right
;;    <tr>
;;     <td><span title="attr-marquee-direction-right">right</span>
;;     <td>&rarr; Left to Right
;;     <td>Left
;;     <td>Right
;;     <td>&larr; Right to left
;;    <tr>
;;     <td><span title="attr-marquee-direction-up">up</span>
;;     <td>&uarr; Up (Bottom to Top)
;;     <td>Bottom
;;     <td>Top
;;     <td>&darr; Down (Top to Bottom)
;;    <tr>
;;     <td><span title="attr-marquee-direction-down">down</span>
;;     <td>&darr; Down (Top to Bottom)
;;     <td>Top
;;     <td>Bottom
;;     <td>&uarr; Up (Bottom to Top)
;;  </table>
;;
;;  <p>In any case, the animation should proceed such that there is a
;;  delay given by the <span>marquee scroll interval</span> between each
;;  frame, and such that the content moves at most the distance given by
;;  the <span>marquee scroll distance</span> with each frame.</p>
;;
;;  <p>When a <code>marquee</code> element has a <code
;;  title="attr-marquee-bgcolor">bgcolor</code> attribute set, the value
;;  is expected to be parsed using the <span>rules for parsing a legacy
;;  color value</span>, and if that does not return an error, the user
;;  agent is expected to treat the attribute as a <span
;;  title="presentational hints">presentational hint</span> setting the
;;  element's 'background-color' property to the resulting color.</p>
;;
;;  <p>The <code title="attr-marquee-width">width</code> and <code
;;  title="attr-marquee-height">height</code> attributes on a
;;  <code>marquee</code> element <span title="maps to the dimension
;;  property">map to the dimension properties</span> 'width' and
;;  'height' on the element respectively.</p>
;;
;;  <p>The intrinsic height of a <code>marquee</code> element with its
;;  <code title="attr-marquee-direction">direction</code> attribute in
;;  the <span title="attr-marquee-direction-up">up</span> or <span
;;  title="attr-marquee-direction-down">down</span> states is 200 CSS
;;  pixels.</p>
;;
;;  <p>The <code title="attr-marquee-vspace">vspace</code> attribute of
;;  a <code>marquee</code> element <span title="maps to the dimension
;;  property">maps to the dimension properties</span> 'margin-top' and
;;  'margin-bottom' on the element. The <code
;;  title="attr-marquee-hspace">hspace</code> attribute of a
;;  <code>marquee</code> element <span title="maps to the dimension
;;  property">maps to the dimension properties</span> 'margin-left' and
;;  'margin-right' on the element.</p>
;;
;;  <p>The 'overflow' property on the <code>marquee</code> element is
;;  expected to be ignored; overflow is expected to always be
;;  hidden.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>meter</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;meter { binding: <i title="">meter</i>; }</pre>
;;
;;  <p>When the <i title="">meter</i> binding applies to a
;;  <code>meter</code> element, the element is expected to render as an
;;  'inline-block' box with a 'height' of '1em' and a 'width' of '5em',
;;  a 'vertical-align' of '-0.2em', and with its contents depicting a
;;  gauge.</p>
;;
;;  <p>When the element is wider than it is tall (or square), the
;;  depiction is expected to be of a horizontal gauge, with the minimum
;;  value on the right if the 'direction' property on this element has a
;;  computed value of 'rtl', and on the left otherwise. When the element
;;  is taller than it is wide, it is expected to depict a vertical
;;  gauge, with the minimum value on the bottom.</p>
;;
;;  <p>User agents are expected to use a presentation consistent with
;;  platform conventions for gauges, if any.</p>
;;
;;  <p class="note">Requirements for what must be depicted in the gauge
;;  are included in the definition of the <code>meter</code>
;;  element.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>progress</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;progress { binding: <i title="">progress</i>; }</pre>
;;
;;  <p>When the <i title="">progress</i> binding applies to a
;;  <code>progress</code> element, the element is expected to render as
;;  an 'inline-block' box with a 'height' of '1em' and a 'width' of
;;  '10em', a 'vertical-align' of '-0.2em', and with its contents
;;  depicting a horizontal progress bar, with the start on the right and
;;  the end on the left if the 'direction' property on this element has
;;  a computed value of 'rtl', and with the start on the left and the
;;  end on the right otherwise.</p>
;;
;;  <p>User agents are expected to use a presentation consistent with
;;  platform conventions for progress bars. In particular, user agents
;;  are expected to use different presentations for determinate and
;;  indeterminate progress bars. User agents are also expected to vary
;;  the presentation based on the dimensions of the element.</p>
;;
;;  <p class="example">For example, on some platforms for showing
;;  indeterminate progress there is an asynchronous progress indicator
;;  with square dimensions, which could be used when the element is
;;  square, and an indeterminate progress bar, which could be used when
;;  the element is wide.</p>
;;
;;  <p class="note">Requirements for how to determine if the progress
;;  bar is determinate or indeterminate, and what progress a determinate
;;  progress bar is to show, are included in the definition of the
;;  <code>progress</code> element.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>select</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;select { binding: <i title="">select</i>; }</pre>
;;
;;  <p>When the <i title="">select</i> binding applies to a
;;  <code>select</code> element whose <code
;;  title="attr-select-multiple">multiple</code> attribute is present,
;;  the element is expected to render as a multi-select list box.</p>
;;
;;  <p>When the <i title="">select</i> binding applies to a
;;  <code>select</code> element whose <code
;;  title="attr-select-multiple">multiple</code> attribute is absent,
;;  and the element's <span title="concept-select-size">display
;;  size</span> is greater than 1, the element is expected to render as
;;  a single-select list box.</p>
;;
;;  <p>When the element renders as a list box, it is expected to render
;;  as an 'inline-block' box whose 'height' is the height necessary to
;;  contain as many rows for items as given by the element's <span
;;  title="concept-select-size">display size</span>, or four rows if the
;;  attribute is absent, and whose 'width' is the <span>width of the
;;  <code>select</code>'s labels</span> plus the width of a
;;  scrollbar.</p>
;;
;;  <p>When the <i title="">select</i> binding applies to a
;;  <code>select</code> element whose <code
;;  title="attr-select-multiple">multiple</code> attribute is absent,
;;  and the element's <span title="concept-select-size">display
;;  size</span> is 1, the element is expected to render as a one-line
;;  drop down box whose width is the <span>width of the
;;  <code>select</code>'s labels</span>.</p>
;;
;;  <p>In either case (list box or drop-down box), the element's items
;;  are expected to be the element's <span
;;  title="concept-select-option-list">list of options</span>, with the
;;  element's <code>optgroup</code> element children providing headers
;;  for groups of options where applicable.</p>
;;
;;  <p>The <dfn>width of the <code>select</code>'s labels</dfn> is the
;;  wider of the width necessary to render the widest
;;  <code>optgroup</code>, and the width necessary to render the widest
;;  <code>option</code> element in the element's <span
;;  title="concept-select-option-list">list of options</span> (including
;;  its indent, if any).</p>
;;
;;  <p>An <code>optgroup</code> element is expected to be rendered by
;;  displaying the element's <code
;;  title="attr-optgroup-label">label</code> attribute.</p>
;;
;;  <p>An <code>option</code> element is expected to be rendered by
;;  displaying the element's <code
;;  title="concept-option-label">label</code>, indented under its
;;  <code>optgroup</code> element if it has one.</p>
;;
;;  <p>If a <code>select</code> element contains a <span>placeholder
;;  label option</span>, the user agent is expected to render that
;;  <code>option</code> in a manner that conveys that it is a label,
;;  rather than a valid option of the control. This can include
;;  preventing the <span>placeholder label option</span> from being
;;  explicitly selected by the user. When the <span>placeholder label
;;  option</span>'s <span
;;  title="concept-option-selectedness">selectedness</span> is true, the
;;  control is expected to be displayed in a fashion that indicates that
;;  no valid option is currently selected.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>textarea</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;textarea { binding: <i title="">textarea</i>; white-space: pre-wrap; }</pre>
;;
;;  <p>When the <i title="">textarea</i> binding applies to a
;;  <code>textarea</code> element, the element is expected to render as
;;  an 'inline-block' box rendered as a multiline text field.</p>
;;
;;  <p>If the element has a <code title="attr-textarea-cols">cols</code>
;;  attribute, and parsing that attribute's value using the <span>rules
;;  for parsing non-negative integers</span> doesn't generate an error,
;;  then the user agent is expected to use the attribute as a <span
;;  title="presentational hints">presentational hint</span> for the
;;  'width' property on the element, with the value being the
;;  <span>textarea effective width</span> (as defined below). Otherwise,
;;  the user agent is expected to act as if it had a user-agent-level
;;  style sheet rule setting the 'width' property on the element to the
;;  <span>textarea effective width</span>.</p>
;;
;;  <p>The <dfn>textarea effective width</dfn> of a
;;  <code>textarea</code> element is <span><var
;;  title="">size</var>&times;<var title="">avg</var>&nbsp;+&nbsp;<var
;;  title="">sbw</var></span>, where <var title="">size</var> is the
;;  element's <span title="attr-textarea-cols-value">character
;;  width</span>, <var title="">avg</var> is the average character width
;;  of the primary font of the element, in CSS pixels, and <var
;;  title="">sbw</var> is the width of a scroll bar, in CSS pixels. (The
;;  element's 'letter-spacing' property does not affect the result.)</p>
;;
;;  <p>If the element has a <code title="attr-textarea-rows">rows</code>
;;  attribute, and parsing that attribute's value using the <span>rules
;;  for parsing non-negative integers</span> doesn't generate an error,
;;  then the user agent is expected to use the attribute as a <span
;;  title="presentational hints">presentational hint</span> for the
;;  'height' property on the element, with the value being the
;;  <span>textarea effective height</span> (as defined
;;  below). Otherwise, the user agent is expected to act as if it had a
;;  user-agent-level style sheet rule setting the 'height' property on
;;  the element to the <span>textarea effective height</span>.</p>
;;
;;  <p>The <dfn>textarea effective height</dfn> of a
;;  <code>textarea</code> element is the height in CSS pixels of the
;;  number of lines specified the element's <span
;;  title="attr-textarea-rows-value">character height</span>, plus the
;;  height of a scrollbar in CSS pixels.</p>
;;
;;  <p>User agents are expected to apply the 'white-space' CSS property
;;  to <code>textarea</code> elements. For historical reasons, if the
;;  element has a <code title="attr-textarea-wrap">wrap</code> attribute
;;  whose value is an <span>ASCII case-insensitive</span> match for the
;;  string "<code title="attr-textarea-wrap-off">off</code>", then the
;;  user agent is expected to treat the attribute as a
;;  <span>presentational hint</span> setting the element's 'white-space'
;;  property to 'pre'.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>keygen</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;keygen { binding: <i title="">keygen</i>; }</pre>
;;
;;  <p>When the <i title="">keygen</i> binding applies to a
;;  <code>keygen</code> element, the element is expected to render as an
;;  'inline-block' box containing a user interface to configure the key
;;  pair to be generated.</p>
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h4>The <code>time</code> element</h4>
;;
;;  <pre class="css">@namespace url(http://www.w3.org/1999/xhtml);
;;
;;time[datetime] { binding: <i title="">time</i>; }</pre>
;;
;;  <p>When the <i title="">time</i> binding applies to a
;;  <code>time</code> element, the element is expected to render as if
;;  it contained text conveying the <span
;;  title="concept-time-date">date</span> (if known), <span
;;  title="concept-time-time">time</span> (if known), and <span
;;  title="concept-time-timezone">time-zone offset</span> (if known)
;;  represented by the element, in the fashion most convenient for the
;;  user.</p>
;;
;;  <!-- If none are known then the element would appear empty. -->
;;
;;  </div>
;;
;;
;;
;;  <div class="impl">
;;
;;  <h3>Frames and framesets</h3>
;;
;;  <p>When an <code>html</code> element's second child element is a
;;  <code>frameset</code> element, the user agent is expected to render
;;  the <code>frameset</code> element as described below across the
;;  surface of the viewport, instead of applying the usual CSS rendering
;;  rules.</p>
;;
;;  <p>When rendering a <code>frameset</code> on a surface, the user
;;  agent is expected to use the following layout algorithm:</p>
;;
;;  <ol>
;;
;;   <li>
;;
;;    <p>The <var title="">cols</var> and <var title="">rows</var>
;;    variables are lists of zero or more pairs consisting of a number
;;    and a unit, the unit being one of <i>percentage</i>,
;;    <i>relative</i>, and <i>absolute</i>.</p>
;;
;;    <p>Use the <span>rules for parsing a list of dimensions</span> to
;;    parse the value of the element's <code
;;    title="attr-frameset-cols">cols</code> attribute, if there is
;;    one. Let <var title="">cols</var> be the result, or an empty list
;;    if there is no such attribute.</p>
;;
;;    <p>Use the <span>rules for parsing a list of dimensions</span> to
;;    parse the value of the element's <code
;;    title="attr-frameset-rows">rows</code> attribute, if there is
;;    one. Let <var title="">rows</var> be the result, or an empty list
;;    if there is no such attribute.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>For any of the entries in <var title="">cols</var> or <var
;;    title="">rows</var> that have the number zero and the unit
;;    <i>relative</i>, change the entry's number to one.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If <var title="">cols</var> has no entries, then add a single
;;    entry consisting of the value 1 and the unit <i>relative</i> to
;;    <var title="">cols</var>.</p>
;;
;;    <p>If <var title="">rows</var> has no entries, then add a single
;;    entry consisting of the value 1 and the unit <i>relative</i> to
;;    <var title="">rows</var>.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>Invoke the algorithm defined below to <span>convert a list of
;;    dimensions to a list of pixel values</span> using <var
;;    title="">cols</var> as the input list, and the width of the
;;    surface that the <code>frameset</code> is being rendered into, in
;;    CSS pixels, as the input dimension. Let <var title="">sized
;;    cols</var> be the resulting list.</p>
;;
;;    <p>Invoke the algorithm defined below to <span>convert a list of
;;    dimensions to a list of pixel values</span> using <var
;;    title="">rows</var> as the input list, and the height of the
;;    surface that the <code>frameset</code> is being rendered into, in
;;    CSS pixels, as the input dimension. Let <var title="">sized
;;    rows</var> be the resulting list.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>Split the surface into a grid of <span title=""><var
;;    title="">w</var>&times;<var title="">h</var></span> rectangles,
;;    where <var title="">w</var> is the number of entries in <var
;;    title="">sized cols</var> and <var title="">h</var> is the number
;;    of entries in <var title="">sized rows</var>.</p>
;;
;;    <p>Size the columns so that each column in the grid is as many CSS
;;    pixels wide as the corresponding entry in the <var title="">sized
;;    cols</var> list.</p>
;;
;;    <p>Size the rows so that each row in the grid is as many CSS
;;    pixels high as the corresponding entry in the <var title="">sized
;;    rows</var> list.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>Let <var title="">children</var> be the list of
;;    <code>frame</code> and <code>frameset</code> elements that are
;;    children of the <code>frameset</code> element for which the
;;    algorithm was invoked.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>For each row of the grid of rectangles created in the previous
;;    step, from top to bottom, run these substeps:</p>
;;
;;    <ol>
;;
;;     <li>
;;
;;      <p>For each rectangle in the row, from left to right, run these
;;      substeps:</p>
;;
;;      <ol>
;;
;;       <li>
;;
;;        <p>If there are any elements left in <var
;;        title="">children</var>, take the first element in the list,
;;        and assign it to the rectangle.</p>
;;
;;        <p>If this is a <code>frameset</code> element, then recurse
;;        the entire <code>frameset</code> layout algorithm for that
;;        <code>frameset</code> element, with the rectangle as the
;;        surface.</p>
;;
;;        <p>Otherwise, it is a <code>frame</code> element; create a
;;        <span>nested browsing context</span> sized to fit the
;;        rectangle.</p>
;;
;;       </li>
;;
;;       <li>
;;
;;        <p>If there are any elements left in <var
;;        title="">children</var>, remove the first element from <var
;;        title="">children</var>.</p>
;;
;;      </ol>
;;
;;     </li>
;;
;;    </ol>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If the <code>frameset</code> element <span>has a border</span>,
;;    draw an outer set of borders around the rectangles, using the
;;    element's <span>frame border color</span>.</p>
;;
;;    <p>For each rectangle, if there is an element assigned to that
;;    rectangle, and that element <span>has a border</span>, draw an
;;    inner set of borders around that rectangle, using the
;;    element's <span>frame border color</span>.</p>
;;
;;    <p>For each (visible) border that does not abut a rectangle that
;;    is assigned a <code>frame</code> element with a <code
;;    title="attr-frame-noresize">noresize</code> attribute (including
;;    rectangles in further nested <code>frameset</code> elements), the
;;    user agent is expected to allow the user to move the border,
;;    resizing the rectangles within, keeping the proportions of any
;;    nested <code>frameset</code> grids.</p>
;;
;;    <p>A <code>frameset</code> or <code>frame</code> element <dfn>has
;;    a border</dfn> if the following algorithm returns true:</p>
;;
;;    <ol>
;;
;;     <li><p>If the element has a <code
;;     title="attr-frames-frameborder">frameborder</code> attribute
;;     whose value is not the empty string and whose first character is
;;     either a U+0031 DIGIT ONE (1) character, a U+0079 LATIN SMALL
;;     LETTER Y character (y), or a U+0059 LATIN CAPITAL LETTER Y
;;     character (Y), then return true.</p></li>
;;
;;     <li><p>Otherwise, if the element has a <code
;;     title="attr-frames-frameborder">frameborder</code> attribute,
;;     return false.</p></li>
;;
;;     <li><p>Otherwise, if the element has a parent element that is a
;;     <code>frameset</code> element, then return true if <em>that</em>
;;     element <span>has a border</span>, and false if it does
;;     not.</p></li>
;;
;;     <li><p>Otherwise, return true.</p></li>
;;
;;    </ol>
;;
;;    <p>The <dfn>frame border color</dfn> of a <code>frameset</code> or
;;    <code>frame</code> element is the color obtained from the
;;    following algorithm:</p>
;;
;;    <ol>
;;
;;     <li><p>If the element has a <code
;;     title="attr-frames-bordercolor">bordercolor</code> attribute, and
;;     applying the <span>rules for parsing a legacy color value</span>
;;     to that attribute's value does not result in an error, then
;;     return the color so obtained.</p></li>
;;
;;     <li><p>Otherwise, if the element has a parent element that is a
;;     <code>frameset</code> element, then the <span>frame border
;;     color</span> of that element.</p>
;;
;;     <li><p>Otherwise, return gray.</p></li>
;;
;;    </ol>
;;
;;   </li>
;;
;;  </ol>
;;
;;  <p>The algorithm to <dfn>convert a list of dimensions to a list of
;;  pixel values</dfn> consists of the following steps:</p>
;;
;;  <ol>
;;
;;   <li>
;;
;;    <p>Let <var title="">input list</var> be the list of numbers and
;;    units passed to the algorithm.</p>
;;
;;    <p>Let <var title="">output list</var> be a list of numbers the
;;    same length as <var title="">input list</var>, all zero.</p>
;;
;;    <p>Entries in <var title="">output list</var> correspond to the
;;    entries in <var title="">input list</var> that have the same
;;    position.</p>
;;
;;   </li>
;;
;;   <li><p>Let <var title="">input dimension</var> be the size passed
;;   to the algorithm.</p>
;;
;;   <li>
;;
;;    <p>Let <var title="">count percentage</var> be the number of
;;    entries in <var title="">input list</var> whose unit is
;;    <i>percentage</i>.</p>
;;
;;    <p>Let <var title="">total percentage</var> be the sum of all the
;;    numbers in <var title="">input list</var> whose unit is
;;    <i>percentage</i>.</p>
;;
;;    <p>Let <var title="">count relative</var> be the number of
;;    entries in <var title="">input list</var> whose unit is
;;    <i>relative</i>.</p>
;;
;;    <p>Let <var title="">total relative</var> be the sum of all the
;;    numbers in <var title="">input list</var> whose unit is
;;    <i>relative</i>.</p>
;;
;;    <p>Let <var title="">count absolute</var> be the number of
;;    entries in <var title="">input list</var> whose unit is
;;    <i>absolute</i>.</p>
;;
;;    <p>Let <var title="">total absolute</var> be the sum of all the
;;    numbers in <var title="">input list</var> whose unit is
;;    <i>absolute</i>.</p>
;;
;;    <p>Let <var title="">remaining space</var> be the value of <var
;;    title="">input dimension</var>.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If <var title="">total absolute</var> is greater than <var
;;    title="">remaining space</var>, then for each entry in <var
;;    title="">input list</var> whose unit is <i>absolute</i>, set the
;;    corresponding value in <var title="">output list</var> to the
;;    number of the entry in <var title="">input list</var> multiplied
;;    by <var title="">remaining space</var> and divided by <var
;;    title="">total absolute</var>. Then, set <var title="">remaining
;;    space</var> to zero.</p>
;;
;;    <p>Otherwise, for each entry in <var title="">input list</var>
;;    whose unit is <i>absolute</i>, set the corresponding value in <var
;;    title="">output list</var> to the number of the entry in <var
;;    title="">input list</var>. Then, decrement <var title="">remaining
;;    space</var> by <var title="">total absolute</var>.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>If <var title="">total percentage</var> multiplied by the <var
;;    title="">input dimension</var> and divided by 100 is greater than
;;    <var title="">remaining space</var>, then for each entry in <var
;;    title="">input list</var> whose unit is <i>percentage</i>, set the
;;    corresponding value in <var title="">output list</var> to the
;;    number of the entry in <var title="">input list</var> multiplied
;;    by <var title="">remaining space</var> and divided by <var
;;    title="">total percentage</var>. Then, set <var title="">remaining
;;    space</var> to zero.</p>
;;
;;    <p>Otherwise, for each entry in <var title="">input list</var>
;;    whose unit is <i>percentage</i>, set the corresponding value in
;;    <var title="">output list</var> to the number of the entry in <var
;;    title="">input list</var> multiplied by the <var title="">input
;;    dimension</var> and divided by 100. Then, decrement <var
;;    title="">remaining space</var> by <var title="">total
;;    percentage</var> multiplied by the <var title="">input
;;    dimension</var> and divided by 100.</p>
;;
;;   </li>
;;
;;   <li>
;;
;;    <p>For each entry in <var title="">input list</var> whose unit is
;;    <i>relative</i>, set the corresponding value in <var
;;    title="">output list</var> to the number of the entry in <var
;;    title="">input list</var> multiplied by <var title="">remaining
;;    space</var> and divided by <var title="">total relative</var>.</p>
;;
;;   </li>
;;
;;   <li><p>Return <var title="">output list</var>.</p></li>
;;
;;  </ol>
;;
;;  <p>User agents working with integer values for frame widths (as
;;  opposed to user agents that can lay frames out with subpixel
;;  accuracy) are expected to distribute the remainder first to the last
;;  entry whose unit is <i>relative</i>, then equally (not
;;  proportionally) to each entry whose unit is <i>percentage</i>, then
;;  equally (not proportionally) to each entry whose unit is
;;  <i>absolute</i>, and finally, failing all else, to the last
;;  entry.</p>
;;
;;
;;  </div>
;;
;;
;;  <div class="impl">
;;
;;  <h3>Interactive media</h3>
;;
;;  <h4>Links, forms, and navigation</h4>
;;
;;  <p>User agents are expected to allow the user to control aspects of
;;  <span>hyperlink</span> activation and <span>form submission</span>,
;;  such as which <span>browsing context</span> is to be used for the
;;  subsequent <span title="navigate">navigation</span>.</p>
;;
;;  <p>User agents are expected to allow users to discover the
;;  destination of <span title="hyperlink">hyperlinks</span> and of
;;  <span title="form">forms</span> before triggering their <span
;;  title="navigate">navigation</span>.</p>
;;
;;<!--END w3c-html--><!--PING-->
;;  <p>User agents are expected to inform the user of whether a
;;  <span>hyperlink</span> includes <span>hyperlink auditing</span>, and
;;  to let them know at a minimum which domains will be contacted as
;;  part of such auditing.</p>
;;<!--START w3c-html--><!--PING-->
;;
;;  <p>User agents are expected to allow users to <span>navigate</span>
;;  <span title="browsing context">browsing contexts</span> to the
;;  resources <span title="resolve a url">indicated</span> by the <code
;;  title="">cite</code> attributes on <code>q</code>,
;;  <code>blockquote</code>, <code>section</code>, <code>article</code>,
;;  <code>ins</code>, and <code>del</code> elements.</p>
;;
;;  <p>User agents are expected to surface <span
;;  title="hyperlink">hyperlinks</span> created by <code>link</code>
;;  elements in their user interface.</p>
;;
;;  <p class="note">While <code>link</code> elements that create <span
;;  title="hyperlink">hyperlinks</span> will match the ':link' or
;;  ':visited' pseudo-classes, will react to clicks if visible, and so
;;  forth, this does not extend to any browser interface constructs that
;;  expose those same links. Activating a link through the browser's
;;  interface, rather than in the page itself, does not trigger <code
;;  title="event-click">click</code> events and the like.</p>
;;
;;
;;
;;
;;  <h4>The <code title="attr-title">title</code> attribute</h4>
;;
;;  <p>Given an element (e.g. the element designated by the mouse
;;  cursor), if the element, or one of its ancestors, has a <code
;;  title="attr-title">title</code> attribute, and the nearest such
;;  attribute has a value that is not the empty string, it is expected
;;  that the user agent will expose the contents of that attribute as a
;;  tooltip.</p>
;;
;;  <p>U+000A LINE FEED (LF) characters are expected to cause line
;;  breaks in the tooltip.</p>
;;
;;  <p>User agents are encouraged to make it possible to view tooltips
;;  without the use of a pointing device, since not all users are able
;;  to use pointing devices.</p>
;;
;;  <div class="example">
;;
;;   <p>For example, a visual user agent could make elements with a
;;   <code title="attr-title">title</code> attribute focusable, and
;;   could make any focused element with a <code
;;   title="attr-title">title</code> attribute show its tooltip under
;;   the element while the element has focus. This would allow a user to
;;   tab around the document to find all the advisory text.</p>
;;
;;  </div>
;;
;;  <div class="example">
;;
;;   <p>As another example, a screen reader could provide an audio cue
;;   when reading an element with a tooltip, with an associated key to
;;   read the last tooltip for which a cue was played.</p>
;;
;;  </div>
;;
;;
;;  <h4>Editing hosts</h4>
;;
;;  <p>The current text editing caret (the one at the <span>caret
;;  position</span> in a focused <span>editing host</span>) is expected
;;  to act like an inline replaced element with the vertical dimensions
;;  of the caret and with zero width for the purposes of the CSS
;;  rendering model.</p>
;;
;;  <p class="note">This means that even an empty block can have the
;;  caret inside it, and that when the caret is in such an element, it
;;  prevents margins from collapsing through the element.</p>
;;
;;
;;
;;
;;  <h3>Print media</h3>
;;
;;  <p>User agents are expected to allow the user to request the
;;  opportunity to <dfn>obtain a physical form</dfn> (or a
;;  representation of a physical form) of a <code>Document</code>. For
;;  example, selecting the option to print a page or convert it to PDF
;;  format.</p>
;;
;;  <p>When the user actually <span title="obtain a physical
;;  form">obtains a physical form</span> (or a representation of a
;;  physical form) of a <code>Document</code>, the user agent is
;;  expected to create a new rendering of the <code>Document</code> for
;;  the print media.</p>
;;
;;
;;
;;  </div>
;;
;;
;;
;;  <h2 id="obsolete">Obsolete features</h2>
;;
;;  <h3>Obsolete but conforming features</h3>
;;
;;  <p>Features listed in this section will trigger warnings in
;;  conformance checkers.</p>
;;
;;  <p>Authors should not specify an <code
;;  title="attr-meta-http-equiv">http-equiv</code> attribute in the
;;  <span title="attr-meta-http-equiv-content-language">Content
;;  Language</span> state on a <code>meta</code> element. The <code
;;  title="attr-lang">lang</code> attribute should be used instead.</p>
;;
;;  <p>Authors should not specify a <code
;;  title="attr-img-border">border</code> attribute on an
;;  <code>img</code> element. If the attribute is present, its value
;;  must be the string "<code title="">0</code>". CSS should be used
;;  instead.</p>
;;
;;  <p>Authors should not specify a <code
;;  title="attr-script-language">language</code> attribute on a
;;  <code>script</code> element. If the attribute is present, its value
;;  must be an <span>ASCII case-insensitive</span> match for the string
;;  "<code title="">JavaScript</code>" and either the <code
;;  title="attr-script-type">type</code> attribute must be omitted or
;;  its value must be an <span>ASCII case-insensitive</span> match for
;;  the string "<code title="">text/javascript</code>". The attribute
;;  should be entirely omitted instead (with the value "<code
;;  title="">JavaScript</code>", it has no effect), or replaced with use
;;  of the <code title="attr-script-type">type</code> attribute.</p>
;;
;;  <p>Authors should not specify the <code
;;  title="attr-a-name">name</code> attribute on <code>a</code>
;;  elements. If the attribute is present, its value must not be the
;;  empty string and must neither be equal to the value of any of the
;;  <span title="concept-id">IDs</span> in the element's <span>home
;;  subtree</span> other than the element's own <span
;;  title="concept-id">ID</span>, if any, nor be equal to the value of
;;  any of the other <code title="attr-a-name">name</code> attributes on
;;  <code>a</code> elements in the element's <span>home
;;  subtree</span>. If this attribute is present and the element has an
;;  <span title="concept-id">ID</span>, then the attribute's value must
;;  be equal to the element's <span title="concept-id">ID</span>. In
;;  earlier versions of the language, this attribute was intended as a
;;  way to specify possible targets for fragment identifiers in <span
;;  title="URL">URLs</span>. The <code title="attr-id">id</code>
;;  attribute should be used instead.</p>
;;
;;  <p class="note">In <span>the HTML syntax</span>, specifying a <span
;;  title="syntax-DOCTYPE">DOCTYPE</span> that is an <span>obsolete
;;  permitted DOCTYPE</span> will also trigger a warning.</p>
;;
;;  <p class="note">The <code title="attr-table-summary">summary</code>
;;  attribute, defined in the <code>table</code> section, will also
;;  trigger a warning.</p>
;;
;;
;;  <div class="impl">
;;
;;  <h4>Warnings for obsolete but conforming features</h4>
;;
;;  <p>To ease the transition from HTML4 Transitional documents to the
;;  language defined in <em>this</em> specification, and to discourage
;;  certain features that are only allowed in very few circumstances,
;;  conformance checkers are required to warn the user when the
;;  following features are used in a document. These are generally old
;;  obsolete features that have no effect, and are allowed only to
;;  distinguish between likely mistakes (regular conformance errors) and
;;  mere vestigial markup or unusual and discouraged practices (these
;;  warnings).</p>
;;
;;  <p>The following features must be categorized as described
;;  above:</p>
;;
;;  <ul><!-- downplayed list -->
;;
;;   <li><p>The presence of an <span>obsolete permitted DOCTYPE</span>
;;   in an <span title="HTML documents">HTML document</span>.</p></li>
;;
;;   <li><p>The presence of a <code>meta</code> element with an <code
;;   title="attr-meta-http-equiv">http-equiv</code> attribute in the
;;   <span title="attr-meta-http-equiv-content-language">Content
;;   Language</span> state.</p></li>
;;
;;   <li><p>The presence of a <code
;;   title="attr-img-border">border</code> attribute on an
;;   <code>img</code> element if its value is the string "<code
;;   title="">0</code>".</p></li>
;;
;;   <li><p>The presence of a <code
;;   title="attr-script-language">language</code> attribute on a
;;   <code>script</code> element if its value is an <span>ASCII
;;   case-insensitive</span> match for the string "<code
;;   title="">JavaScript</code>" and if there is no <code
;;   title="attr-script-type">type</code> attribute or there is and its
;;   value is an <span>ASCII case-insensitive</span> match for the
;;   string "<code title="">text/javascript</code>".</p></li>
;;
;;   <li><p>The presence of a <code title="attr-a-name">name</code>
;;   attribute on an <code>a</code> element, if its value is not the
;;   empty string.</p></li>
;;
;;   <li><p>The presence of a <code
;;   title="attr-table-summary">summary</code> attribute on a
;;   <code>table</code> element.</p></li> <!-- 2.65% pages -->
;;
;;  </ul>
;;
;;  <p>Conformance checkers must distinguish between pages that have no
;;  conformance errors and have none of these obsolete features, and
;;  pages that have no conformance errors but do have some of these
;;  obsolete features.</p>
;;
;;  <p class="example">For example, a validator could report some pages
;;  as "Valid HTML" and others as "Valid HTML with warnings".</p>
;;
;;  </div>
;;
;;
;;  <h3>Non-conforming features</h3>
;;
;;  <p>Elements in the following list are entirely obsolete, and must
;;  not be used by authors:</p>
;;
;;  <dl><!-- alphabetical by first element in the group, except CSS goes last -->
;;
;;   <dt><code>applet</code></dt>
;;   <dd><p>Use <code>embed</code> or <code>object</code> instead.</p></dd>
;;
;;   <dt><dfn><code>acronym</code></dfn></dt>
;;   <dd><p>Use <code>abbr</code> instead.</p></dd>
;;
;;   <dt><dfn><code>bgsound</code></dfn></dt>
;;   <dd><p>Use <code>audio</code> instead.</p></dd>
;;
;;   <dt><dfn><code>dir</code></dfn></dt>
;;   <dd><p>Use <code>ul</code> instead.</p></dd>
;;
;;   <dt><code>frame</code></dt>
;;   <dt><code>frameset</code></dt>
;;   <dt><dfn><code>noframes</code></dfn></dt>
;;   <dd><p>Either use <code>iframe</code> and CSS instead, or use server-side includes to generate complete pages with the various invariant parts merged in.</p></dd>
;;
;;   <dt><dfn><code>isindex</code></dfn></dt>
;;   <dd><p>Use an explicit <code>form</code> and <span title="attr-input-type-text">text field</span> combination instead.</p></dd>
;;
;;   <dt><dfn><code>listing</code></dfn></dt>
;;   <dt><dfn><code>xmp</code></dfn></dt>
;;   <dd><p>Use <code>pre</code> and <code>code</code> instead.</p></dd>
;;
;;   <dt><dfn><code>nextid</code></dfn></dt>
;;   <dd><p>Use GUIDs instead.</p></dd>
;;
;;   <dt><dfn><code>noembed</code></dfn></dt>
;;   <dd><p>Use <code>object</code> instead of <code>embed</code> when fallback is necessary.</p></dd>
;;
;;   <dt><dfn><code>plaintext</code></dfn></dt>
;;   <dd><p>Use the "<code>text/plain</code>" <span>MIME type</span> instead.</p></dd>
;;
;;   <dt><dfn><code>rb</code></dfn></dt>
;;   <dd><p>Providing the ruby base directly inside the <code>ruby</code> element is sufficient; the <code>rb</code> element is unnecessary. Omit it altogether.</p></dd>
;;
;;   <dt><dfn><code>basefont</code></dfn></dt>
;;   <dt><dfn><code>big</code></dfn></dt>
;;   <dt><dfn><code>blink</code></dfn></dt>
;;   <dt><dfn><code>center</code></dfn></dt>
;;   <dt><dfn><code>font</code></dfn></dt>
;;   <dt><code>marquee</code></dt>
;;   <dt><dfn><code>multicol</code></dfn></dt>
;;   <dt><dfn><code>nobr</code></dfn></dt>
;;   <dt><dfn><code>s</code></dfn></dt>
;;   <dt><dfn><code>spacer</code></dfn></dt>
;;   <dt><dfn><code>strike</code></dfn></dt>
;;   <dt><dfn><code>tt</code></dfn></dt>
;;   <dt><dfn><code>u</code></dfn></dt>
;;
;;   <dd>
;;
;;    <p>Use appropriate elements and/or CSS instead.</p>
;;
;;    <p>For the <code>s</code> and <code>strike</code> elements, if
;;    they are marking up a removal from the element, consider using the
;;    <code>del</code> element instead.</p>
;;
;;    <p>Where the <code>tt</code> element would have been used for
;;    marking up keyboard input, consider the <code>kbd</code> element;
;;    for variables, consider the <code>var</code> element; for computer
;;    code, consider the <code>code</code> element; and for computer
;;    output, consider the <code>samp</code> element.</p>
;;
;;    <p>Similarly, if the <code>u</code> element is being used to
;;    indicate emphasis, consider using the <code>em</code> element; if
;;    it is being used for marking up keywords, consider the
;;    <code>b</code> element; and if it is being used for highlighting
;;    text for reference purposes, consider the <code>mark</code>
;;    element.</p>
;;
;;    <p>See also the <a href="#usage-summary">text-level semantics
;;    usage summary</a> for more suggestions with examples.</p>
;;
;;   </dd>
;;
;;  </dl>
;;
;;  <hr>
;;
;;  <p>The following attributes are obsolete (though the elements are
;;  still part of the language), and must not be used by authors:</p>
;;
;;  <dl><!-- alphabetical by element then attribute of first item in group, except CSS goes last -->
;;
;;   <dt><dfn title="attr-a-charset"><code>charset</code></dfn> on <code>a</code> elements</dt>
;;   <dt><dfn title="attr-link-charset"><code>charset</code></dfn> on <code>link</code> elements</dt>
;;   <dd><p>Use an HTTP Content-Type header on the linked resource instead.</p></dd>
;;
;;   <dt><dfn title="attr-a-coords"><code>coords</code></dfn> on <code>a</code> elements</dt>
;;   <dt><dfn title="attr-a-shape"><code>shape</code></dfn> on <code>a</code> elements</dt>
;;   <dd><p>Use <code>area</code> instead of <code>a</code> for image maps.</p></dd>
;;
;;   <dt><dfn title="attr-a-methods"><code>methods</code></dfn> on <code>a</code> elements</dt>
;;   <dt><dfn title="attr-link-methods"><code>methods</code></dfn> on <code>link</code> elements</dt>
;;   <dd><p>Use the HTTP OPTIONS feature instead.</p></dd>
;;
;;   <dt><dfn title="attr-a-name"><code>name</code></dfn> on <code>a</code> elements (except as noted in the previous section)</dt>
;;   <dt><dfn title="attr-embed-name"><code>name</code></dfn> on <code>embed</code> elements</dt>
;;   <dt><dfn title="attr-img-name"><code>name</code></dfn> on <code>img</code> elements</dt>
;;   <dt><dfn title="attr-option-name"><code>name</code></dfn> on <code>option</code> elements</dt>
;;   <dd><p>Use the <code title="attr-id">id</code> attribute instead.</p></dd>
;;
;;   <dt><dfn title="attr-a-rev"><code>rev</code></dfn> on <code>a</code> elements</dt>
;;   <dt><dfn title="attr-link-rev"><code>rev</code></dfn> on <code>link</code> elements</dt>
;;   <dd><p>Use the <code title="attr-hyperlink-rel">rel</code>
;;   attribute instead, with an opposite term. (For example, instead of
;;   <code title="">rev="made"</code>, use <code
;;   title="">rel="author"</code>.)</p></dd>
;;
;;   <dt><dfn title="attr-a-urn"><code>urn</code></dfn> on <code>a</code> elements</dt>
;;   <dt><dfn title="attr-link-urn"><code>urn</code></dfn> on <code>link</code> elements</dt>
;;   <dd><p>Specify the preferred persistent identifier using the <code title="attr-hyperlink-href">href</code> attribute instead.</p></dd>
;;
;;   <dt><dfn title="attr-area-nohref"><code>nohref</code></dfn> on <code>area</code> elements</dt>
;;   <dd><p>Omitting the <code title="attr-hyperlink-href">href</code>
;;   attribute is sufficient; the <code
;;   title="attr-area-nohref">nohref</code> attribute is
;;   unnecessary. Omit it altogether.</p></dd>
;;
;;   <dt><dfn title="attr-head-profile"><code>profile</code></dfn> on <code>head</code> elements</dt>
;;   <dd><p>When used for declaring which <code>meta</code> terms are
;;   used in the document, unnecessary; omit it altogether, and <span
;;   title="concept-meta-extensions">register the names</span>.</p></dd>
;;   <dd><p>When used for triggering specific user agent behaviors: use
;;   a <code>link</code> element instead.</p></dd>
;;
;;   <dt><dfn title="attr-html-version"><code>version</code></dfn> on <code>html</code> elements</dt>
;;   <dd><p>Unnecessary. Omit it altogether.</p></dd>
;;
;;   <dt><dfn title="attr-input-usemap"><code>usemap</code></dfn> on <code>input</code> elements</dt>
;;   <dd><p>Use <code>img</code> instead of <code>input</code> for image maps.</p></dd>
;;
;;   <dt><dfn title="attr-iframe-longdesc"><code>longdesc</code></dfn> on <code>iframe</code> elements</dt>
;;   <dt><dfn title="attr-img-longdesc"><code>longdesc</code></dfn> on <code>img</code> elements</dt>
;;   <dd><p>Use a regular <code>a</code> element to link to the description.</p></dd>
;;
;;   <dt><dfn title="attr-link-target"><code>target</code></dfn> on <code>link</code> elements</dt>
;;   <dd><p>Unnecessary. Omit it altogether.</p></dd>
;;
;;   <dt><dfn title="attr-meta-scheme"><code>scheme</code></dfn> on <code>meta</code> elements</dt>
;;   <dd><p>Use only one scheme per field, or make the scheme declaration part of the value.</p></dd>
;;
;;   <dt><dfn title="attr-object-archive"><code>archive</code></dfn> on <code>object</code> elements</dt>
;;   <dt><dfn title="attr-object-classid"><code>classid</code></dfn> on <code>object</code> elements</dt>
;;   <dt><dfn title="attr-object-code"><code>code</code></dfn> on <code>object</code> elements</dt>
;;   <dt><dfn title="attr-object-codebase"><code>codebase</code></dfn> on <code>object</code> elements</dt>
;;   <dt><dfn title="attr-object-codetype"><code>codetype</code></dfn> on <code>object</code> elements</dt>
;;   <dd><p>Use the <code title="attr-object-data">data</code> and <code
;;   title="attr-object-type">type</code> attributes to invoke <span
;;   title="plugin">plugins</span>. To set parameters with these names
;;   in particular, the <code>param</code> element can be used.</p></dd>
;;
;;   <dt><dfn title="attr-object-declare"><code>declare</code></dfn> on <code>object</code> elements</dt>
;;   <dd><p>Repeat the <code>object</code> element completely each time the resource is to be reused.</p></dd>
;;
;;   <dt><dfn title="attr-object-standby"><code>standby</code></dfn> on <code>object</code> elements</dt>
;;   <dd><p>Optimize the linked resource so that it loads quickly or, at least, incrementally.</p></dd>
;;
;;   <dt><dfn title="attr-param-type"><code>type</code></dfn> on <code>param</code> elements</dt>
;;   <dt><dfn title="attr-param-valuetype"><code>valuetype</code></dfn> on <code>param</code> elements</dt>
;;   <dd><p>Use the <code title="attr-param-name">name</code> and <code
;;   title="attr-param-value">value</code> attributes without declaring
;;   value types.</p></dd>
;;
;;   <dt><dfn title="attr-script-language"><code>language</code></dfn> on <code>script</code> elements (except as noted in the previous section)</dt>
;;   <dd><p>Use the <code title="attr-script-type">type</code> attribute
;;   instead.</p></dd>
;;
;;   <dt><dfn title="attr-script-event"><code>event</code></dfn> on <code>script</code> elements</dt>
;;   <dt><dfn title="attr-script-for"><code>for</code></dfn> on <code>script</code> elements</dt>
;;   <dd><p>Use DOM Events mechanisms to register event listeners. <a href="#refsDOMEVENTS">[DOMEVENTS]</a></p></dd>
;;
;;   <dt><dfn title="attr-table-datapagesize"><code>datapagesize</code></dfn> on <code>table</code> elements</dt>
;;   <dd><p>Unnecessary. Omit it altogether.</p></dd>
;;
;;   <dt><dfn title="attr-tdth-abbr"><code>abbr</code></dfn> on <code>td</code> and <code>th</code> elements</dt>
;;   <dd><p>Use text that begins in an unambiguous and terse manner, and include any more elaborate text after that. The <code title="attr-title">title</code> attribute can also be useful in including more detailed text, so that the cell's contents can be made terse.</p>
;;
;;   <dt><dfn title="attr-tdth-axis"><code>axis</code></dfn> on <code>td</code> and <code>th</code> elements</dt>
;;   <dd><p>Use the <code title="attr-th-scope">scope</code> attribute on the relevant <code>th</code>.</p>
;;
;;   <dt><dfn title="attr-datasrc"><code>datasrc</code></dfn> on <code>a</code>, <code>applet</code>, <code>button</code>, <code>div</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, <code>table</code>, and <code>textarea</code> elements</dt>
;;   <dt><dfn title="attr-datafld"><code>datafld</code></dfn> on <code>a</code>, <code>applet</code>, <code>button</code>, <code>div</code>, <code>fieldset</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>, <code>param</code>, <code>select</code>, <code>span</code>, and <code>textarea</code> elements</dt>
;;   <dt><dfn title="attr-dataformatas"><code>dataformatas</code></dfn> on <code>button</code>, <code>div</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, <code>table</code></dt>
;;   <dd><p>Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page dynamically. <a href="#refsXHR">[XHR]</a></p></dd>
;;
;;   <dt><dfn title="attr-body-alink"><code>alink</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-body-bgcolor"><code>bgcolor</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-body-link"><code>link</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-body-marginbottom"><code>marginbottom</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-body-marginheight"><code>marginheight</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-body-marginleft"><code>marginleft</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-body-marginright"><code>marginright</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-body-margintop"><code>margintop</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-body-marginwidth"><code>marginwidth</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-body-text"><code>text</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-body-vlink"><code>vlink</code></dfn> on <code>body</code> elements</dt>
;;   <dt><dfn title="attr-br-clear"><code>clear</code></dfn> on <code>br</code> elements</dt>
;;   <dt><dfn title="attr-caption-align"><code>align</code></dfn> on <code>caption</code> elements</dt>
;;   <dt><dfn title="attr-col-align"><code>align</code></dfn> on <code>col</code> elements</dt>
;;   <dt><dfn title="attr-col-char"><code>char</code></dfn> on <code>col</code> elements</dt>
;;   <dt><dfn title="attr-col-charoff"><code>charoff</code></dfn> on <code>col</code> elements</dt>
;;   <dt><dfn title="attr-col-valign"><code>valign</code></dfn> on <code>col</code> elements</dt>
;;   <dt><dfn title="attr-col-width"><code>width</code></dfn> on <code>col</code> elements</dt>
;;   <dt><dfn title="attr-div-align"><code>align</code></dfn> on <code>div</code> elements</dt>
;;   <dt><dfn title="attr-dl-compact"><code>compact</code></dfn> on <code>dl</code> elements</dt>
;;   <dt><dfn title="attr-embed-align"><code>align</code></dfn> on <code>embed</code> elements</dt>
;;   <dt><dfn title="attr-embed-hspace"><code>hspace</code></dfn> on <code>embed</code> elements</dt>
;;   <dt><dfn title="attr-embed-vspace"><code>vspace</code></dfn> on <code>embed</code> elements</dt>
;;   <dt><dfn title="attr-hr-align"><code>align</code></dfn> on <code>hr</code> elements</dt>
;;   <dt><dfn title="attr-hr-color"><code>color</code></dfn> on <code>hr</code> elements</dt>
;;   <dt><dfn title="attr-hr-noshade"><code>noshade</code></dfn> on <code>hr</code> elements</dt>
;;   <dt><dfn title="attr-hr-size"><code>size</code></dfn> on <code>hr</code> elements</dt>
;;   <dt><dfn title="attr-hr-width"><code>width</code></dfn> on <code>hr</code> elements</dt>
;;   <dt><dfn title="attr-hx-align"><code>align</code></dfn> on <code>h1</code>&mdash;<code>h6</code> elements</dt>
;;   <dt><dfn title="attr-iframe-align"><code>align</code></dfn> on <code>iframe</code> elements</dt>
;;   <dt><dfn title="attr-iframe-allowtransparency"><code>allowtransparency</code></dfn> on <code>iframe</code> elements</dt>
;;   <dt><dfn title="attr-iframe-frameborder"><code>frameborder</code></dfn> on <code>iframe</code> elements</dt>
;;   <dt><dfn title="attr-iframe-hspace"><code>hspace</code></dfn> on <code>iframe</code> elements</dt>
;;   <dt><dfn title="attr-iframe-marginheight"><code>marginheight</code></dfn> on <code>iframe</code> elements</dt>
;;   <dt><dfn title="attr-iframe-marginwidth"><code>marginwidth</code></dfn> on <code>iframe</code> elements</dt>
;;   <dt><dfn title="attr-iframe-scrolling"><code>scrolling</code></dfn> on <code>iframe</code> elements</dt>
;;   <dt><dfn title="attr-iframe-vspace"><code>vspace</code></dfn> on <code>iframe</code> elements</dt>
;;   <dt><dfn title="attr-input-align"><code>align</code></dfn> on <code>input</code> elements</dt>
;;   <dt><dfn title="attr-input-hspace"><code>hspace</code></dfn> on <code>input</code> elements</dt>
;;   <dt><dfn title="attr-input-vspace"><code>vspace</code></dfn> on <code>input</code> elements</dt>
;;   <dt><dfn title="attr-img-align"><code>align</code></dfn> on <code>img</code> elements</dt>
;;   <dt><dfn title="attr-img-border"><code>border</code></dfn> on <code>img</code> elements (except as noted in the previous section)</dt>
;;   <dt><dfn title="attr-img-hspace"><code>hspace</code></dfn> on <code>img</code> elements</dt>
;;   <dt><dfn title="attr-img-vspace"><code>vspace</code></dfn> on <code>img</code> elements</dt>
;;   <dt><dfn title="attr-legend-align"><code>align</code></dfn> on <code>legend</code> elements</dt>
;;   <dt><dfn title="attr-li-type"><code>type</code></dfn> on <code>li</code> elements</dt>
;;   <dt><dfn title="attr-menu-compact"><code>compact</code></dfn> on <code>menu</code> elements</dt>
;;   <dt><dfn title="attr-object-align"><code>align</code></dfn> on <code>object</code> elements</dt>
;;   <dt><dfn title="attr-object-border"><code>border</code></dfn> on <code>object</code> elements</dt>
;;   <dt><dfn title="attr-object-hspace"><code>hspace</code></dfn> on <code>object</code> elements</dt>
;;   <dt><dfn title="attr-object-vspace"><code>vspace</code></dfn> on <code>object</code> elements</dt>
;;   <dt><dfn title="attr-ol-compact"><code>compact</code></dfn> on <code>ol</code> elements</dt>
;;   <dt><dfn title="attr-ol-type"><code>type</code></dfn> on <code>ol</code> elements</dt>
;;   <dt><dfn title="attr-p-align"><code>align</code></dfn> on <code>p</code> elements</dt>
;;   <dt><dfn title="attr-pre-width"><code>width</code></dfn> on <code>pre</code> elements</dt>
;;   <dt><dfn title="attr-table-align"><code>align</code></dfn> on <code>table</code> elements</dt>
;;   <dt><dfn title="attr-table-bgcolor"><code>bgcolor</code></dfn> on <code>table</code> elements</dt>
;;   <dt><dfn title="attr-table-border"><code>border</code></dfn> on <code>table</code> elements</dt>
;;   <dt><dfn title="attr-table-cellpadding"><code>cellpadding</code></dfn> on <code>table</code> elements</dt>
;;   <dt><dfn title="attr-table-cellspacing"><code>cellspacing</code></dfn> on <code>table</code> elements</dt>
;;   <dt><dfn title="attr-table-frame"><code>frame</code></dfn> on <code>table</code> elements</dt>
;;   <dt><dfn title="attr-table-rules"><code>rules</code></dfn> on <code>table</code> elements</dt>
;;   <dt><dfn title="attr-table-width"><code>width</code></dfn> on <code>table</code> elements</dt>
;;   <dt><dfn title="attr-tbody-align"><code>align</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code> elements</dt>
;;   <dt><dfn title="attr-tbody-char"><code>char</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code> elements</dt>
;;   <dt><dfn title="attr-tbody-charoff"><code>charoff</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code> elements</dt>
;;   <dt><dfn title="attr-tbody-vAlign"><code>valign</code></dfn> on <code>tbody</code>, <code>thead</code>, and <code>tfoot</code> elements</dt>
;;   <dt><dfn title="attr-tdth-align"><code>align</code></dfn> on <code>td</code> and <code>th</code> elements</dt>
;;   <dt><dfn title="attr-tdth-bgcolor"><code>bgcolor</code></dfn> on <code>td</code> and <code>th</code> elements</dt>
;;   <dt><dfn title="attr-tdth-char"><code>char</code></dfn> on <code>td</code> and <code>th</code> elements</dt>
;;   <dt><dfn title="attr-tdth-charoff"><code>charoff</code></dfn> on <code>td</code> and <code>th</code> elements</dt>
;;   <dt><dfn title="attr-tdth-height"><code>height</code></dfn> on <code>td</code> and <code>th</code> elements</dt>
;;   <dt><dfn title="attr-tdth-nowrap"><code>nowrap</code></dfn> on <code>td</code> and <code>th</code> elements</dt>
;;   <dt><dfn title="attr-tdth-valign"><code>valign</code></dfn> on <code>td</code> and <code>th</code> elements</dt>
;;   <dt><dfn title="attr-tdth-width"><code>width</code></dfn> on <code>td</code> and <code>th</code> elements</dt>
;;   <dt><dfn title="attr-tr-align"><code>align</code></dfn> on <code>tr</code> elements</dt>
;;   <dt><dfn title="attr-tr-bgcolor"><code>bgcolor</code></dfn> on <code>tr</code> elements</dt>
;;   <dt><dfn title="attr-tr-char"><code>char</code></dfn> on <code>tr</code> elements</dt>
;;   <dt><dfn title="attr-tr-charoff"><code>charoff</code></dfn> on <code>tr</code> elements</dt>
;;   <dt><dfn title="attr-tr-valign"><code>valign</code></dfn> on <code>tr</code> elements</dt>
;;   <dt><dfn title="attr-ul-compact"><code>compact</code></dfn> on <code>ul</code> elements</dt>
;;   <dt><dfn title="attr-ul-type"><code>type</code></dfn> on <code>ul</code> elements</dt>
;;   <dt><dfn title="attr-background"><code>background</code></dfn> on <code>body</code>, <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>, and <code>th</code> elements</dt>
;;   <dd><p>Use CSS instead.</p></dd>
;;
;;  </dl>
;;
;;
;;  <div class="impl">
;;
;;  <h3>Requirements for implementations</h3>
;;
;;  <h4>The <dfn><code>applet</code></dfn> element</h4>
;;
;;  <p>The <code>applet</code> element is a Java-specific variant of the
;;  <code>embed</code> element. The <code>applet</code> element is now
;;  obsoleted so that all extension frameworks (Java, .NET, Flash, etc)
;;  are handled in a consistent manner.</p>
;;
;;  <p id="sandboxPluginApplet">When the element is still in the
;;  <span>stack of open elements</span> of an <span>HTML parser</span>
;;  or <span>XML parser</span>, and when the element is not <span>in a
;;  <code>Document</code></span>, and when the element's document is not
;;  <span>fully active</span>, and when the element's
;;  <code>Document</code>'s <span>browsing context</span> had its
;;  <span>sandboxed plugins browsing context flag</span> when that
;;  <code>Document</code> was created, and when the element's
;;  <code>Document</code> was parsed from a resource whose <span
;;  title="Content-Type sniffing">sniffed type</span> as determined
;;  during <span title="navigate">navigation</span> is
;;  <code>text/html-sandboxed</code>, and when the element has an
;;  ancestor <span>media element</span>, and when the element has an
;;  ancestor <code>object</code> element that is <em>not</em> showing
;;  its <span>fallback content</span>, and when no Java Language runtime
;;  <span>plugin</span> is available, and when one <em>is</em> available
;;  but it is disabled, the element <span>represents</span> its
;;  contents.</p>
;;
;;  <p>Otherwise, the user agent should instantiate a Java Language
;;  runtime <span>plugin</span>, and should pass the names and values of
;;  all the attributes on the element, in the order they were added to
;;  the element, with the attributes added by the parser being ordered
;;  in source order, and then a parameter named "PARAM" whose value is
;;  null, and then all the names and values of <span
;;  title="concept-param-parameter">parameters</span> given by
;;  <code>param</code> elements that are children of the
;;  <code>applet</code> element, in <span>tree order</span>, to the
;;  <span>plugin</span> used. If the <span>plugin</span> supports a
;;  scriptable interface, the <code>HTMLAppletElement</code> object
;;  representing the element should expose that interface. The
;;  <code>applet</code> element <span>represents</span> the
;;  <span>plugin</span>.</p>
;;
;;  <!-- If we ever make this fetch anything manually, remember to delay
;;  the load event, and to include ", from the element's <span>browsing
;;  context scope origin</span> if it has one" when fetching -->
;;
;;  <p class="note">The <code>applet</code> element is unaffected by the
;;  CSS 'display' property. The Java Language runtime is instantiated
;;  even if the element is hidden with a 'display:none' CSS style.</p>
;;
;;  <p>The <code>applet</code> element must implement the
;;  <code>HTMLAppletElement</code> interface.</p>
;;
;;  <pre class="idl">interface <dfn>HTMLAppletElement</dfn> : <span>HTMLElement</span> {
;;           attribute DOMString <span title="dom-applet-align">align</span>;
;;           attribute DOMString <span title="dom-applet-alt">alt</span>;
;;           attribute DOMString <span title="dom-applet-archive">archive</span>;
;;           attribute DOMString <span title="dom-applet-code">code</span>;
;;           attribute DOMString <span title="dom-applet-codeBase">codeBase</span>;
;;           attribute DOMString <span title="dom-applet-height">height</span>;
;;           attribute unsigned long <span title="dom-applet-hspace">hspace</span>;
;;           attribute DOMString <span title="dom-applet-name">name</span>;
;;           attribute DOMString _<span title="dom-applet-object">object</span>; // the underscore is not part of the identifier <!-- it's a Web IDL escaping mechanism -->
;;           attribute unsigned long <span title="dom-applet-vspace">vspace</span>;
;;           attribute DOMString <span title="dom-applet-width">width</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-applet-align"><code>align</code></dfn>, <dfn
;;  title="dom-applet-alt"><code>alt</code></dfn>, <dfn
;;  title="dom-applet-archive"><code>archive</code></dfn>, <dfn
;;  title="dom-applet-code"><code>code</code></dfn>, <dfn
;;  title="dom-applet-height"><code>height</code></dfn>, <dfn
;;  title="dom-applet-hspace"><code>hspace</code></dfn>, <dfn
;;  title="dom-applet-name"><code>name</code></dfn>, <dfn
;;  title="dom-applet-object"><code>object</code></dfn>, <dfn
;;  title="dom-applet-vspace"><code>vspace</code></dfn>, and <dfn
;;  title="dom-applet-width"><code>width</code></dfn> IDL attributes
;;  must <span>reflect</span> the respective content attributes of the
;;  same name.</p>
;;
;;  <p>The <dfn title="dom-applet-codeBase"><code>codeBase</code></dfn>
;;  IDL attribute must <span>reflect</span> the <code
;;  title="attr-applet-codebase">codebase</code> content attribute.</p>
;;
;;
;;  <h4>The <dfn><code>marquee</code></dfn> element</h4>
;;
;;  <p>The <code>marquee</code> element is a presentational element that
;;  animates content. CSS transitions and animations are a more
;;  appropriate mechanism.</p>
;;
;;  <p>The <span>task source</span> for tasks mentioned in this section
;;  is the <span>DOM manipulation task source</span>.</p>
;;
;;  <p>The <code>marquee</code> element must implement the
;;  <code>HTMLMarqueeElement</code> interface.</p>
;;
;;  <pre class="idl">interface <dfn>HTMLMarqueeElement</dfn> : <span>HTMLElement</span> {
;;           attribute DOMString <span title="dom-marquee-behavior">behavior</span>;
;;           attribute DOMString <span title="dom-marquee-bgColor">bgColor</span>;
;;           attribute DOMString <span title="dom-marquee-direction">direction</span>;
;;           attribute DOMString <span title="dom-marquee-height">height</span>;
;;           attribute unsigned long <span title="dom-marquee-hspace">hspace</span>;
;;           attribute long <span title="dom-marquee-loop">loop</span>;
;;           attribute unsigned long <span title="dom-marquee-scrollamount">scrollAmount</span>;
;;           attribute unsigned long <span title="dom-marquee-scrollDelay">scrollDelay</span>;
;;           attribute boolean <span title="dom-marquee-trueSpeed">trueSpeed</span>;
;;           attribute unsigned long <span title="dom-marquee-vspace">vspace</span>;
;;           attribute DOMString <span title="dom-marquee-width">width</span>;
;;
;;           attribute <span>Function</span> <span title="handler-marquee-onbounce">onbounce</span>;
;;           attribute <span>Function</span> <span title="handler-marquee-onfinish">onfinish</span>;
;;           attribute <span>Function</span> <span title="handler-marquee-onstart">onstart</span>;
;;
;;  void <span title="dom-marquee-start">start</span>();
;;  void <span title="dom-marquee-stop">stop</span>();
;;};</pre>
;;
;;  <p>A <code>marquee</code> element can be <dfn
;;  title="concept-marquee-on">turned on</dfn> or <dfn
;;  title="concept-marquee-off">turned off</dfn>. When it is created, it
;;  is <span title="concept-marquee-on">turned on</span>.</p>
;;
;;  <p>When the <dfn
;;  title="dom-marquee-start"><code>start()</code></dfn> method is
;;  called, the <code>marquee</code> element must be <span
;;  title="concept-marquee-on">turned on</span>.</p>
;;
;;  <p>When the <dfn title="dom-marquee-stop"><code>stop()</code></dfn>
;;  method is called, the <code>marquee</code> element must be <span
;;  title="concept-marquee-off">turned off</span>.</p>
;;
;;  <p>When a <code>marquee</code> element is created, the user agent
;;  must <span>queue a task</span> to <span>fire a simple event</span>
;;  named <code title="event-start">start</code> at the element.</p>
;;
;;  <hr>
;;
;;  <p>The <dfn
;;  title="attr-marquee-behavior"><code>behavior</code></dfn> content
;;  attribute on <code>marquee</code> elements is an <span>enumerated
;;  attribute</span> with the following keywords (all
;;  non-conforming):</p>
;;
;;  <table>
;;   <thead>
;;    <tr>
;;     <th>Keyword
;;     <th>State
;;   <tbody>
;;    <tr>
;;     <td><code title="">scroll</code>
;;     <td><dfn title="attr-marquee-behavior-scroll">scroll</dfn>
;;    <tr>
;;     <td><code title="">slide</code>
;;     <td><dfn title="attr-marquee-behavior-slide">slide</dfn>
;;    <tr>
;;     <td><code title="">alternate</code>
;;     <td><dfn title="attr-marquee-behavior-alternate">alternate</dfn>
;;  </table>
;;
;;  <p>The <i>missing value default</i> is the <span
;;  title="attr-marquee-behavior-scroll">scroll</span> state.</p>
;;
;;  <hr>
;;
;;  <p>The <dfn
;;  title="attr-marquee-direction"><code>direction</code></dfn> content
;;  attribute on <code>marquee</code> elements is an <span>enumerated
;;  attribute</span> with the following keywords (all
;;  non-conforming):</p>
;;
;;  <table>
;;   <thead>
;;    <tr>
;;     <th>Keyword
;;     <th>State
;;   <tbody>
;;    <tr>
;;     <td><code title="">left</code>
;;     <td><dfn title="attr-marquee-direction-left">left</dfn>
;;    <tr>
;;     <td><code title="">right</code>
;;     <td><dfn title="attr-marquee-direction-right">right</dfn>
;;    <tr>
;;     <td><code title="">up</code>
;;     <td><dfn title="attr-marquee-direction-up">up</dfn>
;;    <tr>
;;     <td><code title="">down</code>
;;     <td><dfn title="attr-marquee-direction-down">down</dfn>
;;  </table>
;;
;;  <p>The <i>missing value default</i> is the <span
;;  title="attr-marquee-direction-left">left</span> state.</p>
;;
;;  <hr>
;;
;;  <p>The <dfn
;;  title="attr-marquee-truespeed"><code>truespeed</code></dfn> content
;;  attribute on <code>marquee</code> elements is a <span>boolean
;;  attribute</span>.</p>
;;
;;  <hr>
;;
;;  <p>A <code>marquee</code> element has a <dfn>marquee scroll
;;  interval</dfn>, which is obtained as follows:</p>
;;
;;  <ol>
;;
;;   <li><p>If the element has a <code
;;   title="attr-marquee-scrolldelay">scrolldelay</code> attribute, and
;;   parsing its value using the <span>rules for parsing non-negative
;;   integers</span> does not return an error, then let <var
;;   title="">delay</var> be the parsed value. Otherwise, let <var
;;   title="">delay</var> be 85.</p></li>
;;
;;   <li><p>If the element does not have a <code
;;   title="attr-marquee-truespeed">truespeed</code> attribute, and the
;;   <var title="">delay</var> value is less than 60, then let <var
;;   title="">delay</var> be 60 instead.</p></li>
;;
;;   <li><p>The <span>marquee scroll interval</span> is <var
;;   title="">delay</var>, interpreted in milliseconds.</p></li>
;;
;;  </ol>
;;
;;  <hr>
;;
;;  <p>A <code>marquee</code> element has a <dfn>marquee scroll
;;  distance</dfn>, which, if the element has a <code
;;  title="attr-marquee-scrollamount">scrollamount</code> attribute, and
;;  parsing its value using the <span>rules for parsing non-negative
;;  integers</span> does not return an error, is the parsed value
;;  interpreted in CSS pixels, and otherwise is 6 CSS pixels.</p>
;;
;;  <hr>
;;
;;  <p>A <code>marquee</code> element has a <dfn>marquee loop
;;  count</dfn>, which, if the element has a <code
;;  title="attr-marquee-loop">loop</code> attribute, and parsing its
;;  value using the <span>rules for parsing integers</span> does not
;;  return an error or a number less than 1, is the parsed value, and
;;  otherwise is &#x2212;1.</p>
;;
;;  <p>The <dfn title="dom-marquee-loop"><code>loop</code></dfn> IDL
;;  attribute, on getting, must return the element's <span>marquee loop
;;  count</span>; and on setting, if the new value is different than the
;;  element's <span>marquee loop count</span> and either greater than
;;  zero or equal to &#x2212;1, must set the element's <code
;;  title="attr-marquee-loop">loop</code> content attribute (adding it
;;  if necessary) to the <span>valid integer</span> that represents the
;;  new value. (Other values are ignored.)</p>
;;
;;  <p>A <code>marquee</code> element also has a <dfn>marquee current
;;  loop index</dfn>, which is zero when the element is created.</p>
;;
;;  <p>The rendering layer will occasionally <dfn>increment the marquee
;;  current loop index</dfn>, which must cause the following steps to be
;;  run:</p>
;;
;;  <ol>
;;
;;   <li><p>If the <span>marquee loop count</span> is &#x2212;1, then
;;   abort these steps.</p>
;;
;;   <li><p>Increment the <span>marquee current loop index</span> by
;;   one.</p></li>
;;
;;   <li>
;;
;;    <p>If the <span>marquee current loop index</span> is now equal to
;;    or greater than the element's <span>marquee loop count</span>,
;;    <span title="concept-marquee-off">turn off</span> the
;;    <code>marquee</code> element and <span>queue a task</span> to
;;    <span>fire a simple event</span> named <code
;;    title="event-finish">finish</code> at the <code>marquee</code>
;;    element.</p>
;;
;;    <p>Otherwise, if the <code
;;    title="attr-marquee-behavior">behavior</code> attribute is in the
;;    <span title="attr-marquee-behavior-alternate">alternate</span>
;;    state, then <span>queue a task</span> to <span>fire a simple
;;    event</span> named <code title="event-bounce">bounce</code> at
;;    the <code>marquee</code> element.</p>
;;
;;    <p>Otherwise, <span>queue a task</span> to <span>fire a simple
;;    event</span> named <code title="event-start">start</code> at the
;;    <code>marquee</code> element.</p>
;;
;;   </li>
;;
;;  </ol>
;;
;;  <hr>
;;
;;  <p>The following are the <span>event handlers</span> (and their
;;  corresponding <span title="event handler event type">event handler
;;  event types</span>) that must be supported, as content and IDL
;;  attributes, by <code>marquee</code> elements:</p>
;;
;;  <table>
;;   <thead>
;;    <tr><th><span title="event handlers">Event handler</span> <th><span>Event handler event type</span>
;;   <tbody>
;;    <tr><td><dfn title="handler-marquee-onbounce"><code>onbounce</code></dfn> <td> <code title="event-bounce">bounce</code>
;;    <tr><td><dfn title="handler-marquee-onfinish"><code>onfinish</code></dfn> <td> <code title="event-finish">finish</code>
;;    <tr><td><dfn title="handler-marquee-onstart"><code>onstart</code></dfn> <td> <code title="event-start">start</code>
;;  </table>
;;
;;  <hr>
;;
;;  <p>The <dfn
;;  title="dom-marquee-behavior"><code>behavior</code></dfn>, <dfn
;;  title="dom-marquee-direction"><code>direction</code></dfn>, <dfn
;;  title="dom-marquee-height"><code>height</code></dfn>, <dfn
;;  title="dom-marquee-hspace"><code>hspace</code></dfn>, <dfn
;;  title="dom-marquee-vspace"><code>vspace</code></dfn>, and <dfn
;;  title="dom-marquee-width"><code>width</code></dfn> IDL attributes
;;  must <span>reflect</span> the respective content attributes of the
;;  same name.</p>
;;
;;  <p>The <dfn title="dom-marquee-bgColor"><code>bgColor</code></dfn>
;;  IDL attribute must <span>reflect</span> the <code
;;  title="attr-marquee-bgcolor">bgcolor</code> content attribute.</p>
;;
;;  <p>The <dfn
;;  title="dom-marquee-scrollAmount"><code>scrollAmount</code></dfn>
;;  IDL attribute must <span>reflect</span> the <code
;;  title="attr-marquee-scrollamount">scrollamount</code> content
;;  attribute. The default value is 6.</p>
;;
;;  <p>The <dfn
;;  title="dom-marquee-scrollDelay"><code>scrollDelay</code></dfn> IDL
;;  attribute must <span>reflect</span> the <code
;;  title="attr-marquee-scrolldelay">scrolldelay</code> content
;;  attribute. The default value is 85.</p>
;;
;;  <p>The <dfn
;;  title="dom-marquee-trueSpeed"><code>trueSpeed</code></dfn> IDL
;;  attribute must <span>reflect</span> the <code
;;  title="attr-marquee-truespeed">truespeed</code> content
;;  attribute.</p>
;;
;;
;;  <h4>Frames</h4>
;;
;;  <p>The <dfn><code>frameset</code></dfn> element acts as <span>the
;;  body element</span> in documents that use frames.</p>
;;
;;  <p>The <code>frameset</code> element must implement the
;;  <code>HTMLFrameSetElement</code> interface.</p>
;;
;;  <pre class="idl">interface <dfn>HTMLFrameSetElement</dfn> : <span>HTMLElement</span> {
;;           attribute DOMString <span title="dom-frameset-cols">cols</span>;
;;           attribute DOMString <span title="dom-frameset-rows">rows</span>;
;;           attribute <span>Function</span> <span title="handler-window-onafterprint">onafterprint</span>;
;;           attribute <span>Function</span> <span title="handler-window-onbeforeprint">onbeforeprint</span>;
;;           attribute <span>Function</span> <span title="handler-window-onbeforeunload">onbeforeunload</span>;
;;           attribute <span>Function</span> <span title="handler-window-onblur">onblur</span>;
;;           attribute <span>Function</span> <span title="handler-window-onerror">onerror</span>;
;;           attribute <span>Function</span> <span title="handler-window-onfocus">onfocus</span>;
;;           attribute <span>Function</span> <span title="handler-window-onhashchange">onhashchange</span>;
;;           attribute <span>Function</span> <span title="handler-window-onload">onload</span>;
;;           attribute <span>Function</span> <span title="handler-window-onmessage">onmessage</span>;
;;           attribute <span>Function</span> <span title="handler-window-onoffline">onoffline</span>;
;;           attribute <span>Function</span> <span title="handler-window-ononline">ononline</span>;
;;           attribute <span>Function</span> <span title="handler-window-onpagehide">onpagehide</span>;
;;           attribute <span>Function</span> <span title="handler-window-onpageshow">onpageshow</span>;
;;           attribute <span>Function</span> <span title="handler-window-onpopstate">onpopstate</span>;
;;           attribute <span>Function</span> <span title="handler-window-onredo">onredo</span>;
;;           attribute <span>Function</span> <span title="handler-window-onresize">onresize</span>;
;;           attribute <span>Function</span> <span title="handler-window-onstorage">onstorage</span>;
;;           attribute <span>Function</span> <span title="handler-window-onundo">onundo</span>;
;;           attribute <span>Function</span> <span title="handler-window-onunload">onunload</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-frameset-cols"><code>cols</code></dfn> and
;;  <dfn title="dom-frameset-rows"><code>rows</code></dfn> IDL
;;  attributes of the <code>frameset</code> element must
;;  <span>reflect</span> the respective content attributes of the same
;;  name.</p>
;;
;;  <p>The <code>frameset</code> element must support the following
;;  <span>event handler content attributes</span> exposing the
;;  <span>event handlers</span> of the <code>Window</code> object:</p>
;;
;;  <ul class="brief">
;;   <li><code title="handler-window-onafterprint">onafterprint</code></li>
;;   <li><code title="handler-window-onbeforeprint">onbeforeprint</code></li>
;;   <li><code title="handler-window-onbeforeunload">onbeforeunload</code></li>
;;   <li><code title="handler-window-onblur">onblur</code></li>
;;   <li><code title="handler-window-onerror">onerror</code></li>
;;   <li><code title="handler-window-onfocus">onfocus</code></li>
;;   <li><code title="handler-window-onhashchange">onhashchange</code></li>
;;   <li><code title="handler-window-onload">onload</code></li>
;;   <li><code title="handler-window-onmessage">onmessage</code></li>
;;   <li><code title="handler-window-onoffline">onoffline</code></li>
;;   <li><code title="handler-window-ononline">ononline</code></li>
;;   <li><code title="handler-window-onpagehide">onpagehide</code></li>
;;   <li><code title="handler-window-onpageshow">onpageshow</code></li>
;;   <li><code title="handler-window-onpopstate">onpopstate</code></li>
;;   <li><code title="handler-window-onredo">onredo</code></li>
;;   <li><code title="handler-window-onresize">onresize</code></li>
;;   <li><code title="handler-window-onstorage">onstorage</code></li>
;;   <li><code title="handler-window-onundo">onundo</code></li>
;;   <li><code title="handler-window-onunload">onunload</code></li>
;;  </ul>
;;
;;  <p>The DOM interface also exposes <span>event handler IDL
;;  attributes</span> that mirror those on the <code>Window</code>
;;  element.</p>
;;
;;  <p>The <code title="handler-window-onblur">onblur</code>, <code
;;  title="handler-window-onerror">onerror</code>, <code
;;  title="handler-window-onfocus">onfocus</code>, and <code
;;  title="handler-window-onload">onload</code> <span>event handler IDL
;;  attributes</span> of the <code>Window</code> object, exposed on the
;;  <code>frameset</code> element, shadow the generic <span>event
;;  handler IDL attributes</span> with the same names normally supported
;;  by <span>HTML elements</span>.</p>
;;
;;  <hr>
;;
;;  <p>The <dfn><code>frame</code></dfn> element defines a <span>nested
;;  browsing context</span> similar to the <code>iframe</code> element,
;;  but rendered within a <code>frameset</code> element.</p>
;;
;;  <p>When the browsing context is created, if a <code
;;  title="attr-frame-src">src</code> attribute is present, the user
;;  agent must <span title="resolve a url">resolve</span> the value of
;;  that attribute, relative to the element, and if that is successful,
;;  must then <span>navigate</span> the element's browsing context to
;;  the resulting <span>absolute URL</span>, with <span>replacement
;;  enabled</span>, and with the <code>frame</code> element's
;;  document's <span>browsing context</span> as the <span>source
;;  browsing context</span>.</p>
;;
;;  <p>Whenever the <code title="attr-frame-src">src</code> attribute
;;  is set, the user agent must <span title="resolve a
;;  url">resolve</span> the value of that attribute, relative to the
;;  element, and if that is successful, the nested <span>browsing
;;  context</span> must be <span title="navigate">navigated</span> to
;;  the resulting <span>absolute URL</span>, with the
;;  <code>frame</code> element's document's <span>browsing
;;  context</span> as the <span>source browsing context</span>.</p>
;;
;;  <p>When the browsing context is created, if a <code
;;  title="attr-frame-name">name</code> attribute is present, the
;;  <span>browsing context name</span> must be set to the value of this
;;  attribute; otherwise, the <span>browsing context name</span> must be
;;  set to the empty string.</p>
;;
;;  <p>Whenever the <code title="attr-frame-name">name</code> attribute
;;  is set, the nested <span>browsing context</span>'s <span
;;  title="browsing context name">name</span> must be changed to the new
;;  value. If the attribute is removed, the <span>browsing context
;;  name</span> must be set to the empty string.</p>
;;
;;  <p>When content loads in a <code>frame</code>, after any <code
;;  title="event-load">load</code> events are fired within the content
;;  itself, the user agent must <span>queue a task</span> to <span>fire
;;  a simple event</span> named <code title="event-load">load</code> at
;;  the <code>frame</code> element. When content fails to load (e.g. due
;;  to a network error), then the user agent must <span>queue a
;;  task</span> to <span>fire a simple event</span> named <code
;;  title="event-error">error</code> at the element instead.</p>
;;
;;  <p>The <span>task source</span> for the <span
;;  title="concept-task">tasks</span> above is the <span>DOM
;;  manipulation task source</span>.</p>
;;
;;  <p>When there is an <span>active parser</span> in the
;;  <code>frame</code>, and when anything in the <code>frame</code> is
;;  <span title="delay the load event">delaying the load event</span> of
;;  the <code>frame</code>'s <span>browsing context</span>'s
;;  <span>active document</span>, the <code>frame</code> must
;;  <span>delay the load event</span> of its document.</p>
;;
;;  <p>The <code>frame</code> element must implement the
;;  <code>HTMLFrameElement</code> interface.</p>
;;
;;  <pre class="idl">interface <dfn>HTMLFrameElement</dfn> : <span>HTMLElement</span> {
;;           attribute DOMString <span title="dom-frame-frameBorder">frameBorder</span>;
;;           attribute DOMString <span title="dom-frame-longDesc">longDesc</span>;
;;           attribute DOMString <span title="dom-frame-marginHeight">marginHeight</span>;
;;           attribute DOMString <span title="dom-frame-marginWidth">marginWidth</span>;
;;           attribute DOMString <span title="dom-frame-name">name</span>;
;;           attribute boolean <span title="dom-frame-noResize">noResize</span>;
;;           attribute DOMString <span title="dom-frame-scrolling">scrolling</span>;
;;           attribute DOMString <span title="dom-frame-src">src</span>;
;;  readonly attribute Document <span title="dom-frame-contentDocument">contentDocument</span>;
;;  readonly attribute <span>WindowProxy</span> <span title="dom-frame-contentWindow">contentWindow</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-frame-name"><code>name</code></dfn>, <dfn
;;  title="dom-frame-scrolling"><code>scrolling</code></dfn>, and <dfn
;;  title="dom-frame-src"><code>src</code></dfn> IDL attributes of the
;;  <code>frame</code> element must <span>reflect</span> the respective
;;  content attributes of the same name.</p>
;;
;;  <p>The <dfn
;;  title="dom-frame-frameBorder"><code>frameBorder</code></dfn> IDL
;;  attribute of the <code>frame</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-frame-frameborder">frameborder</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-frame-longDesc"><code>longDesc</code></dfn>
;;  IDL attribute of the <code>frame</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-frame-longdesc">longdesc</code> content attribute.</p>
;;
;;  <p>The <dfn
;;  title="dom-frame-marginHeight"><code>marginHeight</code></dfn> IDL
;;  attribute of the <code>frame</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-frame-marginheight">marginheight</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn
;;  title="dom-frame-marginWidth"><code>marginWidth</code></dfn> IDL
;;  attribute of the <code>frame</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-frame-marginwidth">marginwidth</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-frame-noResize"><code>noResize</code></dfn>
;;  IDL attribute of the <code>frame</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-frame-noresize">noresize</code> content attribute.</p>
;;
;;  <p>The <dfn
;;  title="dom-frame-contentDocument"><code>contentDocument</code></dfn>
;;  IDL attribute of the <code>frame</code> element must return the
;;  <code>Document</code> object of the <span>active document</span> of
;;  the <code>frame</code> element's <span>nested browsing
;;  context</span>.</p>
;;
;;  <p>The <dfn
;;  title="dom-frame-contentWindow"><code>contentWindow</code></dfn>
;;  IDL attribute must return the <code>WindowProxy</code> object of the
;;  <code>frame</code> element's <span>nested browsing
;;  context</span>.</p>
;;
;;
;;
;;  <h4>Other elements, attributes and APIs</h4> <!-- alphabetical by name and attribute -->
;;
;;  <p>User agents must treat <code>acronym</code> elements in a manner
;;  equivalent to <code>abbr</code> elements in terms of semantics and
;;  for purposes of rendering.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLAnchorElement</span> {
;;           attribute DOMString <span title="dom-a-coords">coords</span>;
;;           attribute DOMString <span title="dom-a-charset">charset</span>;
;;           attribute DOMString <span title="dom-a-name">name</span>;
;;           attribute DOMString <span title="dom-a-rev">rev</span>;
;;           attribute DOMString <span title="dom-a-shape">shape</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-a-coords"><code>coords</code></dfn>, <dfn
;;  title="dom-a-charset"><code>charset</code></dfn>, <dfn
;;  title="dom-a-name"><code>name</code></dfn>, <dfn
;;  title="dom-a-rev"><code>rev</code></dfn>, and <dfn
;;  title="dom-a-shape"><code>shape</code></dfn> IDL attributes of the
;;  <code>a</code> element must <span>reflect</span> the respective
;;  content attributes of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLAreaElement</span> {
;;           attribute boolean <span title="dom-area-noHref">noHref</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-area-noHref"><code>noHref</code></dfn> IDL
;;  attribute of the <code>area</code> element must <span>reflect</span>
;;  the element's <code title="attr-area-nohref">nohref</code> content
;;  attribute.</p>
;;
;;  <hr>
;;
;;  <p>The <code>basefont</code> element must implement the
;;  <code>HTMLBaseFontElement</code> interface.</p>
;;
;;  <pre class="idl">interface <dfn>HTMLBaseFontElement</dfn> : <span>HTMLElement</span> {
;;           attribute DOMString <span title="dom-basefont-color">color</span>;
;;           attribute DOMString <span title="dom-basefont-face">face</span>;
;;           attribute long <span title="dom-basefont-size">size</span>; <!-- yes, long, not DOMString (so says DOM2 HTML) -->
;;};</pre>
;;
;;  <p>The <dfn title="dom-basefont-color"><code>color</code></dfn>,
;;  <dfn title="dom-basefont-face"><code>face</code></dfn>, and <dfn
;;  title="dom-basefont-size"><code>size</code></dfn> IDL attributes of
;;  the <code>basefont</code> element must <span>reflect</span> the
;;  respective content attributes of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLBodyElement</span> {
;;           attribute DOMString <span title="dom-body-text">text</span>;
;;           attribute DOMString <span title="dom-body-bgColor">bgColor</span>;
;;           attribute DOMString <span title="dom-body-background">background</span>;
;;           attribute DOMString <span title="dom-body-link">link</span>;
;;           attribute DOMString <span title="dom-body-vLink">vLink</span>;
;;           attribute DOMString <span title="dom-body-aLink">aLink</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-body-text"><code>text</code></dfn> IDL
;;  attribute of the <code>body</code> element must <span>reflect</span>
;;  the element's <code title="attr-body-text">text</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-body-bgColor"><code>bgColor</code></dfn> IDL
;;  attribute of the <code>body</code> element must <span>reflect</span>
;;  the element's <code title="attr-body-bgcolor">bgcolor</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn
;;  title="dom-body-background"><code>background</code></dfn> IDL
;;  attribute of the <code>body</code> element must <span>reflect</span>
;;  the element's <code title="attr-background">background</code>
;;  content attribute. (The <code
;;  title="attr-background">background</code> content is <em>not</em>
;;  defined to contain a <span>URL</span>, despite rules regarding its
;;  handling in the rendering section above.)</p>
;;
;;  <p>The <dfn title="dom-body-link"><code>link</code></dfn> IDL
;;  attribute of the <code>body</code> element must <span>reflect</span>
;;  the element's <code title="attr-body-link">link</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-body-aLink"><code>aLink</code></dfn> IDL
;;  attribute of the <code>body</code> element must <span>reflect</span>
;;  the element's <code title="attr-body-alink">alink</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-body-vLink"><code>vLink</code></dfn> IDL
;;  attribute of the <code>body</code> element must <span>reflect</span>
;;  the element's <code title="attr-body-vlink">vlink</code> content
;;  attribute.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLBRElement</span> {
;;           attribute DOMString <span title="dom-br-clear">clear</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-br-clear"><code>clear</code></dfn> IDL
;;  attribute of the <code>br</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLTableCaptionElement</span> {
;;           attribute DOMString <span title="dom-caption-align">align</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-caption-align"><code>align</code></dfn> IDL
;;  attribute of the <code>caption</code> element must
;;  <span>reflect</span> the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLTableColElement</span> {
;;           attribute DOMString <span title="dom-col-align">align</span>;
;;           attribute DOMString <span title="dom-col-ch">ch</span>;
;;           attribute DOMString <span title="dom-col-chOff">chOff</span>;
;;           attribute DOMString <span title="dom-col-vAlign">vAlign</span>;
;;           attribute DOMString <span title="dom-col-width">width</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-col-align"><code>align</code></dfn> and <dfn
;;  title="dom-col-width"><code>width</code></dfn> IDL attributes of
;;  the <code>col</code> element must <span>reflect</span> the
;;  respective content attributes of the same name.</p>
;;
;;  <p>The <dfn title="dom-col-ch"><code>ch</code></dfn> IDL attribute
;;  of the <code>col</code> element must <span>reflect</span> the
;;  element's <code title="attr-col-char">char</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-col-chOff"><code>chOff</code></dfn> IDL
;;  attribute of the <code>col</code> element must <span>reflect</span>
;;  the element's <code title="attr-col-charoff">charoff</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-col-vAlign"><code>vAlign</code></dfn> IDL
;;  attribute of the <code>col</code> element must <span>reflect</span>
;;  the element's <code title="attr-col-valign">valign</code> content
;;  attribute.</p>
;;
;;  <hr>
;;
;;  <p>User agents must treat <code>dir</code> elements in a manner
;;  equivalent to <code>ul</code> elements in terms of semantics and for
;;  purposes of rendering.</p>
;;
;;  <p>The <code>dir</code> element must implement the
;;  <code>HTMLDirectoryElement</code> interface.</p>
;;
;;  <pre class="idl">interface <dfn>HTMLDirectoryElement</dfn> : <span>HTMLElement</span> {
;;           attribute boolean <span title="dom-dir-compact">compact</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-dir-compact"><code>compact</code></dfn> IDL
;;  attribute of the <code>dir</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLDivElement</span> {
;;           attribute DOMString <span title="dom-div-align">align</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-div-align"><code>align</code></dfn> IDL
;;  attribute of the <code>div</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLDListElement</span> {
;;           attribute boolean <span title="dom-dl-compact">compact</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-dl-compact"><code>compact</code></dfn> IDL
;;  attribute of the <code>dl</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLEmbedElement</span> {
;;           attribute DOMString <span title="dom-embed-align">align</span>;
;;           attribute DOMString <span title="dom-embed-name">name</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-embed-name"><code>name</code></dfn> and <dfn
;;  title="dom-embed-align"><code>align</code></dfn> IDL attributes of
;;  the <code>embed</code> element must <span>reflect</span> the
;;  respective content attributes of the same name.</p>
;;
;;  <hr>
;;
;;  <p>The <code>font</code> element must implement the
;;  <code>HTMLFontElement</code> interface.</p>
;;
;;  <pre class="idl">interface <dfn>HTMLFontElement</dfn> : <span>HTMLElement</span> {
;;           attribute DOMString <span title="dom-font-color">color</span>;
;;           attribute DOMString <span title="dom-font-face">face</span>;
;;           attribute DOMString <span title="dom-font-size">size</span>; <!-- yes, DOMString, not long (so says DOM2 HTML) -->
;;};</pre>
;;
;;  <p>The <dfn title="dom-font-color"><code>color</code></dfn>,
;;  <dfn title="dom-font-face"><code>face</code></dfn>, and <dfn
;;  title="dom-font-size"><code>size</code></dfn> IDL attributes of
;;  the <code>font</code> element must <span>reflect</span> the
;;  respective content attributes of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLHeadingElement</span> {
;;           attribute DOMString <span title="dom-hx-align">align</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-hx-align"><code>align</code></dfn> IDL
;;  attribute of the <code>h1</code>&ndash;<code>h6</code> elements must
;;  <span>reflect</span> the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <p class="note">The <dfn
;;  title="dom-head-profile"><code>profile</code></dfn> IDL attribute on
;;  <code>head</code> elements (with the <code>HTMLHeadElement</code>
;;  interface) is intentionally omitted. Unless so required by <span
;;  title="other applicable specifications">another applicable
;;  specification</span>, implementations would therefore not support
;;  this attribute. (It is mentioned here as it was defined in a
;;  previous version of the DOM specifications.)</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLHRElement</span> {
;;           attribute DOMString <span title="dom-hr-align">align</span>;
;;           attribute DOMString <span title="dom-hr-color">color</span>;
;;           attribute boolean <span title="dom-hr-noShade">noShade</span>;
;;           attribute DOMString <span title="dom-hr-size">size</span>;
;;           attribute DOMString <span title="dom-hr-width">width</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-hr-align"><code>align</code></dfn>, <dfn
;;  title="dom-hr-color"><code>color</code></dfn>, <dfn
;;  title="dom-hr-size"><code>size</code></dfn>, and <dfn
;;  title="dom-hr-width"><code>width</code></dfn> IDL attributes of the
;;  <code>hr</code> element must <span>reflect</span> the respective
;;  content attributes of the same name.</p>
;;
;;  <p>The <dfn title="dom-hr-noShade"><code>noShade</code></dfn> IDL
;;  attribute of the <code>hr</code> element must <span>reflect</span>
;;  the element's <code title="attr-input-noshade">noshade</code>
;;  content attribute.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLHtmlElement</span> {
;;           attribute DOMString <span title="dom-html-version">version</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-html-version"><code>version</code></dfn> IDL
;;  attribute of the <code>html</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLIFrameElement</span> {
;;           attribute DOMString <span title="dom-iframe-align">align</span>;
;;           attribute DOMString <span title="dom-iframe-frameBorder">frameBorder</span>;
;;           attribute DOMString <span title="dom-iframe-longDesc">longDesc</span>;
;;           attribute DOMString <span title="dom-iframe-marginHeight">marginHeight</span>;
;;           attribute DOMString <span title="dom-iframe-marginWidth">marginWidth</span>;
;;           attribute DOMString <span title="dom-iframe-scrolling">scrolling</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-iframe-align"><code>align</code></dfn> and
;;  <dfn title="dom-iframe-scrolling"><code>scrolling</code></dfn> IDL
;;  attributes of the <code>iframe</code> element must
;;  <span>reflect</span> the respective content attributes of the same
;;  name.</p>
;;
;;  <p>The <dfn
;;  title="dom-iframe-frameBorder"><code>frameBorder</code></dfn> IDL
;;  attribute of the <code>iframe</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-iframe-frameborder">frameborder</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-iframe-longDesc"><code>longDesc</code></dfn>
;;  IDL attribute of the <code>iframe</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-iframe-longdesc">longdesc</code> content attribute.</p>
;;
;;  <p>The <dfn
;;  title="dom-iframe-marginHeight"><code>marginHeight</code></dfn> IDL
;;  attribute of the <code>iframe</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-iframe-marginheight">marginheight</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn
;;  title="dom-iframe-marginWidth"><code>marginWidth</code></dfn> IDL
;;  attribute of the <code>iframe</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-iframe-marginwidth">marginwidth</code> content
;;  attribute.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLImageElement</span> {
;;           attribute DOMString <span title="dom-img-name">name</span>;
;;           attribute DOMString <span title="dom-img-align">align</span>;
;;           attribute DOMString <span title="dom-img-border">border</span>;
;;           attribute unsigned long <span title="dom-img-hspace">hspace</span>;
;;           attribute DOMString <span title="dom-img-longDesc">longDesc</span>;
;;           attribute unsigned long <span title="dom-img-vspace">vspace</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-img-name"><code>name</code></dfn>, <dfn
;;  title="dom-img-align"><code>align</code></dfn>, <dfn
;;  title="dom-img-border"><code>border</code></dfn>, <dfn
;;  title="dom-img-hspace"><code>hspace</code></dfn>, and <dfn
;;  title="dom-img-vspace"><code>vspace</code></dfn> IDL attributes of
;;  the <code>img</code> element must <span>reflect</span> the
;;  respective content attributes of the same name.</p>
;;
;;  <p>The <dfn title="dom-img-longDesc"><code>longDesc</code></dfn> IDL
;;  attribute of the <code>img</code> element must <span>reflect</span>
;;  the element's <code title="attr-img-longdesc">longdesc</code> content
;;  attribute.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLInputElement</span> {
;;           attribute DOMString <span title="dom-input-align">align</span>;
;;           attribute DOMString <span title="dom-input-useMap">useMap</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-input-align"><code>align</code></dfn> IDL
;;  attribute of the <code>input</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <p>The <dfn title="dom-input-useMap"><code>useMap</code></dfn> IDL
;;  attribute of the <code>input</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-input-usemap">usemap</code> content attribute.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLLegendElement</span> {
;;           attribute DOMString <span title="dom-legend-align">align</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-legend-align"><code>align</code></dfn> IDL
;;  attribute of the <code>legend</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLLIElement</span> {
;;           attribute DOMString <span title="dom-li-type">type</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-li-type"><code>type</code></dfn> IDL
;;  attribute of the <code>li</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLLinkElement</span> {
;;           attribute DOMString <span title="dom-link-charset">charset</span>;
;;           attribute DOMString <span title="dom-link-rev">rev</span>;
;;           attribute DOMString <span title="dom-link-target">target</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-link-charset"><code>charset</code></dfn>,
;;  <dfn title="dom-link-rev"><code>rev</code></dfn>, and <dfn
;;  title="dom-link-target"><code>target</code></dfn> IDL attributes of
;;  the <code>link</code> element must <span>reflect</span> the
;;  respective content attributes of the same name.</p>
;;
;;  <hr>
;;
;;  <p>User agents must treat <code>listing</code> elements in a manner
;;  equivalent to <code>pre</code> elements in terms of semantics and
;;  for purposes of rendering.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLMenuElement</span> {
;;           attribute boolean <span title="dom-menu-compact">compact</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-menu-compact"><code>compact</code></dfn> IDL
;;  attribute of the <code>menu</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLMetaElement</span> {
;;           attribute DOMString <span title="dom-meta-scheme">scheme</span>;
;;};</pre>
;;
;;  <p>User agents may treat the <code
;;  title="attr-meta-scheme">scheme</code> content attribute on the
;;  <code>meta</code> element as an extension of the element's <code
;;  title="attr-meta-name">name</code> content attribute when processing
;;  a <code>meta</code> element with a <code
;;  title="attr-meta-name">name</code> attribute whose value is one that
;;  the user agent recognizes as supporting the <code
;;  title="attr-meta-scheme">scheme</code> attribute.</p>
;;
;;  <p>User agents are encouraged to ignore the <code
;;  title="attr-meta-scheme">scheme</code> attribute and instead process
;;  the value given to the metadata name as if it had been specified for
;;  each expected value of the <code
;;  title="attr-meta-scheme">scheme</code> attribute.</p>
;;
;;  <div class="example">
;;
;;   <p>For example, if the user agent acts on <code>meta</code>
;;   elements with <code title="attr-meta-name">name</code> attributes
;;   having the value "eGMS.subject.keyword", and knows that the <code
;;   title="attr-meta-scheme">scheme</code> attribute is used with this
;;   metadata name, then it could take the <code
;;   title="attr-meta-scheme">scheme</code> attribute into account,
;;   acting as if it was an extension of the <code
;;   title="attr-meta-name">name</code> attribute. Thus the following
;;   two <code>meta</code> elements could be treated as two elements
;;   giving values for two different metadata names, one consisting of a
;;   combination of "eGMS.subject.keyword" and "LGCL", and the other
;;   consisting of a combination of "eGMS.subject.keyword" and
;;   "ORLY":</p>
;;
;;   <pre class="bad">&lt;!-- this markup is invalid -->
;;&lt;meta name="eGMS.subject.keyword" scheme="LGCL" content="Abandoned vehicles">
;;&lt;meta name="eGMS.subject.keyword" scheme="ORLY" content="Mah car: kthxbye"></pre>
;;
;;   <p>The recommended processing of this markup, however, would be
;;   equivalent to the following:</p>
;;
;;   <pre>&lt;meta name="eGMS.subject.keyword" content="Abandoned vehicles">
;;&lt;meta name="eGMS.subject.keyword" content="Mah car: kthxbye"></pre>
;;
;;  </div>
;;
;;  <p>The <dfn title="dom-meta-scheme"><code>scheme</code></dfn> IDL
;;  attribute of the <code>meta</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLObjectElement</span> {
;;           attribute DOMString <span title="dom-object-align">align</span>;
;;           attribute DOMString <span title="dom-object-archive">archive</span>;
;;           attribute DOMString <span title="dom-object-border">border</span>;
;;           attribute DOMString <span title="dom-object-code">code</span>;
;;           attribute DOMString <span title="dom-object-codeBase">codeBase</span>;
;;           attribute DOMString <span title="dom-object-codeType">codeType</span>;
;;           attribute boolean <span title="dom-object-declare">declare</span>;
;;           attribute unsigned long <span title="dom-object-hspace">hspace</span>;
;;           attribute DOMString <span title="dom-object-standby">standby</span>;
;;           attribute unsigned long <span title="dom-object-vspace">vspace</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-object-align"><code>align</code></dfn>, <dfn
;;  title="dom-object-archive"><code>archive</code></dfn>, <dfn
;;  title="dom-object-border"><code>border</code></dfn>, <dfn
;;  title="dom-object-code"><code>code</code></dfn>, <dfn
;;  title="dom-object-declare"><code>declare</code></dfn>, <dfn
;;  title="dom-object-hspace"><code>hspace</code></dfn>, <dfn
;;  title="dom-object-standby"><code>standby</code></dfn>, and <dfn
;;  title="dom-object-vspace"><code>vspace</code></dfn> IDL attributes
;;  of the <code>object</code> element must <span>reflect</span> the
;;  respective content attributes of the same name.</p>
;;
;;  <p>The <dfn title="dom-object-codeBase"><code>codeBase</code></dfn> IDL
;;  attribute of the <code>object</code> element must <span>reflect</span>
;;  the element's <code title="attr-object-codebase">codebase</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-object-codeType"><code>codeType</code></dfn> IDL
;;  attribute of the <code>object</code> element must <span>reflect</span>
;;  the element's <code title="attr-object-codetype">codetype</code> content
;;  attribute.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLOListElement</span> {
;;           attribute boolean <span title="dom-ol-compact">compact</span>;
;;           attribute DOMString <span title="dom-ol-type">type</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-ol-compact"><code>compact</code></dfn> and
;;  <dfn title="dom-ol-type"><code>type</code></dfn> IDL attributes of
;;  the <code>ol</code> element must <span>reflect</span> the respective
;;  content attributes of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLParagraphElement</span> {
;;           attribute DOMString <span title="dom-p-align">align</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-p-align"><code>align</code></dfn> IDL
;;  attribute of the <code>p</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLParamElement</span> {
;;           attribute DOMString <span title="dom-param-type">type</span>;
;;           attribute DOMString <span title="dom-param-valueType">valueType</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-param-type"><code>type</code></dfn> IDL
;;  attribute of the <code>param</code> element must
;;  <span>reflect</span> the content attribute of the same name.</p>
;;
;;  <p>The <dfn title="dom-param-valueType"><code>valueType</code></dfn>
;;  IDL attribute of the <code>param</code> element must
;;  <span>reflect</span> the element's <code
;;  title="attr-param-valuetype">valuetype</code> content attribute.</p>
;;
;;  <hr>
;;
;;  <p>User agents must treat <code>plaintext</code> elements in a
;;  manner equivalent to <code>pre</code> elements in terms of semantics and
;;  for purposes of rendering.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLPreElement</span> {
;;           attribute unsigned long <span title="dom-pre-width">width</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-pre-width"><code>width</code></dfn> IDL
;;  attribute of the <code>pre</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLScriptElement</span> {
;;           attribute DOMString <span title="dom-script-event">event</span>;
;;           attribute DOMString <span title="dom-script-htmlFor">htmlFor</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-script-event"><code>event</code></dfn> and
;;  <dfn title="dom-script-htmlFor"><code>htmlFor</code></dfn> IDL
;;  attributes of the <code>script</code> element must return the empty
;;  string on getting, and do nothing on setting.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLTableElement</span> {
;;           attribute DOMString <span title="dom-table-align">align</span>;
;;           attribute DOMString <span title="dom-table-bgColor">bgColor</span>;
;;           attribute DOMString <span title="dom-table-border">border</span>;
;;           attribute DOMString <span title="dom-table-cellPadding">cellPadding</span>;
;;           attribute DOMString <span title="dom-table-cellSpacing">cellSpacing</span>;
;;           attribute DOMString <span title="dom-table-frame">frame</span>;
;;           attribute DOMString <span title="dom-table-rules">rules</span>;
;;           attribute DOMString <span title="dom-table-width">width</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-table-align"><code>align</code></dfn>, <dfn
;;  title="dom-table-border"><code>border</code></dfn>, <dfn
;;  title="dom-table-frame"><code>frame</code></dfn>, <dfn
;;  title="dom-table-rules"><code>rules</code></dfn>, and <dfn
;;  title="dom-table-width"><code>width</code></dfn>, IDL attributes of
;;  the <code>table</code> element must <span>reflect</span> the
;;  respective content attributes of the same name.</p>
;;
;;  <p>The <dfn title="dom-table-bgColor"><code>bgColor</code></dfn> IDL
;;  attribute of the <code>table</code> element must <span>reflect</span>
;;  the element's <code title="attr-table-bgcolor">bgcolor</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-table-cellPadding"><code>cellPadding</code></dfn> IDL
;;  attribute of the <code>table</code> element must <span>reflect</span>
;;  the element's <code title="attr-table-cellpadding">cellpadding</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-table-cellSpacing"><code>cellSpacing</code></dfn> IDL
;;  attribute of the <code>table</code> element must <span>reflect</span>
;;  the element's <code title="attr-table-cellspacing">cellspacing</code> content
;;  attribute.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLTableSectionElement</span> {
;;           attribute DOMString <span title="dom-tbody-align">align</span>;
;;           attribute DOMString <span title="dom-tbody-ch">ch</span>;
;;           attribute DOMString <span title="dom-tbody-chOff">chOff</span>;
;;           attribute DOMString <span title="dom-tbody-vAlign">vAlign</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-tbody-align"><code>align</code></dfn> IDL
;;  attribute of the <code>tbody</code>, <code>thead</code>, and
;;  <code>tfoot</code> elements must <span>reflect</span> the content
;;  attribute of the same name.</p>
;;
;;  <p>The <dfn title="dom-tbody-ch"><code>ch</code></dfn> IDL attribute
;;  of the <code>tbody</code>, <code>thead</code>, and
;;  <code>tfoot</code> elements must <span>reflect</span> the elements'
;;  <code title="attr-tbody-char">char</code> content attributes.</p>
;;
;;  <p>The <dfn title="dom-tbody-chOff"><code>chOff</code></dfn> IDL
;;  attribute of the <code>tbody</code>, <code>thead</code>, and
;;  <code>tfoot</code> elements must <span>reflect</span> the elements'
;;  <code title="attr-tbody-charoff">charoff</code> content attributes.</p>
;;
;;  <p>The <dfn title="dom-tbody-vAlign"><code>vAlign</code></dfn> IDL
;;  attribute of the <code>tbody</code>, <code>thead</code>, and
;;  <code>tfoot</code> element must <span>reflect</span> the elements'
;;  <code title="attr-tbody-valign">valign</code> content
;;  attributes.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLTableCellElement</span> {
;;           attribute DOMString <span title="dom-tdth-abbr">abbr</span>;
;;           attribute DOMString <span title="dom-tdth-align">align</span>;
;;           attribute DOMString <span title="dom-tdth-axis">axis</span>;
;;           attribute DOMString <span title="dom-tdth-bgColor">bgColor</span>;
;;           attribute DOMString <span title="dom-tdth-ch">ch</span>;
;;           attribute DOMString <span title="dom-tdth-chOff">chOff</span>;
;;           attribute DOMString <span title="dom-tdth-height">height</span>;
;;           attribute boolean <span title="dom-tdth-noWrap">noWrap</span>;
;;           attribute DOMString <span title="dom-tdth-vAlign">vAlign</span>;
;;           attribute DOMString <span title="dom-tdth-width">width</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-tdth-abbr"><code>abbr</code></dfn>, <dfn
;;  title="dom-tdth-align"><code>align</code></dfn>, <dfn
;;  title="dom-tdth-axis"><code>axis</code></dfn>, <dfn
;;  title="dom-tdth-height"><code>height</code></dfn>, and <dfn
;;  title="dom-tdth-width"><code>width</code></dfn> IDL attributes of
;;  the <code>td</code> and <code>th</code> elements must
;;  <span>reflect</span> the respective content attributes of the same
;;  name.</p>
;;
;;  <p>The <dfn title="dom-tdth-bgColor"><code>bgColor</code></dfn> IDL
;;  attribute of the <code>td</code> and <code>th</code> elements must
;;  <span>reflect</span> the elements' <code
;;  title="attr-tdth-bgcolor">bgcolor</code> content attributes.</p>
;;
;;  <p>The <dfn title="dom-tdth-ch"><code>ch</code></dfn> IDL
;;  attribute of the <code>td</code> and <code>th</code> elements must
;;  <span>reflect</span> the elements' <code
;;  title="attr-tdth-char">char</code> content attributes.</p>
;;
;;  <p>The <dfn title="dom-tdth-chOff"><code>chOff</code></dfn> IDL
;;  attribute of the <code>td</code> and <code>th</code> elements must
;;  <span>reflect</span> the elements' <code
;;  title="attr-tdth-charoff">charoff</code> content attributes.</p>
;;
;;  <p>The <dfn title="dom-tdth-noWrap"><code>noWrap</code></dfn> IDL
;;  attribute of the <code>td</code> and <code>th</code> elements must
;;  <span>reflect</span> the elements' <code
;;  title="attr-tdth-nowrap">nowrap</code> content attributes.</p>
;;
;;  <p>The <dfn title="dom-tdth-vAlign"><code>vAlign</code></dfn> IDL
;;  attribute of the <code>td</code> and <code>th</code> element must
;;  <span>reflect</span> the elements' <code
;;  title="attr-tdth-valign">valign</code> content attributes.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLTableRowElement</span> {
;;           attribute DOMString <span title="dom-tr-align">align</span>;
;;           attribute DOMString <span title="dom-tr-bgColor">bgColor</span>;
;;           attribute DOMString <span title="dom-tr-ch">ch</span>;
;;           attribute DOMString <span title="dom-tr-chOff">chOff</span>;
;;           attribute DOMString <span title="dom-tr-vAlign">vAlign</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-tr-align"><code>align</code></dfn> IDL
;;  attribute of the <code>tr</code> element must <span>reflect</span>
;;  the content attribute of the same name.</p>
;;
;;  <p>The <dfn title="dom-tr-bgColor"><code>bgColor</code></dfn> IDL
;;  attribute of the <code>tr</code> element must <span>reflect</span>
;;  the element's <code title="attr-tr-bgcolor">bgcolor</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-tr-ch"><code>ch</code></dfn> IDL attribute of
;;  the <code>tr</code> element must <span>reflect</span> the element's
;;  <code title="attr-tr-char">char</code> content attribute.</p>
;;
;;  <p>The <dfn title="dom-tr-chOff"><code>chOff</code></dfn> IDL
;;  attribute of the <code>tr</code> element must <span>reflect</span>
;;  the element's <code title="attr-tr-charoff">charoff</code> content
;;  attribute.</p>
;;
;;  <p>The <dfn title="dom-tr-vAlign"><code>vAlign</code></dfn> IDL
;;  attribute of the <code>tr</code> element must <span>reflect</span>
;;  the element's <code title="attr-tr-valign">valign</code> content
;;  attribute.</p>
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLUListElement</span> {
;;           attribute boolean <span title="dom-ul-compact">compact</span>;
;;           attribute DOMString <span title="dom-ul-type">type</span>;
;;};</pre>
;;
;;  <p>The <dfn title="dom-ul-compact"><code>compact</code></dfn> and
;;  <dfn title="dom-ul-type"><code>type</code></dfn> IDL attributes of
;;  the <code>ul</code> element must <span>reflect</span> the respective
;;  content attributes of the same name.</p>
;;
;;  <hr>
;;
;;  <p>User agents must treat <code>xmp</code> elements in a manner
;;  equivalent to <code>pre</code> elements in terms of semantics and
;;  for purposes of rendering.</p>
;;
;;  <hr>
;;
;;  <p>The <code>bgsound</code>, <code>isindex</code>,
;;  <code>multicol</code>, <code>nextid</code>, <code>rb</code>, and
;;  <code>spacer</code> elements must use the
;;  <code>HTMLUnknownElement</code> interface.</p> <!-- has to be
;;  explicitly listed because technically we define the elements in the
;;  spec, albeit as obsolete, and then we say that only elements not
;;  defined in this spec use HTMLUnknownElement. -->
;;
;;  <hr>
;;
;;  <pre class="idl">[Supplemental]
;;interface <span>HTMLDocument</span> {
;;           attribute DOMString <span title="dom-document-fgColor">fgColor</span>;
;;           attribute DOMString <span title="dom-document-bgColor">bgColor</span>;
;;           attribute DOMString <span title="dom-document-linkColor">linkColor</span>;
;;           attribute DOMString <span title="dom-document-vlinkColor">vlinkColor</span>;
;;           attribute DOMString <span title="dom-document-alinkColor">alinkColor</span>;
;;
;;  readonly attribute <span>HTMLCollection</span> <span title="dom-document-anchors">anchors</span>;
;;  readonly attribute <span>HTMLCollection</span> <span title="dom-document-applets">applets</span>;
;;
;;  void <span title="dom-document-clear">clear</span>();
;;
;;  readonly attribute <span>HTMLAllCollection</span> <span title="dom-document-all">all</span>;
;;};</pre>
;;
;;  <p>The attributes of the <code>Document</code> object listed in the
;;  first column of the following table must <span>reflect</span> the
;;  content attribute on <span>the body element</span> with the name
;;  given in the corresponding cell in the second column on the same
;;  row, if <span>the body element</span> is a <code>body</code> element
;;  (as opposed to a <code>frameset</code> element). When there is no
;;  <span title="the body element">body element</span> or if it is a
;;  <code>frameset</code> element, the attributes must instead return
;;  the empty string on getting and do nothing on setting.</p>
;;
;;  <table>
;;   <thead>
;;    <tr>
;;     <th> IDL attribute
;;     <th> Content attribute
;;   <tbody>
;;    <tr>
;;     <td><dfn title="dom-document-fgColor"><code>fgColor</code></dfn>
;;     <td><code title="attr-body-text">text</code>
;;    <tr>
;;     <td><dfn title="dom-document-bgColor"><code>bgColor</code></dfn>
;;     <td><code title="attr-body-bgcolor">bgcolor</code>
;;    <tr>
;;     <td><dfn title="dom-document-linkColor"><code>linkColor</code></dfn>
;;     <td><code title="attr-body-link">link</code>
;;    <tr>
;;     <td><dfn title="dom-document-vLinkColor"><code>vLinkColor</code></dfn>
;;     <td><code title="attr-body-vlink">vlink</code>
;;    <tr>
;;     <td><dfn title="dom-document-aLinkColor"><code>aLinkColor</code></dfn>
;;     <td><code title="attr-body-alink">alink</code>
;;  </table>
;;
;;  <hr>
;;
;;  <p>The <dfn title="dom-document-anchors"><code>anchors</code></dfn>
;;  attribute must return an <code>HTMLCollection</code> rooted at the
;;  <code>Document</code> node, whose filter matches only <code>a</code>
;;  elements with <code title="attr-a-name">name</code>
;;  attributes.</p>
;;
;;  <p>The <dfn title="dom-document-applets"><code>applets</code></dfn>
;;  attribute must return an <code>HTMLCollection</code> rooted at the
;;  <code>Document</code> node, whose filter matches only
;;  <code>applet</code> elements.</p>
;;
;;  <p>The <dfn title="dom-document-clear"><code>clear()</code></dfn>
;;  method must do nothing.</p>
;;
;;  <hr>
;;
;;  <p>The <dfn title="dom-document-all"><code>all</code></dfn>
;;  attribute must return an <code>HTMLAllCollection</code> rooted at the
;;  <code>Document</code> node, whose filter matches all elements.</p>
;;
;;  <p>The object returned for <code title="dom-document-all">all</code>
;;  has several unusual behaviors:</p>
;;
;;  <ul>
;;
;;   <li><p>The user agent must act as if the ToBoolean() operator in
;;   JavaScript converts the object returned for <code
;;   title="dom-document-all">all</code> to the false value.</p></li>
;;
;;   <li><p>The user agent must act as if, for the purposes of the <code
;;   title="">==</code> and <code title="">!=</code> operators in
;;   JavaScript, the object returned for <code
;;   title="dom-document-all">all</code> is equal to the <code
;;   title="">undefined</code> value.</p></li>
;;
;;   <li><p>The user agent must act such that the <code
;;   title="">typeof</code> operator in JavaScript returns the string
;;   <code title="">undefined</code> when applied to the object returned
;;   for <code title="dom-document-all">all</code>.</p></li>
;;
;;  </ul>
;;
;;  <p class="note">These requirements are a <span>willful
;;  violation</span> of the JavaScript specification current at the time
;;  of writing (ECMAScript edition 3). The JavaScript specification
;;  requires that the ToBoolean() operator convert all objects to the
;;  true value, and does not have provisions for objects acting as if
;;  they were <code title="">undefined</code> for the purposes of
;;  certain operators. This violation is motivated by a desire for
;;  compatibility with two classes of legacy content: one that uses the
;;  presence of <code title="dom-document-all">document.all</code> as a
;;  way to detect legacy user agents, and one that only supports those
;;  legacy user agents and uses the <code
;;  title="dom-document-all">document.all</code> object without testing
;;  for its presence first. <a href="#refsECMA262">[ECMA262]</a></p>
;;
;;  </div>
;;
;;
;;<!--START microdata-->
;;
;;  <h2 id="iana">IANA considerations</h2>
;;
;;  <!-- http://www.w3.org/2002/06/registering-mediatype.html -->
;;
;;<!--END microdata-->
;;
;;  <h3><dfn><code>text/html</code></dfn></h3>
;;
;;  <p>This registration is for community review and will be submitted
;;  to the IESG for review, approval, and registration with IANA.</p>
;;
;;  <!--
;;   To: ietf-types@iana.org
;;   Subject: Registration of media type text/html
;;  -->
;;
;;  <!--
;;   Obsoletes:
;;   http://www.ietf.org/rfc/rfc2854
;;
;;   Include a request to retire RFC 2854 persuant to section 6.4 of RFC 2026.
;;  -->
;;
;;  <dl>
;;   <dt>Type name:</dt>
;;   <dd>text</dd>
;;   <dt>Subtype name:</dt>
;;   <dd>html</dd>
;;   <dt>Required parameters:</dt>
;;   <dd>No required parameters</dd>
;;   <dt>Optional parameters:</dt>
;;   <dd>
;;    <dl>
;;     <dt><code title="">charset</code></dt>
;;     <dd>
;;      <p>The <code title="">charset</code> parameter may be provided
;;      to definitively specify the <span>document's character
;;      encoding</span>, overriding any <span title="character encoding
;;      declaration">character encoding declarations</span> in the
;;      document. The parameter's value must be the name of the
;;      character encoding used to serialize the file, must be a valid
;;      character encoding name, and must be an <span>ASCII
;;      case-insensitive</span> match for the <span>preferred MIME
;;      name</span> for that encoding. <a
;;      href="#refsIANACHARSET">[IANACHARSET]</a></p>
;;     </dd>
;;    </dl>
;;   </dd>
;;   <dt>Encoding considerations:</dt>
;;   <dd>See the section on <span title="character encoding
;;   declaration">character encoding declarations</span>.</dd>
;;   <dt>Security considerations:</dt>
;;   <dd>
;;
;;    <p>Entire novels have been written about the security
;;    considerations that apply to HTML documents. Many are listed in
;;    this document, to which the reader is referred for more
;;    details. Some general concerns bear mentioning here, however:</p>
;;
;;    <p>HTML is scripted language, and has a large number of APIs (some
;;    of which are described in this document). Script can expose the
;;    user to potential risks of information leakage, credential
;;    leakage, cross-site scripting attacks, cross-site request
;;    forgeries, and a host of other problems. While the designs in this
;;    specification are intended to be safe if implemented correctly, a
;;    full implementation is a massive undertaking and, as with any
;;    software, user agents are likely to have security bugs.</p>
;;
;;    <p>Even without scripting, there are specific features in HTML
;;    which, for historical reasons, are required for broad
;;    compatibility with legacy content but that expose the user to
;;    unfortunate security problems. In particular, the <code>img</code>
;;    element can be used in conjunction with some other features as a
;;    way to effect a port scan from the user's location on the
;;    Internet. This can expose local network topologies that the
;;    attacker would otherwise not be able to determine.</p>
;;
;;    <p>HTML relies on a compartmentalization scheme sometimes known as
;;    the <i>same-origin policy</i>. An <span>origin</span> in most
;;    cases consists of all the pages served from the same host, on the
;;    same port, using the same protocol.</p>
;;
;;    <p>It is critical, therefore, to ensure that any untrusted content
;;    that forms part of a site be hosted on a different
;;    <span>origin</span> than any sensitive content on that site.
;;    Untrusted content can easily spoof any other page on the same
;;    origin, read data from that origin, cause scripts in that origin
;;    to execute, submit forms to and from that origin even if they are
;;    protected from cross-site request forgery attacks by unique
;;    tokens, and make use of any third-party resources exposed to or
;;    rights granted to that origin.</p>
;;
;;   </dd>
;;   <dt>Interoperability considerations:</dt>
;;   <dd>
;;    Rules for processing both conforming and non-conforming content
;;    are defined in this specification.
;;   </dd>
;;   <dt>Published specification:</dt>
;;   <dd id="authors-using-html">
;;    This document is the relevant specification. Labeling a resource
;;    with the <code>text/html</code> type asserts that the resource is
;;    an <span title="HTML documents">HTML document</span> using
;;    <span>the HTML syntax</span>.
;;   </dd>
;;   <dt>Applications that use this media type:</dt>
;;   <dd>
;;    Web browsers, tools for processing Web content, HTML authoring
;;    tools, search engines, validators.
;;   </dd>
;;   <dt>Additional information:</dt>
;;   <dd>
;;    <dl>
;;     <dt>Magic number(s):</dt>
;;     <dd>No sequence of bytes can uniquely identify an HTML
;;     document. More information on detecting HTML documents is
;;     available in the Media Type Sniffing specification. <a
;;     href="#refsMIMESNIFF">[MIMESNIFF]</a></dd>
;;     <dt>File extension(s):</dt>
;;     <dd>"<code title="">html</code>" and "<code title="">htm</code>"
;;     are commonly, but certainly not exclusively, used as the
;;     extension for HTML documents.</dd>
;;     <dt>Macintosh file type code(s):</dt>
;;     <dd><code title="">TEXT</code></dd>
;;    </dl>
;;   </dd>
;;   <dt>Person &amp; email address to contact for further information:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Intended usage:</dt>
;;   <dd>Common</dd>
;;   <dt>Restrictions on usage:</dt>
;;   <dd>No restrictions apply.</dd>
;;   <dt>Author:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Change controller:</dt>
;;   <dd>W3C</dd>
;;  </dl>
;;
;;  <p>Fragment identifiers used with <code>text/html</code> resources
;;  refer to <span>the indicated part of the document</span>.</p>
;;
;;
;;  <h3><dfn><code>text/html-sandboxed</code></dfn></h3>
;;
;;  <p>This registration is for community review and will be submitted
;;  to the IESG for review, approval, and registration with IANA.</p>
;;
;;  <!--
;;   To: ietf-types@iana.org
;;   Subject: Registration of media type text/html-sandboxed
;;  -->
;;
;;  <dl>
;;   <dt>Type name:</dt>
;;   <dd>text</dd>
;;   <dt>Subtype name:</dt>
;;   <dd>html-sandboxed</dd>
;;   <dt>Required parameters:</dt>
;;   <dd>No required parameters</dd>
;;   <dt>Optional parameters:</dt>
;;   <dd>Same as for <code>text/html</code></dd>
;;   <dt>Encoding considerations:</dt>
;;   <dd>Same as for <code>text/html</code></dd>
;;   <dt>Security considerations:</dt>
;;   <dd>
;;    <p>The purpose of the <code>text/html-sandboxed</code> MIME type
;;    is to provide a way for content providers to indicate that they
;;    want the file to be interpreted in a manner that does not give the
;;    file's contents access to the rest of the site. This is achieved
;;    by assigning the <code>Document</code> objects generated from
;;    resources labeled as <code>text/html-sandboxed</code> unique
;;    origins.</p>
;;    <p>To avoid having legacy user agents treating resources labeled
;;    as <code>text/html-sandboxed</code> as regular
;;    <code>text/html</code> files, authors should avoid using the <code
;;    title="">.html</code> or <code title="">.htm</code> extensions for
;;    resources labeled as <code>text/html-sandboxed</code>.</p>
;;    <p>Beyond this, the type is identical to <code>text/html</code>,
;;    and the same considerations apply.</p>
;;   </dd>
;;   <dt>Interoperability considerations:</dt>
;;   <dd>Same as for <code>text/html</code></dd>
;;   <dt>Published specification:</dt>
;;   <dd>
;;    This document is the relevant specification. Labeling a resource
;;    with the <code>text/html-sandboxed</code> type asserts that the
;;    resource is an <span title="HTML documents">HTML document</span>
;;    using <span>the HTML syntax</span>.
;;   </dd>
;;   <dt>Applications that use this media type:</dt>
;;   <dd>Same as for <code>text/html</code></dd>
;;   <dt>Additional information:</dt>
;;   <dd>
;;    <dl>
;;     <dt>Magic number(s):</dt>
;;     <dd>Documents labeled as <code>text/html-sandboxed</code> are
;;     heuristically indistinguishable from those labeled as
;;     <code>text/html</code>.</dd>
;;     <dt>File extension(s):</dt>
;;     <dd>"<code title="">sandboxed</code>"</dd>
;;     <dt>Macintosh file type code(s):</dt>
;;     <dd><code title="">TEXT</code></dd>
;;    </dl>
;;   </dd>
;;   <dt>Person &amp; email address to contact for further information:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Intended usage:</dt>
;;   <dd>Common</dd>
;;   <dt>Restrictions on usage:</dt>
;;   <dd>No restrictions apply.</dd>
;;   <dt>Author:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Change controller:</dt>
;;   <dd>WHATWG</dd>
;;  </dl>
;;
;;  <p>Fragment identifiers used with <code>text/html-sandboxed</code>
;;  resources refer to <span>the indicated part of the
;;  document</span>.</p>
;;
;;
;;  <h3><dfn><code>application/xhtml+xml</code></dfn></h3>
;;
;;  <p>This registration is for community review and will be submitted
;;  to the IESG for review, approval, and registration with IANA.</p>
;;
;;  <!--
;;   To: ietf-types@iana.org
;;   Subject: Registration of media type application/xhtml+xml
;;  -->
;;
;;  <!--
;;   Obsoletes:
;;   http://www.ietf.org/rfc/rfc3236.txt
;;  -->
;;
;;  <dl>
;;   <dt>Type name:</dt>
;;   <dd>application</dd>
;;   <dt>Subtype name:</dt>
;;   <dd>xhtml+xml</dd>
;;   <dt>Required parameters:</dt>
;;   <dd>Same as for <code>application/xml</code> <a href="#refsRFC3023">[RFC3023]</a></dd>
;;   <dt>Optional parameters:</dt>
;;   <dd>Same as for <code>application/xml</code> <a href="#refsRFC3023">[RFC3023]</a></dd>
;;   <dt>Encoding considerations:</dt>
;;   <dd>Same as for <code>application/xml</code> <a href="#refsRFC3023">[RFC3023]</a></dd>
;;   <dt>Security considerations:</dt>
;;   <dd>Same as for <code>application/xml</code> <a href="#refsRFC3023">[RFC3023]</a></dd>
;;   <dt>Interoperability considerations:</dt>
;;   <dd>Same as for <code>application/xml</code> <a href="#refsRFC3023">[RFC3023]</a></dd>
;;   <dt id="authors-using-xhtml">Published specification:</dt>
;;   <dd>
;;    Labeling a resource with the <code>application/xhtml+xml</code>
;;    type asserts that the resource is an XML document that likely has
;;    a root element from the <span>HTML namespace</span>. As such, the
;;    relevant specifications are the XML specification, the Namespaces
;;    in XML specification, and this specification. <a
;;    href="#refsXML">[XML]</a> <a href="#refsXMLNS">[XMLNS]</a>
;;   </dd>
;;   <dt>Applications that use this media type:</dt>
;;   <dd>Same as for <code>application/xml</code> <a href="#refsRFC3023">[RFC3023]</a></dd>
;;   <dt>Additional information:</dt>
;;   <dd>
;;    <dl>
;;     <dt>Magic number(s):</dt>
;;     <dd>Same as for <code>application/xml</code> <a href="#refsRFC3023">[RFC3023]</a></dd>
;;     <dt>File extension(s):</dt>
;;     <dd>"<code title="">xhtml</code>" and "<code title="">xht</code>"
;;     are sometimes used as extensions for XML resources that have a
;;     root element from the <span>HTML namespace</span>.</dd>
;;     <dt>Macintosh file type code(s):</dt>
;;     <dd><code title="">TEXT</code></dd>
;;    </dl>
;;   </dd>
;;   <dt>Person &amp; email address to contact for further information:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Intended usage:</dt>
;;   <dd>Common</dd>
;;   <dt>Restrictions on usage:</dt>
;;   <dd>No restrictions apply.</dd>
;;   <dt>Author:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Change controller:</dt>
;;   <dd>W3C</dd>
;;  </dl>
;;
;;  <p>Fragment identifiers used with <code>application/xhtml+xml</code>
;;  resources have the same semantics as with any <span>XML MIME
;;  type</span>. <a href="#refsRFC3023">[RFC3023]</a></p>
;;
;;
;;  <h3><dfn><code>text/cache-manifest</code></dfn></h3>
;;
;;  <p>This registration is for community review and will be submitted
;;  to the IESG for review, approval, and registration with IANA.</p>
;;
;;  <!--
;;   To: ietf-types@iana.org
;;   Subject: Registration of media type text/cache-manifest
;;  -->
;;
;;  <dl>
;;   <dt>Type name:</dt>
;;   <dd>text</dd>
;;   <dt>Subtype name:</dt>
;;   <dd>cache-manifest</dd>
;;   <dt>Required parameters:</dt>
;;   <dd>No parameters</dd>
;;   <dt>Optional parameters:</dt>
;;   <dd>No parameters</dd>
;;   <dt>Encoding considerations:</dt>
;;   <dd>Always UTF-8.</dd>
;;   <dt>Security considerations:</dt>
;;   <dd>
;;    <p>Cache manifests themselves pose no immediate risk unless
;;    sensitive information is included within the
;;    manifest. Implementations, however, are required to follow
;;    specific rules when populating a cache based on a cache manifest,
;;    to ensure that certain origin-based restrictions are
;;    honored. Failure to correctly implement these rules can result in
;;    information leakage, cross-site scripting attacks, and the
;;    like.</p>
;;   </dd>
;;   <dt>Interoperability considerations:</dt>
;;   <dd>
;;    Rules for processing both conforming and non-conforming content
;;    are defined in this specification.
;;   </dd>
;;   <dt>Published specification:</dt>
;;   <dd>
;;    This document is the relevant specification.
;;   </dd>
;;   <dt>Applications that use this media type:</dt>
;;   <dd>
;;    Web browsers.
;;   </dd>
;;   <dt>Additional information:</dt>
;;   <dd>
;;    <dl>
;;     <dt>Magic number(s):</dt>
;;     <dd>Cache manifests begin with the string "<code title="">CACHE
;;     MANIFEST</code>", followed by either a U+0020 SPACE character, a
;;     U+0009 CHARACTER TABULATION (tab) character, a U+000A LINE FEED
;;     (LF) character, or a U+000D CARRIAGE RETURN (CR) character.</dd>
;;     <dt>File extension(s):</dt>
;;     <dd>"<code title="">manifest</code>"</dd>
;;     <dt>Macintosh file type code(s):</dt>
;;     <dd>No specific Macintosh file type codes are recommended for this type.</dd>
;;    </dl>
;;   </dd>
;;   <dt>Person &amp; email address to contact for further information:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Intended usage:</dt>
;;   <dd>Common</dd>
;;   <dt>Restrictions on usage:</dt>
;;   <dd>No restrictions apply.</dd>
;;   <dt>Author:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Change controller:</dt>
;;   <dd>WHATWG</dd>
;;  </dl>
;;
;;  <p>Fragment identifiers have no meaning with
;;  <code>text/cache-manifest</code> resources.</p>
;;
;;
;;<!--END w3c-html--><!--PING-->
;;  <h3><dfn><code>text/ping</code></dfn></h3>
;;
;;  <p>This registration is for community review and will be submitted
;;  to the IESG for review, approval, and registration with IANA.</p>
;;
;;  <!--
;;   To: ietf-types@iana.org
;;   Subject: Registration of media type text/ping
;;  -->
;;
;;  <dl>
;;   <dt>Type name:</dt>
;;   <dd>text</dd>
;;   <dt>Subtype name:</dt>
;;   <dd>ping</dd>
;;   <dt>Required parameters:</dt>
;;   <dd>No parameters</dd>
;;   <dt>Optional parameters:</dt>
;;   <dd>No parameters</dd>
;;   <dt>Encoding considerations:</dt>
;;   <dd>Not applicable.</dd>
;;   <dt>Security considerations:</dt>
;;   <dd>
;;    <p>If used exclusively in the fashion described in the context of
;;    <span>hyperlink auditing</span>, this type introduces no new
;;    security concerns.</p>
;;   </dd>
;;   <dt>Interoperability considerations:</dt>
;;   <dd>
;;    Rules applicable to this type are defined in this specification.
;;   </dd>
;;   <dt>Published specification:</dt>
;;   <dd>
;;    This document is the relevant specification.
;;   </dd>
;;   <dt>Applications that use this media type:</dt>
;;   <dd>
;;    Web browsers.
;;   </dd>
;;   <dt>Additional information:</dt>
;;   <dd>
;;    <dl>
;;     <dt>Magic number(s):</dt>
;;     <dd><code>text/ping</code> resources always consist of the four
;;     bytes 0x50 0x49 0x4E 0x47 (ASCII 'PING').</dd>
;;     <dt>File extension(s):</dt>
;;     <dd>No specific file extension is recommended for this type.</dd>
;;     <dt>Macintosh file type code(s):</dt>
;;     <dd>No specific Macintosh file type codes are recommended for this type.</dd>
;;    </dl>
;;   </dd>
;;   <dt>Person &amp; email address to contact for further information:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Intended usage:</dt>
;;   <dd>Common</dd>
;;   <dt>Restrictions on usage:</dt>
;;   <dd>Only intended for use with HTTP POST requests generated as part
;;   of a Web browser's processing of the <code
;;   title="attr-hyperlink-ping">ping</code> attribute.</dd>
;;   <dt>Author:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Change controller:</dt>
;;   <dd>WHATWG</dd>
;;  </dl>
;;
;;  <p>Fragment identifiers have no meaning with
;;  <code>text/ping</code> resources.</p>
;;<!--START w3c-html--><!--PING-->
;;
;;<!--END w3c-html--><!--TT-->
;;<div data-component="other Hixie drafts (editor: Ian Hickson)">
;;  <h3><dfn><code>text/srt</code></dfn></h3>
;;
;;  <p>This registration is for community review and will be submitted
;;  to the IESG for review, approval, and registration with IANA.</p>
;;
;;  <!--
;;   To: ietf-types@iana.org
;;   Subject: Registration of media type text/cues
;;  -->
;;
;;  <dl>
;;   <dt>Type name:</dt>
;;   <dd>text</dd>
;;   <dt>Subtype name:</dt>
;;   <dd>srt</dd>
;;   <dt>Required parameters:</dt>
;;   <dd>No parameters</dd>
;;   <dt>Optional parameters:</dt>
;;   <dd>No parameters</dd>
;;   <dt>Encoding considerations:</dt>
;;   <dd>Must always be UTF-8.</dd>
;;   <dt>Security considerations:</dt>
;;   <dd>
;;    <p>Timed track files themselves pose no immediate risk unless
;;    sensitive information is included within the
;;    data. Implementations, however, are required to follow specific
;;    rules when processing timed tracks, to ensure that certain
;;    origin-based restrictions are honored. Failure to correctly
;;    implement these rules can result in information leakage,
;;    cross-site scripting attacks, and the like.</p>
;;   </dd>
;;   <dt>Interoperability considerations:</dt>
;;   <dd>
;;    <p>Rules for processing both conforming and non-conforming content
;;    are defined in this specification.</p>
;;    <p>Some legacy files violate the requirement to use UTF-8.</p>
;;   </dd>
;;   <dt>Published specification:</dt>
;;   <dd>
;;    This document is the relevant specification.
;;   </dd>
;;   <dt>Applications that use this media type:</dt>
;;   <dd>
;;    Web browsers and other video players.
;;   </dd>
;;   <dt>Additional information:</dt>
;;   <dd>
;;    <dl>
;;     <dt>Magic number(s):</dt>
;;     <dd>No sequence of bytes can uniquely identify a WebSRT timed
;;     track file.</dd>
;;     <dt>File extension(s):</dt>
;;     <dd>"<code title="">srt</code>"</dd>
;;     <dt>Macintosh file type code(s):</dt>
;;     <dd>No specific Macintosh file type codes are recommended for this type.</dd>
;;    </dl>
;;   </dd>
;;   <dt>Person &amp; email address to contact for further information:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Intended usage:</dt>
;;   <dd>Common</dd>
;;   <dt>Restrictions on usage:</dt>
;;   <dd>No restrictions apply.</dd>
;;   <dt>Author:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Change controller:</dt>
;;   <dd>WHATWG</dd>
;;  </dl>
;;
;;  <p>Fragment identifiers have no meaning with
;;  <code>text/srt</code> resources.</p>
;;</div>
;;<!--START w3c-html--><!--TT-->
;;
;;<!--END w3c-html--><!--MD--><!--START microdata-->
;;
;;<!--END complete--><!--END epub--><!--END html-->
;;  <h4><dfn><code>application/microdata+json</code></dfn></h4>
;;<!--START complete--><!--START epub--><!--START html--><!--END microdata-->
;;  <h3><dfn><code>application/microdata+json</code></dfn></h3>
;;<!--START microdata-->
;;
;;  <p>This registration is for community review and will be submitted
;;  to the IESG for review, approval, and registration with IANA.</p>
;;
;;  <!--
;;   To: ietf-types@iana.org
;;   Subject: Registration of media type application/microdata+json
;;  -->
;;
;;  <dl>
;;   <dt>Type name:</dt>
;;   <dd>application</dd>
;;   <dt>Subtype name:</dt>
;;   <dd>microdata+json</dd>
;;   <dt>Required parameters:</dt>
;;   <dd>Same as for <code>application/json</code> <a href="#refsJSON">[JSON]</a></dd>
;;   <dt>Optional parameters:</dt>
;;   <dd>Same as for <code>application/json</code> <a href="#refsJSON">[JSON]</a></dd>
;;   <dt>Encoding considerations:</dt>
;;   <dd>Always UTF-8.</dd>
;;   <dt>Security considerations:</dt>
;;   <dd>Same as for <code>application/json</code> <a href="#refsJSON">[JSON]</a></dd>
;;   <dt>Interoperability considerations:</dt>
;;   <dd>Same as for <code>application/json</code> <a href="#refsJSON">[JSON]</a></dd>
;;   <dt>Published specification:</dt>
;;   <dd>
;;
;;    Labeling a resource with the
;;    <code>application/microdata+json</code> type asserts that the
;;    resource is a JSON text that consists of an object with a single
;;    entry called "<code title="">items</code>" consisting of an array
;;    of entries, each of which consists of an object with two entries,
;;    one called "<code title="">type</code>" whose value is an array of
;;    strings, and one called "<code title="">properties</code>" whose
;;    value is an object whose entries each have a value consisting of
;;    an array of either objects or strings, the objects being of the
;;    same form as the objects in the aforementioned "<code
;;    title="">items</code>" entry. As such, the relevant specifications
;;    are the JSON specification and this specification. <a
;;    href="#refsJSON">[JSON]</a>
;;
;;   </dd>
;;   <dt>Applications that use this media type:</dt>
;;   <dd>Same as for <code>application/json</code> <a href="#refsJSON">[JSON]</a></dd>
;;   <dt>Additional information:</dt>
;;   <dd>
;;    <dl>
;;     <dt>Magic number(s):</dt>
;;     <dd>Same as for <code>application/json</code> <a href="#refsJSON">[JSON]</a></dd>
;;     <dt>File extension(s):</dt>
;;     <dd>Same as for <code>application/json</code> <a href="#refsJSON">[JSON]</a></dd>
;;     <dt>Macintosh file type code(s):</dt>
;;     <dd>Same as for <code>application/json</code> <a href="#refsJSON">[JSON]</a></dd>
;;    </dl>
;;   </dd>
;;   <dt>Person &amp; email address to contact for further information:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Intended usage:</dt>
;;   <dd>Common</dd>
;;   <dt>Restrictions on usage:</dt>
;;   <dd>No restrictions apply.</dd>
;;   <dt>Author:</dt>
;;   <dd>Ian Hickson &lt;ian@hixie.ch></dd>
;;   <dt>Change controller:</dt>
;;   <dd>WHATWG</dd>
;;  </dl>
;;
;;  <p>Fragment identifiers used with
;;  <code>application/microdata+json</code> resources have the same
;;  semantics as when used with <code>application/json</code>. <a
;;  href="#refsJSON">[JSON]</a></p>
;;
;;<!--END microdata--><!--START w3c-html--><!--MD-->
;;
;;<!--END w3c-html--><!--PING-->
;;  <h3><dfn title="http-ping-from"><code>Ping-From</code></dfn></h3>
;;
;;  <p>This section describes a header field for registration in the
;;  Permanent Message Header Field Registry.  <a
;;  href="#refsRFC3864">[RFC3864]</a></p>
;;
;;  <dl>
;;   <dt>Header field name</dt>
;;   <dd>Ping-From</dd>
;;   <dt>Applicable protocol</dt>
;;   <dd>http</dd>
;;   <dt>Status</dt>
;;   <dd>standard</dd>
;;   <dt>Author/Change controller</dt>
;;   <dd>WHATWG</dd>
;;   <dt>Specification document(s)</dt>
;;   <dd>
;;    This document is the relevant specification.
;;   </dd>
;;   <dt>Related information</dt>
;;   <dd>None.</dd>
;;  </dl>
;;
;;
;;  <h3><dfn title="http-ping-to"><code>Ping-To</code></dfn></h3>
;;
;;  <p>This section describes a header field for registration in the
;;  Permanent Message Header Field Registry.  <a
;;  href="#refsRFC3864">[RFC3864]</a></p>
;;
;;  <dl>
;;   <dt>Header field name</dt>
;;   <dd>Ping-To</dd>
;;   <dt>Applicable protocol</dt>
;;   <dd>http</dd>
;;   <dt>Status</dt>
;;   <dd>standard</dd>
;;   <dt>Author/Change controller</dt>
;;   <dd>WHATWG</dd>
;;   <dt>Specification document(s)</dt>
;;   <dd>
;;    This document is the relevant specification.
;;   </dd>
;;   <dt>Related information</dt>
;;   <dd>None.</dd>
;;  </dl>
;;
;;<!--START w3c-html--><!--PING-->
;;
;;
;;  <h2 id="index" class="no-num">Index</h2>
;;
;;  <div class="impl">
;;
;;  <p>The following sections only cover conforming elements and features.</p>
;;
;;  </div>
;;
;;  <h3 class="no-num">Elements</h3>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <table>
;;   <caption>List of elements</caption>
;;   <thead>
;;    <tr>
;;     <th> Element
;;     <th> Description
;;     <th> Categories
;;     <th> Parents
;;     <th> Children
;;     <th> Attributes
;;     <th> Interface
;;   <tbody>
;;
;;    <tr>
;;     <th><code>a</code></th>
;;     <td>Hyperlink</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>*;
;;         <span title="Interactive content">interactive</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span>transparent</span>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-hyperlink-href">href</code>;
;;         <code title="attr-hyperlink-target">target</code>;
;;<!--END w3c-html--><!--PING-->
;;         <code title="attr-hyperlink-ping">ping</code>;
;;<!--START w3c-html--><!--PING-->
;;         <code title="attr-hyperlink-rel">rel</code>;
;;         <code title="attr-hyperlink-media">media</code>;
;;         <code title="attr-hyperlink-hreflang">hreflang</code>;
;;         <code title="attr-hyperlink-type">type</code></td>
;;     <td><code>HTMLAnchorElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>abbr</code></th>
;;     <td>Abbreviation</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>address</code></th>
;;     <td>Contact information for a page or section</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span>*</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>area</code></th>
;;     <td>Hyperlink or dead area on an image map</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span>*</td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-area-alt">alt</code>;
;;         <code title="attr-area-coords">coords</code>;
;;         <code title="attr-area-shape">shape</code>;
;;         <code title="attr-hyperlink-href">href</code>;
;;         <code title="attr-hyperlink-target">target</code>;
;;<!--END w3c-html--><!--PING-->
;;         <code title="attr-hyperlink-ping">ping</code>;
;;<!--START w3c-html--><!--PING-->
;;         <code title="attr-hyperlink-rel">rel</code>;
;;         <code title="attr-hyperlink-media">media</code>;
;;         <code title="attr-hyperlink-hreflang">hreflang</code>;
;;         <code title="attr-hyperlink-type">type</code></td>
;;     <td><code>HTMLAreaElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>article</code></th>
;;     <td>Self-contained syndicatable or reusable composition</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Sectioning content">sectioning</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>aside</code></th>
;;     <td>Sidebar for tangentially related content</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Sectioning content">sectioning</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>audio</code></th>
;;     <td>Audio player</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Embedded content">embedded</span>;
;;         <span title="Interactive content">interactive</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><code>source</code>*;
;;         <span>transparent</span>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-media-src">src</code>;
;;         <code title="attr-media-preload">preload</code>;
;;         <code title="attr-media-autoplay">autoplay</code>;
;;         <code title="attr-media-loop">loop</code>;
;;         <code title="attr-media-controls">controls</code></td>
;;     <td><code>HTMLAudioElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>b</code></th>
;;     <td>Keywords</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>base</code></th>
;;     <td>Base URL and default target <span>browsing context</span> for <span title="attr-hyperlink-target">hyperlinks</span> and <span title="attr-fs-target">forms</span></td>
;;     <td><span title="Metadata content">metadata</span></td>
;;     <td><code>head</code></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-base-href">href</code>;
;;         <code title="attr-base-target">target</code></td>
;;     <td><code>HTMLBaseElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>bdo</code></th>
;;     <td>Text directionality formatting</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>blockquote</code></th>
;;     <td>A section quoted from another source</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Sectioning root">sectioning root</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-blockquote-cite">cite</code></td>
;;     <td><code>HTMLQuoteElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>body</code></th>
;;     <td>Document body</td>
;;     <td><span title="Sectioning root">sectioning root</span></td>
;;     <td><code>html</code></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="handler-window-onafterprint">onafterprint</code>;
;;         <code title="handler-window-onbeforeprint">onbeforeprint</code>;
;;         <code title="handler-window-onbeforeunload">onbeforeunload</code>;
;;         <code title="handler-window-onblur">onblur</code>;
;;         <code title="handler-window-onerror">onerror</code>;
;;         <code title="handler-window-onfocus">onfocus</code>;
;;         <code title="handler-window-onhashchange">onhashchange</code>;
;;         <code title="handler-window-onload">onload</code>;
;;         <code title="handler-window-onmessage">onmessage</code>;
;;         <code title="handler-window-onoffline">onoffline</code>;
;;         <code title="handler-window-ononline">ononline</code>;
;;         <code title="handler-window-onpagehide">onpagehide</code>;
;;         <code title="handler-window-onpageshow">onpageshow</code>;
;;         <code title="handler-window-onpopstate">onpopstate</code>;
;;         <code title="handler-window-onredo">onredo</code>;
;;         <code title="handler-window-onresize">onresize</code>;
;;         <code title="handler-window-onstorage">onstorage</code>;
;;         <code title="handler-window-onundo">onundo</code>;
;;         <code title="handler-window-onunload">onunload</code></td>
;;     <td><code>HTMLBodyElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>br</code></th>
;;     <td>Line break, e.g. in poem or postal address</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLBRElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>button</code></th>
;;     <td>Button control</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Interactive content">interactive</span>;
;;         <span title="category-listed">listed</span>;
;;         <span title="category-label">labelable</span>;
;;         <span title="category-submit">submittable</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span>Phrasing content</span>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-fe-autofocus">autofocus</code>;
;;         <code title="attr-fe-disabled">disabled</code>;
;;         <code title="attr-fae-form">form</code>;
;;         <code title="attr-fs-formaction">formaction</code>;
;;         <code title="attr-fs-formenctype">formenctype</code>;
;;         <code title="attr-fs-formmethod">formmethod</code>;
;;         <code title="attr-fs-formnovalidate">formnovalidate</code>;
;;         <code title="attr-fs-formtarget">formtarget</code>;
;;         <code title="attr-fe-name">name</code>;
;;         <code title="attr-button-type">type</code>;
;;         <code title="attr-button-value">value</code></td>
;;     <td><code>HTMLButtonElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>canvas</code></th>
;;     <td>Scriptable bitmap canvas</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Embedded content">embedded</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span>transparent</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-canvas-width">width</code>;
;;         <code title="attr-canvas-height">height</code></td>
;;     <td><code>HTMLCanvasElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>caption</code></th>
;;     <td>Table caption</td>
;;     <td>none</td>
;;     <td><code>table</code></td>
;;     <td><span title="Flow content">flow</span>*</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLTableCaptionElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>cite</code></th>
;;     <td>Title of a work</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>code</code></th>
;;     <td>Computer code</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>col</code></th>
;;     <td>Table column</td>
;;     <td>none</td>
;;     <td><code>colgroup</code></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-col-span">span</code></td>
;;     <td><code>HTMLTableColElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>colgroup</code></th>
;;     <td>Group of columns in a table</td>
;;     <td>none</td>
;;     <td><code>table</code></td>
;;     <td><code>col</code></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-colgroup-span">span</code></td>
;;     <td><code>HTMLTableColElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>command</code></th>
;;     <td>Menu command</td>
;;     <td><span title="Metadata content">metadata</span>;
;;         <span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><code>head</code>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-command-type">type</code>;
;;         <code title="attr-command-label">label</code>;
;;         <code title="attr-command-icon">icon</code>;
;;         <code title="attr-command-disabled">disabled</code>;
;;         <code title="attr-command-checked">checked</code>;
;;         <code title="attr-command-radiogroup">radiogroup</code></td>
;;     <td><code>HTMLCommandElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>datalist</code></th>
;;     <td>Container for options for <span title="attr-input-list">combo box control</span></td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span>;
;;         <code>option</code></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLDataListElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>dd</code></th>
;;     <td>Content for corresponding <code>dt</code> element(s)</td>
;;     <td>none</td>
;;     <td><code>dl</code></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>del</code></th>
;;     <td>A removal from the document</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>*</td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span>transparent</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-mod-cite">cite</code>;
;;         <code title="attr-mod-datetime">datetime</code></td>
;;     <td><code>HTMLModElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>details</code></th>
;;     <td>Disclosure control for hiding details</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Sectioning root">sectioning root</span>;
;;         <span title="Interactive content">interactive</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><code>summary</code>*;
;;         <span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-details-open">open</code></td>
;;     <td><code>HTMLDetailsElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>dfn</code></th>
;;     <td>Defining instance</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span>*</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>div</code></th>
;;     <td>Generic flow container</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLDivElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>dl</code></th>
;;     <td>Association list consisting of zero or more name-value groups</td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><code>dt</code>*;
;;         <code>dd</code>*</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLDListElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>dt</code></th>
;;     <td>Legend for corresponding <code>dd</code> element(s)</td>
;;     <td>none</td>
;;     <td><code>dl</code></td>
;;     <td>varies*</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>em</code></th>
;;     <td>Stress emphasis</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>embed</code></th>
;;     <td><span>Plugin</span></td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Embedded content">embedded</span>;
;;         <span title="Interactive content">interactive</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-embed-src">src</code>;
;;         <code title="attr-embed-type">type</code>;
;;         <code title="attr-dim-width">width</code>;
;;         <code title="attr-dim-height">height</code>;
;;         any*</td>
;;     <td><code>HTMLEmbedElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>fieldset</code></th>
;;     <td>Group of form controls</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Sectioning root">sectioning root</span>;
;;         <span title="category-listed">listed</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><code>legend</code>*;
;;         <span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-fieldset-disabled">disabled</code>;
;;         <code title="attr-fae-form">form</code>;
;;         <code title="attr-fe-name">name</code></td>
;;     <td><code>HTMLFieldSetElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>figcaption</code></th>
;;     <td>Caption for <code>figure</code></td>
;;     <td>none</td>
;;     <td><code>figure</code></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>figure</code></th>
;;     <td>Figure with optional caption</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Sectioning root">sectioning root</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><code>figcaption</code>*;
;;         <span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>footer</code></th>
;;     <td>Footer for a page or section</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span>*</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>form</code></th>
;;     <td>User-submittable form</td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-form-accept-charset">accept-charset</code>;
;;         <code title="attr-fs-action">action</code>;
;;         <code title="attr-form-autocomplete">autocomplete</code>;
;;         <code title="attr-fs-enctype">enctype</code>;
;;         <code title="attr-fs-method">method</code>;
;;         <code title="attr-form-name">name</code>;
;;         <code title="attr-fs-novalidate">novalidate</code>;
;;         <code title="attr-fs-target">target</code></td>
;;     <td><code>HTMLFormElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>, <code>h6</code></th>
;;     <td>Section heading</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Heading content">heading</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><code>hgroup</code>;
;;         <span title="Flow content">flow</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLHeadingElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>head</code></th>
;;     <td>Container for document metadata</td>
;;     <td>none</td>
;;     <td><code>html</code></td>
;;     <td><span title="Metadata content">metadata content</span>*</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLHeadElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>header</code></th>
;;     <td>Introductory or navigational aids for a page or section</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span>*</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>hgroup</code></th>
;;     <td>heading group</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Heading content">heading</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td>One or more <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>, and/or <code>h6</code></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>hr</code></th>
;;     <td>Thematic break</td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLHRElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>html</code></th>
;;     <td>Root element</td>
;;     <td>none</td>
;;     <td>none*</td>
;;     <td><code>head</code>*;
;;         <code>body</code>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-html-manifest">manifest</code></td>
;;     <td><code>HTMLHtmlElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>i</code></th>
;;     <td>Alternate voice</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>iframe</code></th>
;;     <td><span>Nested browsing context</span></td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Embedded content">embedded</span>;
;;         <span title="Interactive content">interactive</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td>text*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-iframe-src">src</code>;
;;         <code title="attr-iframe-srcdoc">srcdoc</code>;
;;         <code title="attr-iframe-name">name</code>;
;;         <code title="attr-iframe-sandbox">sandbox</code>;
;;         <code title="attr-iframe-seamless">seamless</code>;
;;         <code title="attr-dim-width">width</code>;
;;         <code title="attr-dim-height">height</code></td>
;;     <td><code>HTMLIFrameElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>img</code></th>
;;     <td>Image</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Embedded content">embedded</span>;
;;         <span title="Interactive content">interactive</span>*</td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-img-alt">alt</code>;
;;         <code title="attr-img-src">src</code>;
;;         <code title="attr-hyperlink-usemap">usemap</code>;
;;         <code title="attr-img-ismap">ismap</code>;
;;         <code title="attr-dim-width">width</code>;
;;         <code title="attr-dim-height">height</code></td>
;;     <td><code>HTMLImageElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>input</code></th>
;;     <td>Form control</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Interactive content">interactive</span>*;
;;         <span title="category-listed">listed</span>;
;;         <span title="category-label">labelable</span>;
;;         <span title="category-submit">submittable</span>;
;;         <span title="category-reset">resettable</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-input-accept">accept</code>;
;;         <code title="attr-input-alt">alt</code>;
;;         <code title="attr-input-autocomplete">autocomplete</code>;
;;         <code title="attr-fe-autofocus">autofocus</code>;
;;         <code title="attr-input-checked">checked</code>;
;;         <code title="attr-fe-disabled">disabled</code>;
;;         <code title="attr-fae-form">form</code>;
;;         <code title="attr-fs-formaction">formaction</code>;
;;         <code title="attr-fs-formenctype">formenctype</code>;
;;         <code title="attr-fs-formmethod">formmethod</code>;
;;         <code title="attr-fs-formnovalidate">formnovalidate</code>;
;;         <code title="attr-fs-formtarget">formtarget</code>;
;;         <code title="attr-dim-height">height</code>;
;;         <code title="attr-input-list">list</code>;
;;         <code title="attr-input-max">max</code>;
;;         <code title="attr-input-maxlength">maxlength</code>;
;;         <code title="attr-input-min">min</code>;
;;         <code title="attr-input-multiple">multiple</code>;
;;         <code title="attr-fe-name">name</code>;
;;         <code title="attr-input-pattern">pattern</code>;
;;         <code title="attr-input-placeholder">placeholder</code>;
;;         <code title="attr-input-readonly">readonly</code>;
;;         <code title="attr-input-required">required</code>;
;;         <code title="attr-input-size">size</code>;
;;         <code title="attr-input-src">src</code>;
;;         <code title="attr-input-step">step</code>;
;;         <code title="attr-input-type">type</code>;
;;         <code title="attr-input-value">value</code>;
;;         <code title="attr-dim-width">width</code></td>
;;     <td><code>HTMLInputElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>ins</code></th>
;;     <td>An addition to the document</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>*</td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span>transparent</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-mod-cite">cite</code>;
;;         <code title="attr-mod-datetime">datetime</code></td>
;;     <td><code>HTMLModElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>kbd</code></th>
;;     <td>User input</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>keygen</code></th>
;;     <td>Cryptographic key-pair generator form control</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Interactive content">interactive</span>;
;;         <span title="category-listed">listed</span>;
;;         <span title="category-label">labelable</span>;
;;         <span title="category-submit">submittable</span>;
;;         <span title="category-reset">resettable</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-fe-autofocus">autofocus</code>;
;;         <code title="attr-keygen-challenge">challenge</code>;
;;         <code title="attr-fe-disabled">disabled</code>;
;;         <code title="attr-fae-form">form</code>;
;;         <code title="attr-keygen-keytype">keytype</code>;
;;         <code title="attr-fe-name">name</code></td>
;;     <td><code>HTMLKeygenElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>label</code></th>
;;     <td>Caption for a form control</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Interactive content">interactive</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-fae-form">form</code>;
;;         <code title="attr-label-for">for</code></td>
;;     <td><code>HTMLLabelElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>legend</code></th>
;;     <td>Caption for <code>fieldset</code></td>
;;     <td>none</td>
;;     <td><code>fieldset</code></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLLegendElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>li</code></th>
;;     <td>List item</td>
;;     <td>none</td>
;;     <td><code>ol</code>; <code>ul</code>; <code>menu</code></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-li-value">value</code>*</td>
;;     <td><code>HTMLLIElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>link</code></th>
;;     <td>Link metadata</td>
;;     <td><span title="Metadata content">metadata</span>;
;;         <span title="Flow content">flow</span>*;
;;         <span title="Phrasing content">phrasing</span>*</td>
;;     <td><code>head</code>;
;;         <code>noscript</code>*;
;;         <span title="phrasing content">phrasing</span>*</td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-link-href">href</code>;
;;         <code title="attr-link-rel">rel</code>;
;;         <code title="attr-link-media">media</code>;
;;         <code title="attr-link-hreflang">hreflang</code>;
;;         <code title="attr-link-type">type</code>;
;;         <code title="attr-link-sizes">sizes</code></td>
;;     <td><code>HTMLLinkElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>map</code></th>
;;     <td><span>Image map</span></td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>*</td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span>transparent</span>;
;;         <code>area</code>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-map-name">name</code></td>
;;     <td><code>HTMLMapElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>mark</code></th>
;;     <td>Highlight</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>menu</code></th>
;;     <td>Menu of commands</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Interactive content">interactive</span>*</td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><code>li</code>*;
;;         <span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-menu-type">type</code>;
;;         <code title="attr-menu-label">label</code></td>
;;     <td><code>HTMLMenuElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>meta</code></th>
;;     <td>Text metadata</td>
;;     <td><span title="Metadata content">metadata</span>;
;;         <span title="Flow content">flow</span>*;
;;         <span title="Phrasing content">phrasing</span>*</td>
;;     <td><code>head</code>;
;;         <code>noscript</code>*;
;;         <span title="phrasing content">phrasing</span>*</td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-meta-name">name</code>;
;;         <code title="attr-meta-http-equiv">http-equiv</code>;
;;         <code title="attr-meta-content">content</code>;
;;         <code title="attr-meta-charset">charset</code></td>
;;     <td><code>HTMLMetaElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>meter</code></th>
;;     <td>Gauge</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="category-label">labelable</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-meter-value">value</code>;
;;         <code title="attr-meter-min">min</code>;
;;         <code title="attr-meter-max">max</code>;
;;         <code title="attr-meter-low">low</code>;
;;         <code title="attr-meter-high">high</code>;
;;         <code title="attr-meter-optimum">optimum</code>;
;;         <code title="attr-fae-form">form</code></td>
;;     <td><code>HTMLMeterElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>nav</code></th>
;;     <td>Section with navigational links</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Sectioning content">sectioning</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>noscript</code></th>
;;     <td>Fallback content for script</td>
;;     <td><span title="Metadata content">metadata</span>;
;;         <span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><code>head</code>*;
;;         <span title="Phrasing content">phrasing</span>*</td>
;;     <td>varies*</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>object</code></th>
;;     <td>Image, <span>nested browsing context</span>, or <span>plugin</span></td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Embedded content">embedded</span>;
;;         <span title="Interactive content">interactive</span>*;
;;         <span title="category-listed">listed</span>;
;;         <span title="category-submit">submittable</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><code>param</code>*;
;;         <span>transparent</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-object-data">data</code>;
;;         <code title="attr-object-type">type</code>;
;;         <code title="attr-object-name">name</code>;
;;         <code title="attr-hyperlink-usemap">usemap</code>;
;;         <code title="attr-fae-form">form</code>;
;;         <code title="attr-dim-width">width</code>;
;;         <code title="attr-dim-height">height</code></td>
;;     <td><code>HTMLObjectElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>ol</code></th>
;;     <td>Ordered list</td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><code>li</code></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-ol-reversed">reversed</code>;
;;         <code title="attr-ol-start">start</code></td>
;;     <td><code>HTMLOListElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>optgroup</code></th>
;;     <td>Group of options in a list box</td>
;;     <td>none</td>
;;     <td><code>select</code></td>
;;     <td><code>option</code></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-optgroup-disabled">disabled</code>;
;;         <code title="attr-optgroup-label">label</code></td>
;;     <td><code>HTMLOptGroupElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>option</code></th>
;;     <td>Option in a list box or combo box control</td>
;;     <td>none</td>
;;     <td><code>select</code>;
;;         <code>datalist</code>;
;;         <code>optgroup</code></td>
;;     <td><span title="text content">text</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-option-disabled">disabled</code>;
;;         <code title="attr-option-label">label</code>;
;;         <code title="attr-option-selected">selected</code>;
;;         <code title="attr-option-value">value</code></td>
;;     <td><code>HTMLOptionElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>output</code></th>
;;     <td>Calculated output value</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="category-listed">listed</span>;
;;         <span title="category-label">labelable</span>;
;;         <span title="category-reset">resettable</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-output-for">for</code>;
;;         <code title="attr-fae-form">form</code>;
;;         <code title="attr-fe-name">name</code></td>
;;     <td><code>HTMLOutputElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>p</code></th>
;;     <td>Paragraph</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLParagraphElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>param</code></th>
;;     <td>Parameter for <code>object</code></td>
;;     <td>none</td>
;;     <td><code>object</code></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-param-name">name</code>;
;;         <code title="attr-param-value">value</code></td>
;;     <td><code>HTMLParamElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>pre</code></th>
;;     <td>Block of preformatted text</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLPreElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>progress</code></th>
;;     <td>Progress bar</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="category-label">labelable</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-progress-value">value</code>;
;;         <code title="attr-progress-max">max</code>;
;;         <code title="attr-fae-form">form</code></td>
;;     <td><code>HTMLProgressElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>q</code></th>
;;     <td>Quotation</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-q-cite">cite</code></td>
;;     <td><code>HTMLQuoteElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>rp</code></th>
;;     <td>Parenthesis for ruby annotation text</td>
;;     <td>none</td>
;;     <td><code>ruby</code></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>rt</code></th>
;;     <td>Ruby annotation text</td>
;;     <td>none</td>
;;     <td><code>ruby</code></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>ruby</code></th>
;;     <td>Ruby annotation(s)</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span>;
;;         <code>rt</code> element;
;;         <code>rp</code> element*</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>samp</code></th>
;;     <td>Computer output</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>script</code></th>
;;     <td>Embedded script</td>
;;     <td><span title="Metadata content">metadata</span>;
;;         <span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><code>head</code>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td>script, data, or script documentation*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-script-src">src</code>;
;;         <code title="attr-script-async">async</code>;
;;         <code title="attr-script-defer">defer</code>;
;;         <code title="attr-script-type">type</code>;
;;         <code title="attr-script-charset">charset</code></td>
;;     <td><code>HTMLScriptElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>section</code></th>
;;     <td>Generic document or application section</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Sectioning content">sectioning</span>;
;;         <span title="formatBlock candidate"><code title="">formatBlock</code> candidate</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>select</code></th>
;;     <td>List box control</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Interactive content">interactive</span>;
;;         <span title="category-listed">listed</span>;
;;         <span title="category-label">labelable</span>;
;;         <span title="category-submit">submittable</span>;
;;         <span title="category-reset">resettable</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><code>option</code>, <code>optgroup</code></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-fe-autofocus">autofocus</code>;
;;         <code title="attr-fe-disabled">disabled</code>;
;;         <code title="attr-fae-form">form</code>;
;;         <code title="attr-select-multiple">multiple</code>;
;;         <code title="attr-fe-name">name</code>;
;;         <code title="attr-select-required">required</code>;
;;         <code title="attr-select-size">size</code></td>
;;     <td><code>HTMLSelectElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>small</code></th>
;;     <td>Side comment</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>source</code></th>
;;     <td>Media source for <code>video</code> or <code>audio</code></td>
;;     <td>none</td>
;;     <td><code>video</code>;
;;         <code>audio</code></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-source-src">src</code>;
;;         <code title="attr-source-type">type</code>;
;;         <code title="attr-source-media">media</code></td>
;;     <td><code>HTMLSourceElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>span</code></th>
;;     <td>Generic phrasing container</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLSpanElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>strong</code></th>
;;     <td>Importance</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>style</code></th>
;;     <td>Embedded styling information</td>
;;     <td><span title="Metadata content">metadata</span>;
;;         <span title="Flow content">flow</span></td>
;;     <td><code>head</code>;
;;         <code>noscript</code>*;
;;         <span title="flow content">flow</span>*</td>
;;     <td>varies*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-style-media">media</code>;
;;         <code title="attr-style-type">type</code>;
;;         <code title="attr-style-scoped">scoped</code></td>
;;     <td><code>HTMLStyleElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>sub</code></th>
;;     <td>Subscript</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>summary</code></th>
;;     <td>Caption for <code>details</code></td>
;;     <td>none</td>
;;     <td><code>details</code></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>sup</code></th>
;;     <td>Superscript</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>table</code></th>
;;     <td>Table</td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><code>caption</code>*;
;;         <code>colgroup</code>*;
;;         <code>thead</code>*;
;;         <code>tbody</code>*;
;;         <code>tfoot</code>*;
;;         <code>tr</code>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-table-summary">summary</code></td>
;;     <td><code>HTMLTableElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>tbody</code></th>
;;     <td>Group of rows in a table</td>
;;     <td>none</td>
;;     <td><code>table</code></td>
;;     <td><code>tr</code></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLTableSectionElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>td</code></th>
;;     <td>Table cell</td>
;;     <td><span title="Sectioning root">sectioning root</span></td>
;;     <td><code>tr</code></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-tdth-colspan">colspan</code>;
;;         <code title="attr-tdth-rowspan">rowspan</code>;
;;         <code title="attr-tdth-headers">headers</code></td>
;;     <td><code>HTMLTableDataCellElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>textarea</code></th>
;;     <td>Multiline text field</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Interactive content">interactive</span>;
;;         <span title="category-listed">listed</span>;
;;         <span title="category-label">labelable</span>;
;;         <span title="category-submit">submittable</span>;
;;         <span title="category-reset">resettable</span>;
;;         <span title="Form-associated element">form-associated</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="text content">text</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-fe-autofocus">autofocus</code>;
;;         <code title="attr-textarea-cols">cols</code>;
;;         <code title="attr-fe-disabled">disabled</code>;
;;         <code title="attr-fae-form">form</code>;
;;         <code title="attr-textarea-maxlength">maxlength</code>;
;;         <code title="attr-fe-name">name</code>;
;;         <code title="attr-textarea-placeholder">placeholder</code>;
;;         <code title="attr-textarea-readonly">readonly</code>;
;;         <code title="attr-textarea-required">required</code>;
;;         <code title="attr-textarea-rows">rows</code>;
;;         <code title="attr-textarea-wrap">wrap</code></td>
;;     <td><code>HTMLTextAreaElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>tfoot</code></th>
;;     <td>Group of footer rows in a table</td>
;;     <td>none</td>
;;     <td><code>table</code></td>
;;     <td><code>tr</code></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLTableSectionElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>th</code></th>
;;     <td>Table header cell</td>
;;     <td>none</td>
;;     <td><code>tr</code></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-tdth-colspan">colspan</code>;
;;         <code title="attr-tdth-rowspan">rowspan</code>;
;;         <code title="attr-tdth-headers">headers</code>;
;;         <code title="attr-th-scope">scope</code></td>
;;     <td><code>HTMLTableHeaderCellElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>thead</code></th>
;;     <td>Group of heading rows in a table</td>
;;     <td>none</td>
;;     <td><code>table</code></td>
;;     <td><code>tr</code></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLTableSectionElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>time</code></th>
;;     <td>Date and/or time</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-time-datetime">datetime</code>;
;;         <code title="attr-time-pubdate">pubdate</code></td>
;;     <td><code>HTMLTimeElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>title</code></th>
;;     <td>Document title</td>
;;     <td><span title="Metadata content">metadata</span></td>
;;     <td><code>head</code></td>
;;     <td><span title="text content">text</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLTitleElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>tr</code></th>
;;     <td>Table row</td>
;;     <td>none</td>
;;     <td><code>table</code>;
;;         <code>thead</code>;
;;         <code>tbody</code>;
;;         <code>tfoot</code></td>
;;     <td><code>th</code>*;
;;         <code>td</code></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLTableRowElement</code></td>
;;    </tr>
;;
;;<!--END w3c-html--><!--TT-->
;;    <tr>
;;     <th><code>track</code></th>
;;     <td>Timed track</td>
;;     <td>none</td>
;;     <td><code>audio</code>;
;;         <code>video</code></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-track-kind">kind</code>;
;;         <code title="attr-track-label">label</code>;
;;         <code title="attr-track-src">src</code>;
;;         <code title="attr-track-srclang">srclang</code></td>
;;     <td><code>HTMLTrackElement</code></td>
;;    </tr>
;;<!--START w3c-html--><!--TT-->
;;
;;    <tr>
;;     <th><code>ul</code></th>
;;     <td>List</td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><span title="Flow content">flow</span></td>
;;     <td><code>li</code></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLUListElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>var</code></th>
;;     <td>Variable</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>video</code></th>
;;     <td>Video player</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span>;
;;         <span title="Embedded content">embedded</span>;
;;         <span title="Interactive content">interactive</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td><code>source</code>*;
;;         <span>transparent</span>*</td>
;;     <td><span title="global attributes">globals</span>;
;;         <code title="attr-media-src">src</code>;
;;         <code title="attr-video-poster">poster</code>;
;;         <code title="attr-media-preload">preload</code>;
;;         <code title="attr-media-autoplay">autoplay</code>;
;;         <code title="attr-media-loop">loop</code>;
;;         <code title="attr-media-controls">controls</code>;
;;         <code title="attr-dim-width">width</code>;
;;         <code title="attr-dim-height">height</code></td>
;;     <td><code>HTMLVideoElement</code></td>
;;    </tr>
;;
;;    <tr>
;;     <th><code>wbr</code></th>
;;     <td>Line breaking opportunity</td>
;;     <td><span title="Flow content">flow</span>;
;;         <span title="Phrasing content">phrasing</span></td>
;;     <td><span title="Phrasing content">phrasing</span></td>
;;     <td>empty</td>
;;     <td><span title="global attributes">globals</span></td>
;;     <td><code>HTMLElement</code></td>
;;    </tr>
;;
;;  </table>
;;  <p>An asterisk (*) in a cell indicates that the actual rules are more complicated than indicated in the table above.</p>
;;
;;
;;
;;
;;  <h3 class="no-num">Element content categories</h3>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <!-- when updating this also check the category-list <ul>s -->
;;
;;  <table>
;;   <caption>List of element content categories</caption>
;;   <thead>
;;    <tr>
;;     <th> Category
;;     <th> Elements
;;     <th> Elements with exceptions
;;   <tbody>
;;    <tr>
;;     <td> <span>Metadata content</span>
;;     <td>
;;      <code>base</code>;
;;      <code>command</code>;
;;      <code>link</code>;
;;      <code>meta</code>;
;;      <code>noscript</code>;
;;      <code>script</code>;
;;      <code>style</code>;
;;      <code>title</code>
;;     <td>
;;      &mdash;
;;
;;    <tr>
;;     <td> <span>Flow content</span>
;;     <td>
;;      <code>a</code>;
;;      <code>abbr</code>;
;;      <code>address</code>;
;;      <code>article</code>;
;;      <code>aside</code>;
;;      <code>audio</code>;
;;      <code>b</code>;
;;      <code>bdo</code>;
;;      <code>blockquote</code>;
;;      <code>br</code>;
;;      <code>button</code>;
;;      <code>canvas</code>;
;;      <code>cite</code>;
;;      <code>code</code>;
;;      <code>command</code>;
;;      <!-- v2DATAGRID <code>datagrid</code>; -->
;;      <code>datalist</code>;
;;      <code>del</code>;
;;      <code>details</code>;
;;      <code>dfn</code>;
;;      <code>div</code>;
;;      <code>dl</code>;
;;      <code>em</code>;
;;      <code>embed</code>;
;;      <code>fieldset</code>;
;;      <code>figure</code>;
;;      <code>footer</code>;
;;      <code>form</code>;
;;      <code>h1</code>;
;;      <code>h2</code>;
;;      <code>h3</code>;
;;      <code>h4</code>;
;;      <code>h5</code>;
;;      <code>h6</code>;
;;      <code>header</code>;
;;      <code>hgroup</code>;
;;      <code>hr</code>;
;;      <code>i</code>;
;;      <code>iframe</code>;
;;      <code>img</code>;
;;      <code>input</code>;
;;      <code>ins</code>;
;;      <code>kbd</code>;
;;      <code>keygen</code>;
;;      <code>label</code>;
;;      <code>map</code>;
;;      <code>mark</code>;
;;      <code>math</code>;
;;      <code>menu</code>;
;;      <code>meter</code>;
;;      <code>nav</code>;
;;      <code>noscript</code>;
;;      <code>object</code>;
;;      <code>ol</code>;
;;      <code>output</code>;
;;      <code>p</code>;
;;      <code>pre</code>;
;;      <code>progress</code>;
;;      <code>q</code>;
;;      <code>ruby</code>;
;;      <code>samp</code>;
;;      <code>script</code>;
;;      <code>section</code>;
;;      <code>select</code>;
;;      <code>small</code>;
;;      <code>span</code>;
;;      <code>strong</code>;
;;      <code>sub</code>;
;;      <code>sup</code>;
;;      <code>svg</code>;
;;      <code>table</code>;
;;      <code>textarea</code>;
;;      <code>time</code>;
;;      <code>ul</code>;
;;      <code>var</code>;
;;      <code>video</code>;
;;      <code>wbr</code>;
;;      <span title="text content">Text</span>
;;     <td>
;;      <code>area</code> (if it is a descendant of a <code>map</code> element);
;;      <!--END w3c-html--><!--MD-->
;;      <code>link</code> (if the <code title="attr-itemprop">itemprop</code> attribute is present);
;;      <code>meta</code> (if the <code title="attr-itemprop">itemprop</code> attribute is present);
;;      <!--START w3c-html--><!--MD-->
;;      <code>style</code> (if the <code title="attr-style-scoped">scoped</code> attribute is present)
;;
;;    <tr>
;;     <td> <span>Sectioning content</span>
;;     <td>
;;      <code>article</code>;
;;      <code>aside</code>;
;;      <code>nav</code>;
;;      <code>section</code>
;;     <td>
;;      &mdash;
;;
;;    <tr>
;;     <td> <span>Heading content</span>
;;     <td>
;;      <code>h1</code>;
;;      <code>h2</code>;
;;      <code>h3</code>;
;;      <code>h4</code>;
;;      <code>h5</code>;
;;      <code>h6</code>;
;;      <code>hgroup</code>
;;     <td>
;;      &mdash;
;;
;;    <tr>
;;     <td> <span>Phrasing content</span>
;;     <td>
;;      <code>abbr</code>;
;;      <code>audio</code>;
;;      <code>b</code>;
;;      <code>bdo</code>;
;;      <code>br</code>;
;;      <code>button</code>;
;;      <code>canvas</code>;
;;      <code>cite</code>;
;;      <code>code</code>;
;;      <code>command</code>;
;;      <code>datalist</code>;
;;      <code>dfn</code>;
;;      <code>em</code>;
;;      <code>embed</code>;
;;      <code>i</code>;
;;      <code>iframe</code>;
;;      <code>img</code>;
;;      <code>input</code>;
;;      <code>kbd</code>;
;;      <code>keygen</code>;
;;      <code>label</code>;
;;      <code>mark</code>;
;;      <code>math</code>;
;;      <code>meter</code>;
;;      <code>noscript</code>;
;;      <code>object</code>;
;;      <code>output</code>;
;;      <code>progress</code>;
;;      <code>q</code>;
;;      <code>ruby</code>;
;;      <code>samp</code>;
;;      <code>script</code>;
;;      <code>select</code>;
;;      <code>small</code>;
;;      <code>span</code>;
;;      <code>strong</code>;
;;      <code>sub</code>;
;;      <code>sup</code>;
;;      <code>svg</code>;
;;      <code>textarea</code>;
;;      <code>time</code>;
;;      <code>var</code>;
;;      <code>video</code>;
;;      <code>wbr</code>;
;;      <span title="text content">Text</span>
;;     <td>
;;      <code>a</code> (if it contains only <span>phrasing content</span>);
;;      <code>area</code> (if it is a descendant of a  <code>map</code> element);
;;      <code>del</code> (if it contains only <span>phrasing content</span>);
;;      <code>ins</code> (if it contains only <span>phrasing content</span>);
;;      <!--END w3c-html--><!--MD-->
;;      <code>link</code> (if the <code title="attr-itemprop">itemprop</code> attribute is present);
;;      <!--START w3c-html--><!--MD-->
;;      <code>map</code> (if it contains only <span>phrasing content</span>)<!--
;;      --><!--END w3c-html--><!--MD--><!--
;;      -->; <code>meta</code> (if the <code title="attr-itemprop">itemprop</code> attribute is present)<!--
;;      --><!--START w3c-html--><!--MD--><!--
;;      -->
;;
;;    <tr>
;;     <td> <span>Embedded content</span>
;;     <td>
;;      <code>audio</code>
;;      <code>canvas</code>
;;      <code>embed</code>
;;      <code>iframe</code>
;;      <code>img</code>
;;      <code>math</code>
;;      <code>object</code>
;;      <code>svg</code>
;;      <code>video</code>
;;     <td>
;;      &mdash;
;;
;;    <tr>
;;     <td> <span>Interactive content</span>
;;     <td>
;;      <code>a</code>;
;;      <code>button</code>;
;;      <!-- v2DATAGRID <code>datagrid</code>; -->
;;      <code>details</code>;
;;      <code>embed</code>;
;;      <code>iframe</code>;
;;      <code>keygen</code>;
;;      <code>label</code>;
;;      <code>select</code>;
;;      <code>textarea</code>;
;;     <td>
;;      <code>audio</code> (if the <code title="attr-media-controls">controls</code> attribute is present);
;;      <code>img</code> (if the <code title="attr-hyperlink-usemap">usemap</code> attribute is present);
;;      <code>input</code> (if the <code title="attr-input-type">type</code> attribute is <em>not</em> in the <span title="attr-input-type-hidden">Hidden</span> state);
;;      <code>menu</code> (if the <code title="attr-menu-type">type</code> attribute is in the <span title="toolbar state">toolbar</span> state);
;;      <code>object</code> (if the <code title="attr-hyperlink-usemap">usemap</code> attribute is present)<!-- see also comment in <object> section -->;
;;      <code>video</code> (if the <code title="attr-media-controls">controls</code> attribute is present)
;;
;;    <tr>
;;     <td> <span title="sectioning root">Sectioning roots</span>
;;     <td>
;;      <code>blockquote</code>;
;;      <code>body</code>;
;;      <!-- v2DATAGRID <code>datagrid</code>; -->
;;      <code>details</code>;
;;      <code>fieldset</code>;
;;      <code>figure</code>;
;;      <code>td</code>
;;     <td>
;;      &mdash;
;;
;;    <tr>
;;     <td> <span title="form-associated element">Form-associated elements</span>
;;     <td>
;;      <code>button</code>;
;;      <code>fieldset</code>;
;;      <code>input</code>;
;;      <code>keygen</code>;
;;      <code>label</code>;
;;      <code>meter</code>;
;;      <code>object</code>;
;;      <code>output</code>;
;;      <code>progress</code>;
;;      <code>select</code>;
;;      <code>textarea</code>
;;     <td>
;;      &mdash;
;;
;;    <tr>
;;     <td> <span title="category-listed">Listed elements</span>
;;     <td>
;;      <code>button</code>;
;;      <code>fieldset</code>;
;;      <code>input</code>;
;;      <code>keygen</code>;
;;      <code>object</code>;
;;      <code>output</code>;
;;      <code>select</code>;
;;      <code>textarea</code>
;;     <td>
;;      &mdash;
;;
;;    <tr>
;;     <td> <span title="category-label">Labelable elements</span>
;;     <td>
;;      <code>button</code>;
;;      <code>input</code>;
;;      <code>keygen</code>;
;;      <code>meter</code>;
;;      <code>output</code>;
;;      <code>progress</code>;
;;      <code>select</code>;
;;      <code>textarea</code>
;;     <td>
;;      &mdash;
;;
;;    <tr>
;;     <td> <span title="category-submit">Submittable elements</span>
;;     <td>
;;      <code>button</code>;
;;      <code>input</code>;
;;      <code>keygen</code>;
;;      <code>object</code>;
;;      <code>select</code>;
;;      <code>textarea</code>
;;     <td>
;;      &mdash;
;;
;;    <tr>
;;     <td> <span title="category-reset">Resettable elements</span>
;;     <td>
;;      <code>input</code>;
;;      <code>keygen</code>;
;;      <code>output</code>;
;;      <code>select</code>;
;;      <code>textarea</code>
;;     <td>
;;      &mdash;
;;
;;    <tr>
;;     <td> <span title="formatBlock candidate"><code title="">formatBlock</code> candidates</span>
;;     <td>
;;      <code>section</code>;
;;      <code>nav</code>;
;;      <code>article</code>;
;;      <code>aside</code>;
;;      <code>h1</code>;
;;      <code>h2</code>;
;;      <code>h3</code>;
;;      <code>h4</code>;
;;      <code>h5</code>;
;;      <code>h6</code>;
;;      <code>hgroup</code>;
;;      <code>header</code>;
;;      <code>footer</code>;
;;      <code>address</code>;
;;      <code>p</code>;
;;      <code>pre</code>;
;;      <code>blockquote</code>;
;;      <code>div</code>
;;     <td>
;;      &mdash;
;;
;;  </table>
;;
;;
;;
;;  <h3 class="no-num">Attributes</h3>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <table>
;;   <caption>List of attributes (excluding event handler content attributes)</caption>
;;   <thead>
;;    <tr>
;;     <th> Attribute
;;     <th> Element(s)
;;     <th> Description
;;     <th> Value
;;   <tbody>
;;    <tr>
;;     <th> <code title="">accept</code>
;;     <td> <code title="attr-input-accept">input</code>
;;     <td> Hint for expected file type in <span title="attr-input-type-file">file upload controls</span>
;;     <td> <span>Set of comma-separated tokens</span>* consisting of <span title="valid MIME type">valid MIME types with no parameters</span> or <code title="">audio/*</code>, <code title="">video/*</code>, or <code title="">image/*</code>
;;    <tr>
;;     <th> <code title="">accept-charset</code>
;;     <td> <code title="attr-form-accept-charset">form</code>
;;     <td> Character encodings to use for <span>form submission</span>
;;     <td> <span>Ordered set of unique space-separated tokens</span> consisting of <span title="preferred MIME name">preferred MIME names</span> of <span title="ASCII-compatible character encoding">ASCII-compatible character encodings</span>*
;;    <tr>
;;     <th> <code title="">accesskey</code>
;;     <td> <span title="attr-accesskey">HTML elements</span>
;;     <td> Keyboard shortcut to activate or focus element
;;     <td> <span>Ordered set of unique space-separated tokens</span> consisting of one Unicode code point in length
;;    <tr>
;;     <th> <code title="">action</code>
;;     <td> <code title="attr-fs-action">form</code>
;;     <td> <span>URL</span> to use for <span>form submission</span>
;;     <td> <span>Valid URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">alt</code>
;;     <td> <code title="attr-area-alt">area</code>;
;;          <code title="attr-img-alt">img</code>;
;;          <code title="attr-input-alt">input</code>
;;     <td> Replacement text for use when images are not available
;;     <td> <a href="#attribute-text">Text</a>*
;;    <tr>
;;     <th> <code title="">async</code>
;;     <td> <code title="attr-script-async">script</code>
;;     <td> Execute script asynchronously
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">autocomplete</code>
;;     <td> <code title="attr-form-autocomplete">form</code>;
;;          <code title="attr-input-autocomplete">input</code>
;;     <td> Prevent the user agent from providing autocompletions for the form control(s)
;;     <td> "<code title="">on</code>"; "<code title="">off</code>"
;;    <tr>
;;     <th> <code title="">autofocus</code>
;;     <td> <code title="attr-fe-autofocus">button</code>;
;;          <code title="attr-fe-autofocus">input</code>;
;;          <code title="attr-fe-autofocus">keygen</code>;
;;          <code title="attr-fe-autofocus">select</code>;
;;          <code title="attr-fe-autofocus">textarea</code>
;;     <td> Automatically focus the form control when the page is loaded
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">autoplay</code>
;;     <td> <code title="attr-media-autoplay">audio</code>;
;;          <code title="attr-media-autoplay">video</code>
;;     <td> Hint that the <span>media resource</span> can be started automatically when the page is loaded
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">challenge</code>
;;     <td> <code title="attr-keygen-challenge">keygen</code>
;;     <td> String to package with the generated and signed public key
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">charset</code>
;;     <td> <code title="attr-meta-charset">meta</code>
;;     <td> <span>Character encoding declaration</span>
;;     <td> <span>Preferred MIME name</span> of an encoding*
;;    <tr>
;;     <th> <code title="">charset</code>
;;     <td> <code title="attr-script-charset">script</code>
;;     <td> Character encoding of the external script resource
;;     <td> <span>Preferred MIME name</span> of an encoding*
;;    <tr>
;;     <th> <code title="">checked</code>
;;     <td> <code title="attr-command-checked">command</code>;
;;          <code title="attr-input-checked">input</code>
;;     <td> Whether the command or control is checked
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">cite</code>
;;     <td> <code title="attr-blockquote-cite">blockquote</code>;
;;          <code title="attr-mod-cite">del</code>;
;;          <code title="attr-mod-cite">ins</code>;
;;          <code title="attr-q-cite">q</code>
;;     <td> Link to the source of the quotation or more information about the edit
;;     <td> <span>Valid URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">class</code>
;;     <td> <span title="attr-class">HTML elements</span>
;;     <td> Classes to which the element belongs
;;     <td> <span>Unordered set of unique space-separated tokens</span>
;;    <tr>
;;     <th> <code title="">cols</code>
;;     <td> <code title="attr-textarea-cols">textarea</code>
;;     <td> Maximum number of characters per line
;;     <td> <span>Valid non-negative integer</span> greater than zero
;;    <tr>
;;     <th> <code title="">colspan</code>
;;     <td> <code title="attr-tdth-colspan">td</code>;
;;          <code title="attr-tdth-colspan">th</code>
;;     <td> Number of columns that the cell is to span
;;     <td> <span>Valid non-negative integer</span> greater than zero
;;    <tr>
;;     <th> <code title="">content</code>
;;     <td> <code title="attr-meta-content">meta</code>
;;     <td> Value of the element
;;     <td> <a href="#attribute-text">Text</a>*
;;    <tr>
;;     <th> <code title="">contenteditable</code>
;;     <td> <span title="attr-contenteditable">HTML elements</span>
;;     <td> Whether the element is <span>editable</span>
;;     <td> "<code title="">true</code>"; "<code title="">false</code>"
;;    <tr>
;;     <th> <code title="">contextmenu</code>
;;     <td> <span title="attr-contextmenu">HTML elements</span>
;;     <td> The element's context menu
;;     <td> <span title="concept-id">ID</span>*
;;    <tr>
;;     <th> <code title="">controls</code>
;;     <td> <code title="attr-media-controls">audio</code>;
;;          <code title="attr-media-controls">video</code>
;;     <td> Show user agent controls
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">coords</code>
;;     <td> <code title="attr-area-coords">area</code>
;;     <td> Coordinates for the shape to be created in an <span>image map</span>
;;     <td> <span>Valid list of integers</span>*
;;    <tr>
;;     <th> <code title="">data</code>
;;     <td> <code title="attr-object-data">object</code>
;;     <td> Address of the resource
;;     <td> <span>Valid non-empty URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">datetime</code>
;;     <td> <code title="attr-mod-datetime">del</code>;
;;          <code title="attr-mod-datetime">ins</code>
;;     <td> Date and (optionally) time of the change
;;     <td> <span>Valid date string with optional time</span>
;;    <tr>
;;     <th> <code title="">datetime</code>
;;     <td> <code title="attr-time-datetime">time</code>
;;     <td> Value of the element
;;     <td> <span>Valid date or time string</span>*
;;    <tr>
;;     <th> <code title="">defer</code>
;;     <td> <code title="attr-script-defer">script</code>
;;     <td> Defer script execution
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">dir</code>
;;     <td> <span title="attr-dir">HTML elements</span>
;;     <td> <span title="the directionality">The text directionality</span> of the element
;;     <td> "<code title="">ltr</code>"; "<code title="">rtl</code>"
;;    <tr>
;;     <th> <code title="">disabled</code>
;;     <td> <code title="attr-fe-disabled">button</code>;
;;          <code title="attr-command-disabled">command</code>;
;;          <code title="attr-fieldset-disabled">fieldset</code>;
;;          <code title="attr-fe-disabled">input</code>;
;;          <code title="attr-fe-disabled">keygen</code>;
;;          <code title="attr-optgroup-disabled">optgroup</code>;
;;          <code title="attr-option-disabled">option</code>;
;;          <code title="attr-fe-disabled">select</code>;
;;          <code title="attr-fe-disabled">textarea</code>
;;     <td> Whether the form control is disabled
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">draggable</code>
;;     <td> <span title="attr-draggable">HTML elements</span>
;;     <td> Whether the element is draggable
;;     <td> "<code title="">true</code>"; "<code title="">false</code>"
;;    <tr>
;;     <th> <code title="">enctype</code>
;;     <td> <code title="attr-fs-enctype">form</code>
;;     <td> Form data set encoding type to use for <span>form submission</span>
;;     <td> "<code title="attr-fs-enctype-urlencoded">application/x-www-form-urlencoded</code>"; "<code title="attr-fs-enctype-formdata">multipart/form-data</code>"; "<code title="attr-fs-enctype-text">text/plain</code>"
;;    <tr>
;;     <th> <code title="">for</code>
;;     <td> <code title="attr-label-for">label</code>
;;     <td> Associate the label with form control
;;     <td> <span title="concept-id">ID</span>*
;;    <tr>
;;     <th> <code title="">for</code>
;;     <td> <code title="attr-output-for">output</code>
;;     <td> Specifies controls from which the output was calculated
;;     <td> <span>Unordered set of unique space-separated tokens</span> consisting of IDs*
;;    <tr>
;;     <th> <code title="">form</code>
;;     <td> <code title="attr-fae-form">button</code>;
;;          <code title="attr-fae-form">fieldset</code>;
;;          <code title="attr-fae-form">input</code>;
;;          <code title="attr-fae-form">keygen</code>;
;;          <code title="attr-fae-form">label</code>;
;;          <code title="attr-fae-form">meter</code>;
;;          <code title="attr-fae-form">object</code>;
;;          <code title="attr-fae-form">output</code>;
;;          <code title="attr-fae-form">progress</code>;
;;          <code title="attr-fae-form">select</code>;
;;          <code title="attr-fae-form">textarea</code>
;;     <td> Associates the control with a <code>form</code> element
;;     <td> <span title="concept-id">ID</span>*
;;    <tr>
;;     <th> <code title="">formaction</code>
;;     <td> <code title="attr-fs-formaction">button</code>;
;;          <code title="attr-fs-formaction">input</code>
;;     <td> <span>URL</span> to use for <span>form submission</span>
;;     <td> <span>Valid URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">formenctype</code>
;;     <td> <code title="attr-fs-formenctype">button</code>;
;;          <code title="attr-fs-formenctype">input</code>
;;     <td> Form data set encoding type to use for <span>form submission</span>
;;     <td> "<code title="attr-fs-enctype-urlencoded">application/x-www-form-urlencoded</code>"; "<code title="attr-fs-enctype-formdata">multipart/form-data</code>"; "<code title="attr-fs-enctype-text">text/plain</code>"
;;    <tr>
;;     <th> <code title="">formmethod</code>
;;     <td> <code title="attr-fs-formmethod">button</code>;
;;          <code title="attr-fs-formmethod">input</code>
;;     <td> HTTP method to use for <span>form submission</span>
;;     <td> "<code title="">GET</code>"; "<code title="">POST</code>"; "<code title="">PUT</code>"; "<code title="">DELETE</code>"
;;    <tr>
;;     <th> <code title="">formnovalidate</code>
;;     <td> <code title="attr-fs-formnovalidate">button</code>;
;;          <code title="attr-fs-formnovalidate">input</code>
;;     <td> Bypass form control validation for <span>form submission</span>
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">formtarget</code>
;;     <td> <code title="attr-fs-formtarget">button</code>;
;;          <code title="attr-fs-formtarget">input</code>
;;     <td> <span>Browsing context</span> for <span>form submission</span>
;;     <td> <span>Valid browsing context name or keyword</span>
;;    <tr>
;;     <th> <code title="">headers</code>
;;     <td> <code title="attr-tdth-headers">td</code>;
;;          <code title="attr-tdth-headers">th</code>
;;     <td> The header cells for this cell
;;     <td> <span>Unordered set of unique space-separated tokens</span> consisting of IDs*
;;    <tr>
;;     <th> <code title="">height</code>
;;     <td> <code title="attr-canvas-height">canvas</code>;
;;          <code title="attr-dim-height">embed</code>;
;;          <code title="attr-dim-height">iframe</code>;
;;          <code title="attr-dim-height">img</code>;
;;          <code title="attr-dim-height">input</code>;
;;          <code title="attr-dim-height">object</code>;
;;          <code title="attr-dim-height">video</code>
;;     <td> Vertical dimension
;;     <td> <span>Valid non-negative integer</span>
;;    <tr>
;;     <th> <code title="">hidden</code>
;;     <td> <span title="attr-hidden">HTML elements</span>
;;     <td> Whether the element is relevant
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">high</code>
;;     <td> <code title="attr-meter-high">meter</code>
;;     <td> Low limit of high range
;;     <td> <span>Valid floating point number</span>*
;;    <tr>
;;     <th> <code title="">href</code>
;;     <td> <code title="attr-hyperlink-href">a</code>;
;;          <code title="attr-hyperlink-href">area</code>
;;     <td> Address of the <span>hyperlink</span>
;;     <td> <span>Valid URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">href</code>
;;     <td> <code title="attr-link-href">link</code>
;;     <td> Address of the <span>hyperlink</span>
;;     <td> <span>Valid non-empty URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">href</code>
;;     <td> <code title="attr-base-href">base</code>
;;     <td> <span>Document base URL</span>
;;     <td> <span>Valid URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">hreflang</code>
;;     <td> <code title="attr-hyperlink-hreflang">a</code>;
;;          <code title="attr-hyperlink-hreflang">area</code>;
;;          <code title="attr-link-hreflang">link</code>
;;     <td> Language of the linked resource
;;     <td> Valid BCP 47 language tag
;;    <tr>
;;     <th> <code title="">http-equiv</code>
;;     <td> <code title="attr-meta-http-equiv">meta</code>
;;     <td> Pragma directive
;;     <td> <a href="#attribute-text">Text</a>*
;;    <tr>
;;     <th> <code title="">icon</code>
;;     <td> <code title="attr-command-icon">command</code>
;;     <td> Icon for the command
;;     <td> <span>Valid non-empty URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">id</code>
;;     <td> <span title="attr-id">HTML elements</span>
;;     <td> The element's <span title="concept-id">ID</span>
;;     <td> <a href="#attribute-text">Text</a>*
;;    <tr>
;;     <th> <code title="">ismap</code>
;;     <td> <code title="attr-img-ismap">img</code>
;;     <td> Whether the image is a server-side image map
;;     <td> <span>Boolean attribute</span>
;;<!--END w3c-html--><!--MD-->
;;    <tr>
;;     <th> <code title="">itemid</code>
;;     <td> <span title="attr-itemid">HTML elements</span>
;;     <td> <span>Global identifier</span> for a microdata item
;;     <td> <span>Valid URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">itemprop</code>
;;     <td> <span title="attr-itemprop">HTML elements</span>
;;     <td> <span>Property names</span> of a microdata item
;;     <td> <span>Unordered set of unique space-separated tokens</span> consisting of <span title="absolute URL">valid absolute URLs</span>, <span title="defined property name">defined property names</span>, or text*
;;    <tr>
;;     <th> <code title="">itemref</code>
;;     <td> <span title="attr-itemref">HTML elements</span>
;;     <td> Referenced elements
;;     <td> <span>Unordered set of unique space-separated tokens</span> consisting of IDs*
;;    <tr>
;;     <th> <code title="">itemscope</code>
;;     <td> <span title="attr-itemscope">HTML elements</span>
;;     <td> Introduces a microdata item
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">itemtype</code>
;;     <td> <span title="attr-itemtype">HTML elements</span>
;;     <td> <span>Item type</span> of a microdata item
;;     <td> <span title="absolute URL">Valid absolute URL</span>*
;;<!--START w3c-html--><!--MD-->
;;    <tr>
;;     <th> <code title="">keytype</code>
;;     <td> <code title="attr-keygen-keytype">keygen</code>
;;     <td> The type of cryptographic key to generate
;;     <td> <a href="#attribute-text">Text</a>*
;;<!--END w3c-html--><!--TT-->
;;    <tr>
;;     <th> <code title="">kind</code>
;;     <td> <code title="attr-track-kind">track</code>
;;     <td> The type of timed track
;;     <td> "<code title="attr-track-kind-subtitles">subtitles</code>";
;;          "<code title="attr-track-kind-captions">captions</code>";
;;          "<code title="attr-track-kind-descriptions">descriptions</code>";
;;          "<code title="attr-track-kind-chapters">chapters</code>";
;;          "<code title="attr-track-kind-metadata">metadata</code>"
;;<!--START w3c-html--><!--TT-->
;;    <tr>
;;     <th> <code title="">label</code>
;;     <td> <code title="attr-command-label">command</code>;
;;          <code title="attr-menu-label">menu</code>;
;;          <code title="attr-optgroup-label">optgroup</code>;
;;          <code title="attr-option-label">option</code>;
;;<!--END w3c-html--><!--TT-->
;;          <code title="attr-track-label">track</code>
;;<!--START w3c-html--><!--TT-->
;;     <td> User-visible label
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">lang</code>
;;     <td> <span title="attr-lang">HTML elements</span>
;;     <td> <span>Language</span> of the element
;;     <td> Valid BCP 47 language tag or the empty string
;;    <tr>
;;     <th> <code title="">list</code>
;;     <td> <code title="attr-input-list">input</code>
;;     <td> List of autocomplete options
;;     <td> <span title="concept-id">ID</span>*
;;    <tr>
;;     <th> <code title="">loop</code>
;;     <td> <code title="attr-media-loop">audio</code>;
;;          <code title="attr-media-loop">video</code>
;;     <td> Whether to loop the <span>media resource</span>
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">low</code>
;;     <td> <code title="attr-meter-low">meter</code>
;;     <td> High limit of low range
;;     <td> <span>Valid floating point number</span>*
;;    <tr>
;;     <th> <code title="">manifest</code>
;;     <td> <code title="attr-html-manifest">html</code>
;;     <td> <span title="concept-appcache-manifest">Application cache manifest</span>
;;     <td> <span>Valid non-empty URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">max</code>
;;     <td> <code title="attr-input-max">input</code>
;;     <td> Maximum value
;;     <td> varies*
;;    <tr>
;;     <th> <code title="">max</code>
;;     <td> <code title="attr-meter-max">meter</code>;
;;          <code title="attr-progress-max">progress</code>
;;     <td> Upper bound of range
;;     <td> <span>Valid floating point number</span>*
;;    <tr>
;;     <th> <code title="">maxlength</code>
;;     <td> <code title="attr-input-maxlength">input</code>;
;;          <code title="attr-textarea-maxlength">textarea</code>
;;     <td> Maximum length of value
;;     <td> <span>Valid non-negative integer</span>
;;    <tr>
;;     <th> <code title="">media</code>
;;     <td> <code title="attr-hyperlink-media">a</code>;
;;          <code title="attr-hyperlink-media">area</code>;
;;          <code title="attr-link-media">link</code>;
;;          <code title="attr-source-media">source</code>;
;;          <code title="attr-style-media">style</code>
;;     <td> Applicable media
;;     <td> <span>Valid media query</span>
;;    <tr>
;;     <th> <code title="">method</code>
;;     <td> <code title="attr-fs-method">form</code>
;;     <td> HTTP method to use for <span>form submission</span>
;;     <td> "<code title="">GET</code>"; "<code title="">POST</code>"; "<code title="">PUT</code>"; "<code title="">DELETE</code>"
;;    <tr>
;;     <th> <code title="">min</code>
;;     <td> <code title="attr-input-min">input</code>
;;     <td> Minimum value
;;     <td> varies*
;;    <tr>
;;     <th> <code title="">min</code>
;;     <td> <code title="attr-meter-min">meter</code>
;;     <td> Lower bound of range
;;     <td> <span>Valid floating point number</span>*
;;    <tr>
;;     <th> <code title="">multiple</code>
;;     <td> <code title="attr-input-multiple">input</code>;
;;          <code title="attr-select-multiple">select</code>
;;     <td> Whether to allow multiple values
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">name</code>
;;     <td> <code title="attr-fe-name">button</code>;
;;          <code title="attr-fe-name">fieldset</code>;
;;          <code title="attr-fe-name">input</code>;
;;          <code title="attr-fe-name">keygen</code>;
;;          <code title="attr-fe-name">output</code>;
;;          <code title="attr-fe-name">select</code>;
;;          <code title="attr-fe-name">textarea</code>
;;     <td> Name of form control to use for <span>form submission</span> and in the <code title="dom-form-elements">form.elements</code> API
;;     <td> <a href="#attribute-text">Text</a>*
;;    <tr>
;;     <th> <code title="">name</code>
;;     <td> <code title="attr-form-name">form</code>
;;     <td> Name of form to use in the <code title="dom-document-forms">document.forms</code> API
;;     <td> <a href="#attribute-text">Text</a>*
;;    <tr>
;;     <th> <code title="">name</code>
;;     <td> <code title="attr-iframe-name">iframe</code>;
;;          <code title="attr-object-name">object</code>
;;     <td> Name of <span>nested browsing context</span>
;;     <td> <span>Valid browsing context name or keyword</span>
;;    <tr>
;;     <th> <code title="">name</code>
;;     <td> <code title="attr-map-name">map</code>
;;     <td> Name of <span>image map</span> to reference from the <code title="attr-hyperlink-usemap">usemap</code> attribute
;;     <td> <a href="#attribute-text">Text</a>*
;;    <tr>
;;     <th> <code title="">name</code>
;;     <td> <code title="attr-meta-name">meta</code>
;;     <td> Metadata name
;;     <td> <a href="#attribute-text">Text</a>*
;;    <tr>
;;     <th> <code title="">name</code>
;;     <td> <code title="attr-param-name">param</code>
;;     <td> Name of parameter
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">novalidate</code>
;;     <td> <code title="attr-fs-novalidate">form</code>
;;     <td> Bypass form control validation for <span>form submission</span>
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">open</code>
;;     <td> <code title="attr-details-open">details</code>
;;     <td> Whether the details are visible
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">optimum</code>
;;     <td> <code title="attr-meter-optimum">meter</code>
;;     <td> Optimum value in gauge
;;     <td> <span>Valid floating point number</span>*
;;    <tr>
;;     <th> <code title="">pattern</code>
;;     <td> <code title="attr-input-pattern">input</code>
;;     <td> Pattern to be matched by the form control's value
;;     <td> Regular expression matching the JavaScript <i title="">Pattern</i> production
;;<!--END w3c-html--><!--PING-->
;;    <tr>
;;     <th> <code title="">ping</code>
;;     <td> <code title="attr-hyperlink-ping">a</code>;
;;          <code title="attr-hyperlink-ping">area</code>
;;     <td> <span title="URL">URLs</span> to ping
;;     <td> <span>Set of space-separated tokens</span> consisting of <span title="valid non-empty URL">valid non-empty URLs</span>
;;<!--START w3c-html--><!--PING-->
;;    <tr>
;;     <th> <code title="">placeholder</code>
;;     <td> <code title="attr-input-placeholder">input</code>;
;;          <code title="attr-textarea-placeholder">textarea</code>
;;     <td> User-visible label to be placed within the form control
;;     <td> <a href="#attribute-text">Text</a>*
;;    <tr>
;;     <th> <code title="">poster</code>
;;     <td> <code title="attr-video-poster">video</code>
;;     <td> Poster frame to show prior to video playback
;;     <td> <span>Valid non-empty URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">preload</code>
;;     <td> <code title="attr-media-preload">audio</code>;
;;          <code title="attr-media-preload">video</code>
;;     <td> Hints how much buffering the <span>media resource</span> will likely need
;;     <td> "<code title="attr-media-preload-none">none</code>";
;;          "<code title="attr-media-preload-metadata">metadata</code>";
;;          "<code title="attr-media-preload-auto">auto</code>"
;;    <tr>
;;     <th> <code title="">pubdate</code>
;;     <td> <code title="attr-time-pubdate">time</code>
;;     <td> Whether the element's value represents a publication time for the nearest <code>article</code> or <code>body</code>
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">radiogroup</code>
;;     <td> <code title="attr-command-radiogroup">command</code>
;;     <td> Name of group of commands to treat as a radio button group
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">readonly</code>
;;     <td> <code title="attr-input-readonly">input</code>;
;;          <code title="attr-textarea-readonly">textarea</code>
;;     <td> Whether to allow the value to be edited by the user
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">rel</code>
;;     <td> <code title="attr-hyperlink-rel">a</code>;
;;          <code title="attr-hyperlink-rel">area</code>;
;;          <code title="attr-link-rel">link</code>
;;     <td> Relationship between the document containing the hyperlink and the destination resource
;;     <td> <span>Set of space-separated tokens</span>*
;;    <tr>
;;     <th> <code title="">required</code>
;;     <td> <code title="attr-input-required">input</code>;
;;          <code title="attr-select-required">select</code>;
;;          <code title="attr-textarea-required">textarea</code>
;;     <td> Whether the control is required for <span>form submission</span>
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">reversed</code>
;;     <td> <code title="attr-ol-reversed">ol</code>
;;     <td> Number the list backwards
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">rows</code>
;;     <td> <code title="attr-textarea-rows">textarea</code>
;;     <td> Number of lines to show
;;     <td> <span>Valid non-negative integer</span> greater than zero
;;    <tr>
;;     <th> <code title="">rowspan</code>
;;     <td> <code title="attr-tdth-rowspan">td</code>;
;;          <code title="attr-tdth-rowspan">th</code>
;;     <td> Number of rows that the cell is to span
;;     <td> <span>Valid non-negative integer</span>
;;    <tr>
;;     <th> <code title="">sandbox</code>
;;     <td> <code title="attr-iframe-sandbox">iframe</code>
;;     <td> Security rules for nested content
;;     <td> <span>Unordered set of unique space-separated tokens</span> consisting of
;;          "<code title="attr-iframe-sandbox-allow-same-origin">allow-same-origin</code>",
;;          "<code title="attr-iframe-sandbox-allow-forms">allow-forms</code>", and
;;          "<code title="attr-iframe-sandbox-allow-scripts">allow-scripts</code>"
;;    <tr>
;;     <th> <code title="">spellcheck</code>
;;     <td> <span title="attr-spellcheck">HTML elements</span>
;;     <td> Whether the element is to have its spelling and grammar checked
;;     <td> "<code title="">true</code>"; "<code title="">false</code>"
;;    <tr>
;;     <th> <code title="">scope</code>
;;     <td> <code title="attr-th-scope">th</code>
;;     <td> Specifies which cells the header cell applies to
;;     <td> "<code title="attr-th-scope-row">row</code>";
;;          "<code title="attr-th-scope-col">col</code>";
;;          "<code title="attr-th-scope-rowgroup">rowgroup</code>";
;;          "<code title="attr-th-scope-colgroup">colgroup</code>"
;;    <tr>
;;     <th> <code title="">scoped</code>
;;     <td> <code title="attr-style-scoped">style</code>
;;     <td> Whether the styles apply to the entire document or just the parent subtree
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">seamless</code>
;;     <td> <code title="attr-iframe-seamless">iframe</code>
;;     <td> Whether to apply the document's styles to the nested content
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">selected</code>
;;     <td> <code title="attr-option-selected">option</code>
;;     <td> Whether the option is selected by default
;;     <td> <span>Boolean attribute</span>
;;    <tr>
;;     <th> <code title="">shape</code>
;;     <td> <code title="attr-area-shape">area</code>
;;     <td> The kind of shape to be created in an <span>image map</span>
;;     <td> "<code title="attr-area-shape-keyword-circle">circle</code>";
;;          "<code title="attr-area-shape-keyword-default">default</code>";
;;          "<code title="attr-area-shape-keyword-poly">poly</code>";
;;          "<code title="attr-area-shape-keyword-rect">rect</code>"
;;    <tr>
;;     <th> <code title="">size</code>
;;     <td> <code title="attr-input-size">input</code>;
;;          <code title="attr-select-size">select</code>
;;     <td> Size of the control
;;     <td> <span>Valid non-negative integer</span> greater than zero
;;    <tr>
;;     <th> <code title="">sizes</code>
;;     <td> <code title="attr-link-sizes">link</code>
;;     <td> Sizes of the icons (for <code title="attr-link-rel">rel</code>="<code title="rel-icon">icon</code>")
;;     <td> <span>Unordered set of unique space-separated tokens</span> consisting of sizes*
;;    <tr>
;;     <th> <code title="">span</code>
;;     <td> <code title="attr-col-span">col</code>;
;;          <code title="attr-colgroup-span">colgroup</code>
;;     <td> Number of columns spanned by the element
;;     <td> <span>Valid non-negative integer</span> greater than zero
;;    <tr>
;;     <th> <code title="">src</code>
;;     <td> <code title="attr-media-src">audio</code>;
;;          <code title="attr-embed-src">embed</code>;
;;          <code title="attr-iframe-src">iframe</code>;
;;          <code title="attr-img-src">img</code>;
;;          <code title="attr-input-src">input</code>;
;;          <code title="attr-script-src">script</code>;
;;          <code title="attr-source-src">source</code>;
;;<!--END w3c-html--><!--TT-->
;;          <code title="attr-track-src">track</code>;
;;<!--START w3c-html--><!--TT-->
;;          <code title="attr-media-src">video</code>
;;     <td> Address of the resource
;;     <td> <span>Valid non-empty URL potentially surrounded by spaces</span>
;;    <tr>
;;     <th> <code title="">srcdoc</code>
;;     <td> <code title="attr-iframe-srcdoc">iframe</code>
;;     <td> A document to render in the <code>iframe</code>
;;     <td> The source of <span>an <code>iframe</code> <code title="attr-iframe-srcdoc">srcdoc</code> document</span>*
;;<!--END w3c-html--><!--TT-->
;;    <tr>
;;     <th> <code title="">srclang</code>
;;     <td> <code title="attr-track-srclang">track</code>
;;     <td> Language of the timed track
;;     <td> Valid BCP 47 language tag
;;<!--START w3c-html--><!--TT-->
;;    <tr>
;;     <th> <code title="">start</code>
;;     <td> <code title="attr-ol-start">ol</code>
;;     <td> <span>Ordinal value</span> of the first item
;;     <td> <span>Valid integer</span>
;;    <tr>
;;     <th> <code title="">step</code>
;;     <td> <code title="attr-input-step">input</code>
;;     <td> Granularity to be matched by the form control's value
;;     <td> <span>Valid floating point number</span> greater than zero, or "<code title="">any</code>"
;;    <tr>
;;     <th> <code title="">style</code>
;;     <td> <span title="attr-style">HTML elements</span>
;;     <td> Presentational and formatting instructions
;;     <td> CSS declarations*
;;    <tr>
;;     <th> <code title="">summary</code>
;;     <td> <code title="attr-table-summary">table</code>
;;     <td> Explanatory text for complex tables for users of screen readers
;;     <td> <a href="#attribute-text">Text</a>*
;;    <tr>
;;     <th> <code title="">tabindex</code>
;;     <td> <span title="attr-tabindex">HTML elements</span>
;;     <td> Whether the element is focusable, and the relative order of the element for the purposes of sequential focus navigation
;;     <td> <span>Valid integer</span>
;;    <tr>
;;     <th> <code title="">target</code>
;;     <td> <code title="attr-hyperlink-target">a</code>;
;;          <code title="attr-hyperlink-target">area</code>
;;     <td> <span>Browsing context</span> for <span>hyperlink</span> <span title="navigate">navigation</span>
;;     <td> <span>Valid browsing context name or keyword</span>
;;    <tr>
;;     <th> <code title="">target</code>
;;     <td> <code title="attr-base-target">base</code>
;;     <td> Default <span>browsing context</span> for <span>hyperlink</span> <span title="navigate">navigation</span> and <span>form submission</span>
;;     <td> <span>Valid browsing context name or keyword</span>
;;    <tr>
;;     <th> <code title="">target</code>
;;     <td> <code title="attr-fs-target">form</code>
;;     <td> <span>Browsing context</span> for <span>form submission</span>
;;     <td> <span>Valid browsing context name or keyword</span>
;;    <tr>
;;     <th> <code title="">title</code>
;;     <td> <span title="attr-title">HTML elements</span>
;;     <td> Advisory information for the element
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">title</code>
;;     <td> <code title="attr-abbr-title">abbr</code>;
;;          <code title="attr-dfn-title">dfn</code>
;;     <td> Full term or expansion of abbreviation
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">title</code>
;;     <td> <code title="attr-command-title">command</code>
;;     <td> Hint describing the command
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">title</code>
;;     <td> <code title="attr-link-title">link</code>
;;     <td> Title of the link
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">title</code>
;;     <td> <code title="attr-link-title">link</code>;
;;          <code title="attr-style-title">style</code>
;;     <td> Alternative style sheet set name
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">type</code>
;;     <td> <code title="attr-hyperlink-type">a</code>;
;;          <code title="attr-hyperlink-type">area</code>;
;;          <code title="attr-link-type">link</code>
;;     <td> Hint for the type of the referenced resource
;;     <td> <span>Valid MIME type</span>
;;    <tr>
;;     <th> <code title="">type</code>
;;     <td> <code title="attr-button-type">button</code>
;;     <td> Type of button
;;     <td> "<code title="attr-button-type-submit">submit</code>";
;;          "<code title="attr-button-type-reset">reset</code>";
;;          "<code title="attr-button-type-button">button</code>"
;;    <tr>
;;     <th> <code title="">type</code>
;;     <td> <code title="attr-button-type">button</code>;
;;          <code title="attr-input-type">input</code>
;;     <td> Type of form control
;;     <td> <span title="attr-input-type"><code>input</code> type keyword</span>
;;    <tr>
;;     <th> <code title="">type</code>
;;     <td> <code title="attr-command-type">command</code>
;;     <td> Type of command
;;     <td> "<code title="attr-command-type-keyword-command">command</code>";
;;          "<code title="attr-command-type-keyword-checkbox">checkbox</code>";
;;          "<code title="attr-command-type-keyword-radio">radio</code>"
;;    <tr>
;;     <th> <code title="">type</code>
;;     <td> <code title="attr-embed-type">embed</code>;
;;          <code title="attr-object-type">object</code>;
;;          <code title="attr-script-type">script</code>;
;;          <code title="attr-source-type">source</code>;
;;          <code title="attr-style-type">style</code>
;;     <td> Type of embedded resource
;;     <td> <span>Valid MIME type</span>
;;    <tr>
;;     <th> <code title="">type</code>
;;     <td> <code title="attr-menu-type">menu</code>
;;     <td> Type of menu
;;     <td> "<code title="context menu state">context</code>"; "<code title="toolbar state">toolbar</code>"
;;    <tr>
;;     <th> <code title="">usemap</code>
;;     <td> <code title="attr-hyperlink-usemap">img</code>;
;;          <code title="attr-hyperlink-usemap">object</code>
;;     <td> Name of <span>image map</span> to use
;;     <td> <span>Valid hash-name reference</span>*
;;    <tr>
;;     <th> <code title="">value</code>
;;     <td> <code title="attr-button-value">button</code>;
;;          <code title="attr-option-value">option</code>
;;     <td> Value to be used for <span>form submission</span>
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">value</code>
;;     <td> <code title="attr-input-value">input</code>
;;     <td> Value of the form control
;;     <td> varies*
;;    <tr>
;;     <th> <code title="">value</code>
;;     <td> <code title="attr-li-value">li</code>
;;     <td> <span>Ordinal value</span> of the list item
;;     <td> <span>Valid integer</span>
;;    <tr>
;;     <th> <code title="">value</code>
;;     <td> <code title="attr-meter-value">meter</code>;
;;          <code title="attr-progress-value">progress</code>
;;     <td> Current value of the element
;;     <td> <span>Valid floating point number</span>
;;    <tr>
;;     <th> <code title="">value</code>
;;     <td> <code title="attr-param-value">param</code>
;;     <td> Value of parameter
;;     <td> <a href="#attribute-text">Text</a>
;;    <tr>
;;     <th> <code title="">width</code>
;;     <td> <code title="attr-canvas-width">canvas</code>;
;;          <code title="attr-dim-width">embed</code>;
;;          <code title="attr-dim-width">iframe</code>;
;;          <code title="attr-dim-width">img</code>;
;;          <code title="attr-dim-width">input</code>;
;;          <code title="attr-dim-width">object</code>;
;;          <code title="attr-dim-width">video</code>
;;     <td> Horizontal dimension
;;     <td> <span>Valid non-negative integer</span>
;;    <tr>
;;     <th> <code title="">wrap</code>
;;     <td> <code title="attr-textarea-wrap">textarea</code>
;;     <td> How the value of the form control is to be wrapped for <span>form submission</span>
;;     <td> "<code title="attr-textarea-wrap-soft">soft</code>";
;;          "<code title="attr-textarea-wrap-hard">hard</code>"
;;  </table>
;;  <p>An asterisk (*) in a cell indicates that the actual rules are more complicated than indicated in the table above.</p>
;;
;;  <hr>
;;
;;  <table id="ix-event-handlers">
;;   <caption>List of event handler content attributes</caption>
;;   <thead>
;;    <tr>
;;     <th> Attribute
;;     <th> Element(s)
;;     <th> Description
;;     <th> Value
;;   <tbody>
;;
;;    <tr>
;;     <th id="ix-handler-onabort"> <code title="">onabort</code>
;;     <td> <span title="handler-onabort">HTML elements</span>
;;     <td> <code title="event-abort">abort</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onafterprint"> <code title="">onafterprint</code>
;;     <td> <code title="handler-window-onafterprint">body</code>
;;     <td> <code title="event-afterprint">afterprint</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onbeforeprint"> <code title="">onbeforeprint</code>
;;     <td> <code title="handler-window-onbeforeprint">body</code>
;;     <td> <code title="event-beforeprint">beforeprint</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onbeforeunload"> <code title="">onbeforeunload</code>
;;     <td> <code title="handler-window-onbeforeunload">body</code>
;;     <td> <code title="event-beforeunload">beforeunload</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onblur"> <code title="">onblur</code>
;;     <td> <code title="handler-window-onblur">body</code>
;;     <td> <code title="event-blur">blur</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onblur"> <code title="">onblur</code>
;;     <td> <span title="handler-onblur">HTML elements</span>
;;     <td> <code title="event-blur">blur</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-oncanplay"> <code title="">oncanplay</code>
;;     <td> <span title="handler-oncanplay">HTML elements</span>
;;     <td> <code title="event-media-canplay">canplay</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-oncanplaythrough"> <code title="">oncanplaythrough</code>
;;     <td> <span title="handler-oncanplaythrough">HTML elements</span>
;;     <td> <code title="event-media-canplaythrough">canplaythrough</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onchange"> <code title="">onchange</code>
;;     <td> <span title="handler-onchange">HTML elements</span>
;;     <td> <code title="event-change">change</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onclick"> <code title="">onclick</code>
;;     <td> <span title="handler-onclick">HTML elements</span>
;;     <td> <code title="event-click">click</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-oncontextmenu"> <code title="">oncontextmenu</code>
;;     <td> <span title="handler-oncontextmenu">HTML elements</span>
;;     <td> <code title="event-contextmenu">contextmenu</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;<!--END w3c-html--><!--TT-->
;;    <tr>
;;     <th id="ix-handler-oncuechange"> <code title="">oncuechange</code>
;;     <td> <span title="handler-oncuechange">HTML elements</span>
;;     <td> <code title="event-cuechange">cuechange</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;<!--START w3c-html--><!--TT-->
;;
;;    <tr>
;;     <th id="ix-handler-ondblclick"> <code title="">ondblclick</code>
;;     <td> <span title="handler-ondblclick">HTML elements</span>
;;     <td> <code title="event-dblclick">dblclick</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-ondrag"> <code title="">ondrag</code>
;;     <td> <span title="handler-ondrag">HTML elements</span>
;;     <td> <code title="event-drag">drag</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-ondragend"> <code title="">ondragend</code>
;;     <td> <span title="handler-ondragend">HTML elements</span>
;;     <td> <code title="event-dragend">dragend</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-ondragenter"> <code title="">ondragenter</code>
;;     <td> <span title="handler-ondragenter">HTML elements</span>
;;     <td> <code title="event-dragenter">dragenter</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-ondragleave"> <code title="">ondragleave</code>
;;     <td> <span title="handler-ondragleave">HTML elements</span>
;;     <td> <code title="event-dragleave">dragleave</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-ondragover"> <code title="">ondragover</code>
;;     <td> <span title="handler-ondragover">HTML elements</span>
;;     <td> <code title="event-dragover">dragover</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-ondragstart"> <code title="">ondragstart</code>
;;     <td> <span title="handler-ondragstart">HTML elements</span>
;;     <td> <code title="event-dragstart">dragstart</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-ondrop"> <code title="">ondrop</code>
;;     <td> <span title="handler-ondrop">HTML elements</span>
;;     <td> <code title="event-drop">drop</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-ondurationchange"> <code title="">ondurationchange</code>
;;     <td> <span title="handler-ondurationchange">HTML elements</span>
;;     <td> <code title="event-media-durationchange">durationchange</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onemptied"> <code title="">onemptied</code>
;;     <td> <span title="handler-onemptied">HTML elements</span>
;;     <td> <code title="event-media-emptied">emptied</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onended"> <code title="">onended</code>
;;     <td> <span title="handler-onended">HTML elements</span>
;;     <td> <code title="event-media-ended">ended</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onerror"> <code title="">onerror</code>
;;     <td> <code title="handler-window-onerror">body</code>
;;     <td> <code title="event-error">error</code> event handler for <code>Window</code> object, and handler for <a href="#runtime-script-errors">script error notifications</a>
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onerror"> <code title="">onerror</code>
;;     <td> <span title="handler-onerror">HTML elements</span>
;;     <td> <code title="event-error">error</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onfocus"> <code title="">onfocus</code>
;;     <td> <code title="handler-window-onfocus">body</code>
;;     <td> <code title="event-focus">focus</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onfocus"> <code title="">onfocus</code>
;;     <td> <span title="handler-onfocus">HTML elements</span>
;;     <td> <code title="event-focus">focus</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onformchange"> <code title="">onformchange</code>
;;     <td> <span title="handler-onformchange">HTML elements</span>
;;     <td> <code title="event-formchange">formchange</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onforminput"> <code title="">onforminput</code>
;;     <td> <span title="handler-onforminput">HTML elements</span>
;;     <td> <code title="event-forminput">forminput</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onhashchange"> <code title="">onhashchange</code>
;;     <td> <code title="handler-window-onhashchange">body</code>
;;     <td> <code title="event-hashchange">hashchange</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-oninput"> <code title="">oninput</code>
;;     <td> <span title="handler-oninput">HTML elements</span>
;;     <td> <code title="event-input">input</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-oninvalid"> <code title="">oninvalid</code>
;;     <td> <span title="handler-oninvalid">HTML elements</span>
;;     <td> <code title="event-invalid">invalid</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onkeydown"> <code title="">onkeydown</code>
;;     <td> <span title="handler-onkeydown">HTML elements</span>
;;     <td> <code title="event-keydown">keydown</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onkeypress"> <code title="">onkeypress</code>
;;     <td> <span title="handler-onkeypress">HTML elements</span>
;;     <td> <code title="event-keypress">keypress</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onkeyup"> <code title="">onkeyup</code>
;;     <td> <span title="handler-onkeyup">HTML elements</span>
;;     <td> <code title="event-keyup">keyup</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onload"> <code title="">onload</code>
;;     <td> <code title="handler-window-onload">body</code>
;;     <td> <code title="event-load">load</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onload"> <code title="">onload</code>
;;     <td> <span title="handler-onload">HTML elements</span>
;;     <td> <code title="event-load">load</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onloadeddata"> <code title="">onloadeddata</code>
;;     <td> <span title="handler-onloadeddata">HTML elements</span>
;;     <td> <code title="event-media-loadeddata">loadeddata</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onloadedmetadata"> <code title="">onloadedmetadata</code>
;;     <td> <span title="handler-onloadedmetadata">HTML elements</span>
;;     <td> <code title="event-media-loadedmetadata">loadedmetadata</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onloadstart"> <code title="">onloadstart</code>
;;     <td> <span title="handler-onloadstart">HTML elements</span>
;;     <td> <code title="event-media-loadstart">loadstart</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onmessage"> <code title="">onmessage</code>
;;     <td> <code title="handler-window-onmessage">body</code>
;;     <td> <code title="event-message">message</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onmousedown"> <code title="">onmousedown</code>
;;     <td> <span title="handler-onmousedown">HTML elements</span>
;;     <td> <code title="event-mousedown">mousedown</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onmousemove"> <code title="">onmousemove</code>
;;     <td> <span title="handler-onmousemove">HTML elements</span>
;;     <td> <code title="event-mousemove">mousemove</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onmouseout"> <code title="">onmouseout</code>
;;     <td> <span title="handler-onmouseout">HTML elements</span>
;;     <td> <code title="event-mouseout">mouseout</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onmouseover"> <code title="">onmouseover</code>
;;     <td> <span title="handler-onmouseover">HTML elements</span>
;;     <td> <code title="event-mouseover">mouseover</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onmouseup"> <code title="">onmouseup</code>
;;     <td> <span title="handler-onmouseup">HTML elements</span>
;;     <td> <code title="event-mouseup">mouseup</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onmousewheel"> <code title="">onmousewheel</code>
;;     <td> <span title="handler-onmousewheel">HTML elements</span>
;;     <td> <code title="event-mousewheel">mousewheel</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onoffline"> <code title="">onoffline</code>
;;     <td> <code title="handler-window-onoffline">body</code>
;;     <td> <code title="event-offline">offline</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-ononline"> <code title="">ononline</code>
;;     <td> <code title="handler-window-ononline">body</code>
;;     <td> <code title="event-online">online</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onpagehide"> <code title="">onpagehide</code>
;;     <td> <code title="handler-window-onpagehide">body</code>
;;     <td> <code title="event-pagehide">pagehide</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onpageshow"> <code title="">onpageshow</code>
;;     <td> <code title="handler-window-onpageshow">body</code>
;;     <td> <code title="event-pageshow">pageshow</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onpause"> <code title="">onpause</code>
;;     <td> <span title="handler-onpause">HTML elements</span>
;;     <td> <code title="event-media-pause">pause</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onplay"> <code title="">onplay</code>
;;     <td> <span title="handler-onplay">HTML elements</span>
;;     <td> <code title="event-media-play">play</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onplaying"> <code title="">onplaying</code>
;;     <td> <span title="handler-onplaying">HTML elements</span>
;;     <td> <code title="event-media-playing">playing</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onpopstate"> <code title="">onpopstate</code>
;;     <td> <code title="handler-window-onpopstate">body</code>
;;     <td> <code title="event-popstate">popstate</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onprogress"> <code title="">onprogress</code>
;;     <td> <span title="handler-onprogress">HTML elements</span>
;;     <td> <code title="event-media-progress">progress</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onratechange"> <code title="">onratechange</code>
;;     <td> <span title="handler-onratechange">HTML elements</span>
;;     <td> <code title="event-media-ratechange">ratechange</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onreadystatechange"> <code title="">onreadystatechange</code>
;;     <td> <span title="handler-onreadystatechange">HTML elements</span>
;;     <td> <code title="event-readystatechange">readystatechange</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onredo"> <code title="">onredo</code>
;;     <td> <code title="handler-window-onredo">body</code>
;;     <td> <code title="event-redo">redo</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onresize"> <code title="">onresize</code>
;;     <td> <code title="handler-window-onresize">body</code>
;;     <td> <code title="event-resize">resize</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onscroll"> <code title="">onscroll</code>
;;     <td> <span title="handler-onscroll">HTML elements</span>
;;     <td> <code title="event-scroll">scroll</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onseeked"> <code title="">onseeked</code>
;;     <td> <span title="handler-onseeked">HTML elements</span>
;;     <td> <code title="event-media-seeked">seeked</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onseeking"> <code title="">onseeking</code>
;;     <td> <span title="handler-onseeking">HTML elements</span>
;;     <td> <code title="event-media-seeking">seeking</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onselect"> <code title="">onselect</code>
;;     <td> <span title="handler-onselect">HTML elements</span>
;;     <td> <code title="event-select">select</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onshow"> <code title="">onshow</code>
;;     <td> <span title="handler-onshow">HTML elements</span>
;;     <td> <code title="event-show">show</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onstalled"> <code title="">onstalled</code>
;;     <td> <span title="handler-onstalled">HTML elements</span>
;;     <td> <code title="event-media-stalled">stalled</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onstorage"> <code title="">onstorage</code>
;;     <td> <code title="handler-window-onstorage">body</code>
;;     <td> <code title="event-storage">storage</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onsubmit"> <code title="">onsubmit</code>
;;     <td> <span title="handler-onsubmit">HTML elements</span>
;;     <td> <code title="event-submit">submit</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onsuspend"> <code title="">onsuspend</code>
;;     <td> <span title="handler-onsuspend">HTML elements</span>
;;     <td> <code title="event-media-suspend">suspend</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-ontimeupdate"> <code title="">ontimeupdate</code>
;;     <td> <span title="handler-ontimeupdate">HTML elements</span>
;;     <td> <code title="event-media-timeupdate">timeupdate</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onundo"> <code title="">onundo</code>
;;     <td> <code title="handler-window-onundo">body</code>
;;     <td> <code title="event-undo">undo</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-window-onunload"> <code title="">onunload</code>
;;     <td> <code title="handler-window-onunload">body</code>
;;     <td> <code title="event-unload">unload</code> event handler for <code>Window</code> object
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onvolumechange"> <code title="">onvolumechange</code>
;;     <td> <span title="handler-onvolumechange">HTML elements</span>
;;     <td> <code title="event-media-volumechange">volumechange</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;    <tr>
;;     <th id="ix-handler-onwaiting"> <code title="">onwaiting</code>
;;     <td> <span title="handler-onwaiting">HTML elements</span>
;;     <td> <code title="event-media-waiting">waiting</code> event handler
;;     <td> <span title="event handler content attributes">Event handler content attribute</span>
;;
;;  </table>
;;
;;
;;<!-- v2 for completeness: (also search for REFLECTIDL)
;;  <h3 class="no-num">Reflecting IDL attributes</h3>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <table>
;;   <caption>List of <dfn>reflecting IDL attributes</dfn></caption>
;;   <thead>
;;    <tr>
;;     <th> Interface
;;     <th> Element(s)
;;     <th> IDL attribute
;;     <th> Reflects...
;;   <tbody>
;;    ...
;;    <tr>
;;     <td> <code>HTMLElement</code>
;;     <td> <span>HTML elements</span>
;;     <td> <code title="dom-contextMenu">contextMenu</code>
;;     <td> <code title="attr-contextmenu">contextmenu</code>
;;    <tr>
;;     <td> <code>HTMLOptionElement</code>
;;     <td> <code>option</code>
;;     <td> <code title="dom-option-text">text</code>
;;     <td> <code>textContent</code>
;;  </table>
;;  ( include option.text; textarea.defaultValue, and other attributes that "reflect" the element's textContent )
;;-->
;;
;;
;;  <h3 class="no-num">Interfaces</h3>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <table>
;;   <caption>List of interfaces for elements</caption>
;;   <thead>
;;    <tr>
;;     <th> Element(s)
;;     <th> Interface(s)
;;   <tbody>
;;    <tr>
;;     <td> <code>a</code>
;;     <td> <code>HTMLAnchorElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>abbr</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>address</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>area</code>
;;     <td> <code>HTMLAreaElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>article</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>aside</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>audio</code>
;;     <td> <code>HTMLAudioElement</code> : <code>HTMLMediaElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>b</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>base</code>
;;     <td> <code>HTMLBaseElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>bdo</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>blockquote</code>
;;     <td> <code>HTMLQuoteElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>body</code>
;;     <td> <code>HTMLBodyElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>br</code>
;;     <td> <code>HTMLBRElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>button</code>
;;     <td> <code>HTMLButtonElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>canvas</code>
;;     <td> <code>HTMLCanvasElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>caption</code>
;;     <td> <code>HTMLTableCaptionElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>cite</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>code</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>col</code>
;;     <td> <code>HTMLTableSectionElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>colgroup</code>
;;     <td> <code>HTMLTableColElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>command</code>
;;     <td> <code>HTMLCommandElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>datalist</code>
;;     <td> <code>HTMLDataListElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>dd</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>del</code>
;;     <td> <code>HTMLModElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>details</code>
;;     <td> <code>HTMLDetailsElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>div</code>
;;     <td> <code>HTMLDivElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>dl</code>
;;     <td> <code>HTMLDListElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>dt</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>em</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>embed</code>
;;     <td> <code>HTMLEmbedElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>fieldset</code>
;;     <td> <code>HTMLFieldSetElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>figcaption</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>figure</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>footer</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>form</code>
;;     <td> <code>HTMLFormElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>head</code>
;;     <td> <code>HTMLHeadElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>h1</code>
;;     <td> <code>HTMLHeadingElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>h2</code>
;;     <td> <code>HTMLHeadingElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>h3</code>
;;     <td> <code>HTMLHeadingElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>h4</code>
;;     <td> <code>HTMLHeadingElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>h5</code>
;;     <td> <code>HTMLHeadingElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>h6</code>
;;     <td> <code>HTMLHeadingElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>header</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>hgroup</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>hr</code>
;;     <td> <code>HTMLHRElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>html</code>
;;     <td> <code>HTMLHtmlElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>i</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>iframe</code>
;;     <td> <code>HTMLIFrameElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>img</code>
;;     <td> <code>HTMLImageElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>input</code>
;;     <td> <code>HTMLInputElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>ins</code>
;;     <td> <code>HTMLModElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>kbd</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>keygen</code>
;;     <td> <code>HTMLKeygenElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>label</code>
;;     <td> <code>HTMLLabelElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>legend</code>
;;     <td> <code>HTMLLegendElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>li</code>
;;     <td> <code>HTMLLIElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>link</code>
;;     <td> <code>HTMLLinkElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>map</code>
;;     <td> <code>HTMLMapElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>mark</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>meter</code>
;;     <td> <code>HTMLMeterElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>nav</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>noscript</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>object</code>
;;     <td> <code>HTMLObjectElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>ol</code>
;;     <td> <code>HTMLOListElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>optgroup</code>
;;     <td> <code>HTMLOptGroupElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>option</code>
;;     <td> <code>HTMLOptionElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>output</code>
;;     <td> <code>HTMLOutputElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>p</code>
;;     <td> <code>HTMLParagraphElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>param</code>
;;     <td> <code>HTMLParamElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>pre</code>
;;     <td> <code>HTMLPreElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>progress</code>
;;     <td> <code>HTMLProgressElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>q</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>rp</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>rt</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>ruby</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>samp</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>section</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>select</code>
;;     <td> <code>HTMLSelectElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>small</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>source</code>
;;     <td> <code>HTMLSourceElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>span</code>
;;     <td> <code>HTMLSpanElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>strong</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>style</code>
;;     <td> <code>HTMLStyleElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>sub</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>summary</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>sup</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>table</code>
;;     <td> <code>HTMLTableElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>tbody</code>
;;     <td> <code>HTMLTableSectionElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>td</code>
;;     <td> <code>HTMLTableDataCellElement</code> : <code>HTMLTableCellElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>textarea</code>
;;     <td> <code>HTMLTextAreaElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>tfoot</code>
;;     <td> <code>HTMLTableSectionElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>th</code>
;;     <td> <code>HTMLTableHeaderCellElement</code> : <code>HTMLTableCellElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>thead</code>
;;     <td> <code>HTMLTableSectionElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>time</code>
;;     <td> <code>HTMLTimeElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>title</code>
;;     <td> <code>HTMLTitleElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>tr</code>
;;     <td> <code>HTMLTableRowElement</code> : <code>HTMLElement</code>
;;
;;<!--END w3c-html--><!--TT-->
;;    <tr>
;;     <td> <code>track</code>
;;     <td> <code>HTMLTrackElement</code> : <code>HTMLElement</code>
;;<!--START w3c-html--><!--TT-->
;;
;;    <tr>
;;     <td> <code>ul</code>
;;     <td> <code>HTMLUListElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>var</code>
;;     <td> <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>video</code>
;;     <td> <code>HTMLVideoElement</code> : <code>HTMLMediaElement</code> : <code>HTMLElement</code>
;;
;;    <tr>
;;     <td> <code>wbr</code>
;;     <td> <code>HTMLElement</code>
;;
;;  </table>
;;
;;<!--END complete--><!--END epub--><!-- (only has events from HTML5) -->
;;
;;  <h3 class="no-num">Events</h3>
;;
;;  <p><i>This section is non-normative.</i></p>
;;
;;  <table>
;;   <caption>List of events</caption>
;;   <thead>
;;    <tr>
;;     <th> Event
;;     <th> Interface
;;     <th> Description
;;   <tbody>
;;
;;    <tr>
;;     <td> <code title="event-DOMActivate">DOMActivate</code>
;;     <td> <code>Event</code>
;;     <td> Fired at an element before its <span>activation behavior</span> is run
;;
;;    <tr>
;;     <td> <code title="event-DOMContentLoaded">DOMContentLoaded</code>
;;     <td> <code>Event</code>
;;     <td> Fired at the <code>Document</code> once it and its scripts have loaded, without waiting for other subresources
;;
;;    <tr>
;;     <td> <code title="event-abort">abort</code>
;;     <td> <code>Event</code>
;;     <td> Fired at the <code>Window</code> when the download was aborted by the user
;;
;;    <tr>
;;     <td> <code title="event-afterprint">afterprint</code>
;;     <td> <code>Event</code>
;;     <td> Fired at the <code>Window</code> after printing
;;
;;    <tr>
;;     <td> <code title="event-beforeprint">beforeprint</code>
;;     <td> <code>Event</code>
;;     <td> Fired at the <code>Window</code> before printing
;;
;;    <tr>
;;     <td> <code title="event-beforeunload">beforeunload</code>
;;     <td> <code>BeforeUnloadEvent</code>
;;     <td> Fired at the <code>Window</code> when the page is about to be unloaded, in case the page would like to show a warning prompt
;;
;;    <tr>
;;     <td> <code title="event-blur">blur</code>
;;     <td> <code>Event</code>
;;     <td> Fired at nodes losing focus
;;
;;    <tr>
;;     <td> <code title="event-change">change</code>
;;     <td> <code>Event</code>
;;     <td> Fired at controls when the user commits a value change
;;
;;    <tr>
;;     <td> <code title="event-contextmenu">contextmenu</code>
;;     <td> <code>Event</code>
;;     <td> Fired at elements when the user requests their context menu
;;
;;    <tr>
;;     <td> <code title="event-error">error</code>
;;     <td> <code>Event</code>
;;     <td> Fired at elements when network and script errors occur
;;
;;    <tr>
;;     <td> <code title="event-focus">focus</code>
;;     <td> <code>Event</code>
;;     <td> Fired at nodes gaining focus
;;
;;    <tr>
;;     <td> <code title="event-formchange">formchange</code>
;;     <td> <code>Event</code>
;;     <td> Fired at form controls when the user commits a value change to a control on the form
;;
;;    <tr>
;;     <td> <code title="event-forminput">forminput</code>
;;     <td> <code>Event</code>
;;     <td> Fired at form controls when the user changes the value of a control on the form
;;
;;    <tr>
;;     <td> <code title="event-hashchange">hashchange</code>
;;     <td> <code>HashChangeEvent</code>
;;     <td> Fired at the <code>Window</code> when the fragment identifier part of <span>the document's current address</span> changes
;;
;;    <tr>
;;     <td> <code title="event-input">input</code>
;;     <td> <code>Event</code>
;;     <td> Fired at controls when the user changes the value
;;
;;    <tr>
;;     <td> <code title="event-invalid">invalid</code>
;;     <td> <code>Event</code>
;;     <td> Fired at controls during form validation if they do not satisfy their constraints
;;
;;    <tr>
;;     <td> <code title="event-load">load</code>
;;     <td> <code>Event</code>
;;     <td> Fired at the <code>Window</code> when the document has finished loading; fired at an element containing a resource (e.g. <code>img</code>, <code>embed</code>) when its resource has finished loading
;;
;;    <tr>
;;     <td> <code title="event-message">message</code>
;;     <td> <code>MessageEvent</code>
;;     <td> Fired at an object when the object receives a message
;;
;;    <tr>
;;     <td> <code title="event-offline">offline</code>
;;     <td> <code>Event</code>
;;     <td> Fired at the <code>Window</code> when the network connections fails
;;
;;    <tr>
;;     <td> <code title="event-online">online</code>
;;     <td> <code>Event</code>
;;     <td> Fired at the <code>Window</code> when the network connections returns
;;
;;    <tr>
;;     <td> <code title="event-pagehide">pagehide</code>
;;     <td> <code>PageTransitionEvent</code>
;;     <td> Fired at the <code>Window</code> when the page's entry in the <span>session history</span> stops being the <span>current entry</span>
;;
;;    <tr>
;;     <td> <code title="event-pageshow">pageshow</code>
;;     <td> <code>PageTransitionEvent</code>
;;     <td> Fired at the <code>Window</code> when the page's entry in the <span>session history</span> becomes the <span>current entry</span>
;;
;;    <tr>
;;     <td> <code title="event-popstate">popstate</code>
;;     <td> <code>PopStateEvent</code>
;;     <td> Fired at the <code>Window</code> when the user navigates the <span>session history</span>
;;
;;    <tr>
;;     <td> <code title="event-readystatechange">readystatechange</code>
;;     <td> <code>Event</code>
;;     <td> Fired at the <code>Document</code> when it finishes parsing and again when all its subresources have finished loading
;;
;;    <tr>
;;     <td> <code title="event-redo">redo</code>
;;     <td> <code>UndoManagerEvent</code>
;;     <td> Fired at the <code>Window</code> object when the user <span title="do-redo">goes forward in the undo transaction history</span>
;;
;;    <tr>
;;     <td> <code title="event-reset">reset</code>
;;     <td> <code>Event</code>
;;     <td> Fired at a <code>form</code> element when it is <span title="concept-form-reset">reset</span>
;;
;;    <tr>
;;     <td> <code title="event-show">show</code>
;;     <td> <code>Event</code>
;;     <td> Fired at a <code>menu</code> element when it is shown as a context menu
;;
;;    <tr>
;;     <td> <code title="event-submit">submit</code>
;;     <td> <code>Event</code>
;;     <td> Fired at a <code>form</code> element when it is <span title="concept-form-submit">submitted</span>
;;
;;    <tr>
;;     <td> <code title="event-undo">undo</code>
;;     <td> <code>UndoManagerEvent</code>
;;     <td> Fired at the <code>Window</code> object when the user <span title="do-undo">goes backward in the undo transaction history</span>
;;
;;    <tr>
;;     <td> <code title="event-unload">unload</code>
;;     <td> <code>Event</code>
;;     <td> Fired at the <code>Window</code> object when the page is going away
;;
;;  </table>
;;
;;  <p class="note">See also <a href="#mediaevents">media element
;;  events</a>, <a href="#appcacheevents">application cache events</a>,
;;  and <a href="#dndevents">drag-and-drop events</a>.</p>
;;
;;<!--END w3c-html--><!--END html-->
;;
;;
;;<!--START complete--><!--START epub--><!--START html-->
;;<!--START html-device--><!--START microdata--><!--START 2dcontext--><!--START postmsg--><!--START w3c-html-->
;;<!--START websocket-api--><!--START storage--><!--START database--><!--START eventsource--><!--START workers-->
;;<!--START whatwg-workers--><!--START vocabs--><!--START vCard--><!--START vEvent--><!--START work-->
;;<!--START websrt-->
;;
;;  <h2 class="no-num" id="references">References</h2><!--REFS-->
;;
;;  <p>All references are normative unless marked "Non-normative".</p>
;;
;;  <!-- Dates are only included for standards older than the Web, because the newer ones keep changing. -->
;;
;;  <dl>
;;<!--REFERENCES ON-->
;;
;;   <dt id="refs2DCONTEXT">[2DCONTEXT]</dt>
;;   <dd><cite><a href="http://dev.w3.org/html5/2dcontext/">HTML Canvas
;;   2D Context</a></cite>, I. Hickson. W3C.</dd>
;;
;;   <dt id="refsABNF">[ABNF]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/std/std68.txt">Augmented
;;   BNF for Syntax Specifications: ABNF</a></cite>, D. Crocker,
;;   P. Overell. IETF.</dd>
;;
;;   <dt id="refsABOUT">[ABOUT]</dt>
;;   <dd><cite><a
;;   href="http://tools.ietf.org/html/draft-holsten-about-uri-scheme">The
;;   'about' URI scheme</a></cite>, J. Holsten, L. Hunt. IETF.</dd>
;;
;;   <dt id="refsARIA">[ARIA]</dt>
;;   <dd><cite><a href="http://www.w3.org/WAI/PF/aria/">Accessible Rich
;;   Internet Applications (WAI-ARIA)</a></cite>, J. Craig, M. Cooper, L. Pappas,
;;   R. Schwerdtfeger, L. Seeman. W3C.</dd>
;;
;;   <dt id="refsARIAIMPL">[ARIAIMPL]</dt>
;;   <dd><cite><a
;;   href="http://www.w3.org/WAI/PF/aria-implementation/">WAI-ARIA 1.0
;;   User Agent Implementation Guide</a></cite>, A. Snow-Weaver,
;;   M. Cooper. W3C.</dd>
;;
;;   <dt id="refsATAG">[ATAG]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.w3.org/TR/ATAG20/">Authoring Tool Accessibility
;;   Guidelines (ATAG) 2.0</a></cite>, J. Richards, J. Spellman,
;;   J. Treviranus. W3C.</dd>
;;
;;   <dt id="refsATOM">[ATOM]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.ietf.org/rfc/rfc4287.txt">The Atom Syndication
;;   Format</a></cite>, M. Nottingham, R. Sayre. IETF.</dd>
;;
;;   <dt id="refsBCP47">[BCP47]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/bcp/bcp47.txt">Tags for
;;   Identifying Languages; Matching of Language Tags</a></cite>,
;;   A. Phillips, M. Davis. IETF.</dd>
;;
;;   <dt id="refsBECSS">[BECSS]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/becss/">Behavioral
;;   Extensions to CSS</a></cite>, I. Hickson. W3C.</dd>
;;
;;   <dt id="refsBEZIER">[BEZIER]</dt>
;;   <dd><cite>Courbes &agrave; poles</cite>, P. de Casteljau. INPI, 1959.</dd>
;;
;;   <dt id="refsBIDI">[BIDI]</dt>
;;   <dd><cite><a href="http://www.unicode.org/reports/tr9/">UAX #9: Unicode
;;   Bidirectional Algorithm</a></cite>, M. Davis. Unicode Consortium.</dd>
;;
;;   <dt id="refsBIG5">[BIG5]</dt>
;;   <dd>(Non-normative) <cite>Chinese Coded Character Set in Computer</cite>. Institute
;;   for Information Industry, March 1984.</dd>
;;
;;   <dt id="refsBOCU1">[BOCU1]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.unicode.org/notes/tn6/">UTN #6: BOCU-1:
;;   MIME-Compatible Unicode Compression</a></cite>, M. Scherer,
;;   M. Davis. Unicode Consortium.</dd>
;;
;;   <dt id="refsCESU8">[CESU8]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.unicode.org/reports/tr26/">UTR #26: Compatibility
;;   Encoding Scheme For UTF-16: 8-BIT (CESU-8)</a></cite>,
;;   T. Phipps. Unicode Consortium.</dd>
;;
;;   <dt id="refsCHARMOD">[CHARMOD]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.w3.org/TR/charmod/">Character Model for the World
;;   Wide Web 1.0: Fundamentals</a></cite>, M. D&uuml;rst, F. Yergeau,
;;   R. Ishida, M. Wolf, T. Texin. W3C.</dd>
;;
;;   <dt id="refsCOMPUTABLE">[COMPUTABLE]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.turingarchive.org/browse.php/B/12">On computable
;;   numbers, with an application to the
;;   Entscheidungsproblem</a></cite>, A. Turing. In <cite>Proceedings of
;;   the London Mathematical Society</cite>, series 2, volume 42, pages
;;   230-265. London Mathematical Society, 1937.</dd>
;;
;;   <dt id="refsCOOKIES">[COOKIES]</dt>
;;   <!--
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2109.txt">HTTP State
;;   Management Mechanism</a></cite>, D. Kristol, L. Montulli. IETF.</dd>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2965.txt">HTTP State Management
;;   Mechanism</a></cite>, D. Kristol, L. Montulli. IETF.</dd>
;;   -->
;;   <dd><cite><a
;;   href="http://tools.ietf.org/html/draft-ietf-httpstate-cookie">HTTP State
;;   Management Mechanism</a></cite>, A. Barth. IETF.</dd>
;;
;;   <dt id="refsCORS">[CORS]</dt>
;;   <!--
;;   <dd><cite><a href="http://www.w3.org/TR/cors/">Cross-Origin
;;   Resource Sharing</a></cite>, A. van Kesteren. W3C.</dd>
;;   -->
;;   <dd><cite><a
;;   href="http://dev.w3.org/2006/waf/access-control/">Cross-Origin
;;   Resource Sharing</a></cite>, A. van Kesteren.  W3C.</dd>
;;
;;   <dt id="refsCSS">[CSS]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/CSS/">Cascading Style Sheets Level 2
;;   Revision 1</a></cite>, B. Bos, T. &Ccedil;elik, I.
;;   Hickson, H. Lie. W3C.</dd>
;;
;;   <dt id="refsCSSATTR">[CSSATTR]</dt>
;;   <dd><cite><a href="http://dev.w3.org/csswg/css-style-attr/">CSS
;;   Styling Attribute Syntax</a></cite>, E. Etemad. W3C.</dd>
;;
;;   <dt id="refsCSSCOLOR">[CSSCOLOR]</dt>
;;   <!--
;;   <dd><cite><a href="http://www.w3.org/TR/css3-color/">CSS Color
;;   Module Level 3</a></cite>, T. &Ccedil;elik, C. Lilley, L.
;;   Baron. W3C.</dd>
;;   -->
;;   <dd><cite><a href="http://dev.w3.org/csswg/css3-color/">CSS Color
;;   Module Level 3</a></cite>, T. &Ccedil;elik, C. Lilley, L.
;;   Baron. W3C.</dd>
;;
;;   <dt id="refsCSSFONTS">[CSSFONTS]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/css3-fonts/">CSS Fonts
;;   Module Level 3</a></cite>, J. Daggett. W3C.</dd>
;;
;;   <dt id="refsCSSOM">[CSSOM]</dt>
;;   <dd><cite><a href="http://dev.w3.org/csswg/cssom/">Cascading Style Sheets
;;   Object Model (CSSOM)</a></cite>, A. van Kesteren. W3C.</dd>
;;
;;   <dt id="refsCSSRUBY">[CSSRUBY]</dt>
;;   <dd><cite><a href="http://dev.w3.org/csswg/css3-ruby/">CSS3 Ruby
;;   Module</a></cite>, R. Ishida. W3C.</dd>
;;
;;   <dt id="refsCSSUI">[CSSUI]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/css3-ui/">CSS3 Basic User
;;   Interface Module</a></cite>, T. &Ccedil;elik. W3C.</dd>
;;
;;   <dt id="refsCSSVALUES">[CSSVALUES]</dt>
;;   <dd><cite><a href="http://dev.w3.org/csswg/css3-values/">CSS3 Values and Units</a></cite>, H. Lie, C. Lilley. W3C.</dd>
;;
;;   <dt id="refsDOM2HTML">[DOM2HTML]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.w3.org/TR/DOM-Level-2-HTML/">Document Object Model
;;   (DOM) Level 2 HTML Specification</a></cite>, J. Stenback, P. Le
;;   Hegaret, A. Le Hors. W3C.</dd>
;;
;;   <dt id="refsDOMCORE">[DOMCORE]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/DOM-Level-3-Core/">Document
;;   Object Model (DOM) Level 3 Core Specification</a></cite>, A. Le
;;   Hors, P. Le Hegaret, L. Wood, G. Nicol, J. Robie, M. Champion,
;;   S. Byrnes. W3C.</dd>
;;   <!--
;;   <dd><cite><a href="http://simon.html5.org/specs/web-dom-core">Web
;;   DOM Core</a></cite>, S. Pieters. W3C.</dd>
;;   -->
;;
;;   <dt id="refsDOMEVENTS">[DOMEVENTS]</dt>
;;   <!--
;;   <dd><cite><a
;;   href="http://www.w3.org/TR/DOM-Level-3-Events/">Document Object
;;   Model (DOM) Level 3 Events Specification</a></cite>,
;;   B. H&ouml;hrmann, P. Le Hegaret, T. Pixley. W3C.</dd>
;;   -->
;;   <dd><cite><a
;;   href="http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html">Document
;;   Object Model (DOM) Level 3 Events Specification</a></cite>,
;;   D. Schepers. W3C.</dd>
;;
;;   <dt id="refsDOMRANGE">[DOMRANGE]</dt>
;;   <dd><cite><a
;;   href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/">Document
;;   Object Model (DOM) Level 2 Traversal and Range
;;   Specification</a></cite>, J.  Kesselman, J. Robie, M. Champion,
;;   P. Sharpe, V. Apparao, L.  Wood. W3C.</dd>
;;
;;   <dt id="refsE163">[E163]</dt>
;;   <dd><cite>Recommendation E.163 &mdash; Numbering Plan for The International
;;   Telephone Service</cite>, CCITT Blue Book, Fascicle II.2, pp. 128-134, November
;;   1988.</dd>
;;
;;   <dt id="refsECMA262">[ECMA262]</dt>
;;   <dd><cite><a
;;   href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript
;;   Language Specification</a></cite>. ECMA.</dd>
;;
;;   <dt id="refsECMA357">[ECMA357]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.ecma-international.org/publications/standards/Ecma-357.htm">ECMAScript
;;   for XML (E4X) Specification</a></cite>. ECMA.</dd>
;;
;;   <dt id="refsEUCKR">[EUCKR]</dt>
;;   <dd><cite>Hangul Unix Environment</cite>. Korea Industrial
;;   Standards Association. Ref. No. KS C 5861-1992.</dd>
;;
;;   <dt id="refsEVENTSOURCE">[EVENTSOURCE]</dt>
;;   <!--
;;   <dd><cite><a href="http://www.w3.org/TR/eventsource/">Server-Sent
;;   Events</a></cite>, I. Hickson. W3C.</dd>
;;   -->
;;   <dd><cite><a
;;   href="http://dev.w3.org/html5/eventsource/">Server-Sent
;;   Events</a></cite>, I. Hickson. W3C.</dd>
;;
;;   <dt id="refsFILEAPI">[FILEAPI]</dt>
;;   <dd><cite><a
;;   href="http://dev.w3.org/2006/webapi/FileUpload/publish/FileAPI.html">File
;;   API</a></cite>, A. Ranganathan. W3C.</dd>
;;
;;   <dt id="refsGBK">[GBK]</dt>
;;   <dd><cite>Chinese Internal Code Specification</cite>. Chinese IT
;;   Standardization Technical Committee.</dd>
;;   <!-- http://www.iana.org/assignments/charset-reg/GBK -->
;;
;;   <dt id="refsGRAPHICS">[GRAPHICS]</dt>
;;   <dd>(Non-normative) <cite>Computer Graphics: Principles and
;;   Practice in C</cite>, Second Edition, J. Foley, A. van Dam,
;;   S. Feiner, J. Hughes. Addison-Wesley. ISBN
;;   0-201-84840-6.</dd>
;;   <!--
;;   This book ("Computer Graphics: Principles and Practice in C")
;;   apparently does not make any references to literature in the
;;   bibliographic section to define the "even-odd" rule for polygon
;;   filling and hit testing. In the absence of such a reference, I
;;   guess that this book is the most authoritative reference.
;;   -->
;;
;;   <dt id="refsGREGORIAN">[GREGORIAN]</dt>
;;   <dd>(Non-normative) <cite>Inter Gravissimas</cite>, A. Lilius,
;;   C. Clavius. Gregory XIII Papal Bulls, February 1582.</dd>
;;
;;   <dt id="refsHATOM">[HATOM]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://microformats.org/wiki/hatom">hAtom</a></cite>, D
;;   Janes. Microformats.</dd>
;;
;;   <dt id="refsHTML4">[HTML4]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.w3.org/TR/html4/">HTML 4.01
;;   Specification</a></cite>, D. Raggett, A. Le Hors, I. Jacobs.  W3C.</dd>
;;
;;   <dt id="refsHTML">[HTML]</dt>
;;   <dd><cite><a
;;   href="http://www.whatwg.org/specs/web-apps/current-work/">HTML</a></cite>,
;;   I. Hickson. WHATWG.</dd>
;;
;;   <dt id="refsHTML5">[HTML5]</dt>
;;   <dd>
;;<!--END vocabs--><!--END vCard--><!--END vEvent--><!--END work--><!--END websocket-api--><!--END storage--><!--END database--><!--END eventsource--><!--END whatwg-workers--><!--END workers--><!--END html-device--><!--YYYEND microdata--><!--END 2dcontext--><!--END postmsg--><!--END w3c-html-->
;;   (Non-normative)
;;<!--START html-device--><!--YYYSTART microdata--><!--START 2dcontext--><!--START postmsg--><!--START w3c-html--><!--START websocket-api--><!--START storage--><!--START database--><!--START eventsource--><!--START whatwg-workers--><!--START workers--><!--START vocabs--><!--START vCard--><!--START vEvent--><!--START work-->
;;   <cite><a href="http://dev.w3.org/html5/spec/">HTML5</a></cite>,
;;   I. Hickson. W3C.</dd>
;;
;;   <dt id="refsHTMLDIFF">[HTMLDIFF]</dt>
;;   <!--
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.w3.org/TR/html5-diff/">HTML5 differences from
;;   HTML4</a></cite>, A. van Kesteren. W3C.</dd>
;;   -->
;;   <dd>(Non-normative) <cite><a
;;   href="http://dev.w3.org/html5/html4-differences/">HTML5
;;   differences from HTML4</a></cite>, A. van Kesteren.  W3C.</dd>
;;
;;   <dt id="refsHTTP">[HTTP]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2616.txt">Hypertext
;;   Transfer Protocol &mdash; HTTP/1.1</a></cite>, R. Fielding, J. Gettys,
;;   J. Mogul, H.  Frystyk, L. Masinter, P. Leach, T. Berners-Lee. IETF.</dd>
;;
;;   <dt id="refsIANACHARSET">[IANACHARSET]</dt>
;;   <dd><cite><a
;;   href="http://www.iana.org/assignments/character-sets">Character
;;   Sets</a></cite>. IANA.</dd>
;;
;;   <dt id="refsIANALINKTYPE">[IANALINKTYPE]</dt>
;;   <dd><cite><a
;;   href="http://www.iana.org/assignments/link-relations">Link
;;   Relations</a></cite>. IANA.</dd>
;;
;;   <dt id="refsIANAPERMHEADERS">[IANAPERMHEADERS]</dt>
;;   <dd><cite><a
;;   href="http://www.iana.org/assignments/message-headers/perm-headers.html">Permanent
;;   Message Header Field Names</a></cite>. IANA.</dd>
;;
;;   <dt id="refsIEEE754">[IEEE754]</dt>
;;   <dd><cite><a
;;   href="http://ieeexplore.ieee.org/servlet/opac?punumber=4610933">IEEE
;;   Standard for Floating-Point Arithmetic (IEEE 754)</a></cite>. IEEE. ISBN 978-0-7381-5753-5.</dd>
;;
;;   <dt id="refsISO8601">[ISO8601]</dt>
;;   <dd><cite><a href="http://isotc.iso.org/livelink/livelink/4021199/ISO_8601_2004_E.zip?func=doc.Fetch&amp;nodeid=4021199">ISO8601: Data elements and interchange formats &mdash; Information interchange &mdash; Representation of dates and times</a></cite>. ISO.</dd>
;;
;;   <dt id="refsISO885911">[ISO885911]</dt>
;;   <dd><cite><a
;;   href="http://anubis.dkuug.dk/jtc1/sc2/open/02n3333.pdf">ISO-8859-11:
;;   Information technology &mdash; 8-bit single-byte coded graphic
;;   character sets &mdash; Part 11: Latin/Thai
;;   alphabet</a></cite>. ISO.</dd>
;;
;;   <dt id="refsJSON">[JSON]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc4627.txt">The
;;   application/json Media Type for JavaScript Object Notation
;;   (JSON)</a></cite>, D. Crockford. IETF.</dd>
;;
;;   <dt id="refsJSURL">[JSURL]</dt>
;;   <dd><cite><a
;;   href="http://tools.ietf.org/html/draft-hoehrmann-javascript-scheme">The
;;   'javascript' resource identifier scheme</a></cite>,
;;   B. H&ouml;hrmann. IETF.</dd>
;;
;;   <dt id="refsMAILTO">[MAILTO]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2368.txt">The mailto URL
;;   scheme</a></cite>, P. Hoffman, L. Masinter, J. Zawinski.
;;   IETF.</dd>
;;
;;   <dt id="refsMATHML">[MATHML]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/MathML/">Mathematical
;;   Markup Language (MathML)</a></cite>, D. Carlisle, P. Ion, R. Miner,
;;   N. Poppelier. W3C.</dd>
;;
;;   <dt id="refsMIMESNIFF">[MIMESNIFF]</dt>
;;   <dd><cite><a
;;   href="http://tools.ietf.org/html/draft-abarth-mime-sniff">Media
;;   Type Sniffing</a></cite>, A. Barth, I. Hickson. IETF.</dd>
;;
;;   <dt id="refsMQ">[MQ]</dt>
;;   <!--
;;   <dd><cite><a href="http://www.w3.org/TR/css3-mediaqueries/">Media
;;   Queries</a></cite>, H. Lie, T.  &Ccedil;elik, D. Glazman, A. van
;;   Kesteren. W3C.</dd>
;;   -->
;;   <dd><cite><a
;;   href="http://dev.w3.org/csswg/css3-mediaqueries/">Media
;;   Queries</a></cite>, H. Lie, T.  &Ccedil;elik, D. Glazman, A. van
;;   Kesteren. W3C.</dd>
;;
;;   <dt id="refsNPAPI">[NPAPI]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="https://developer.mozilla.org/en/Gecko_Plugin_API_Reference">Gecko
;;   Plugin API Reference</a></cite>. Mozilla.</dd>
;;
;;   <dt id="refsNPN">[NPN]</dt>
;;   <dd><cite><a
;;   href="http://tools.ietf.org/html/draft-agl-tls-nextprotoneg">Transport
;;   Layer Security (TLS) Next Protocol Negotiation
;;   Extension</a></cite>, A. Langley. IETF.</dd>
;;
;;   <dt id="refsOPENSEARCH">[OPENSEARCH]</dt>
;;   <dd><cite><a
;;   href="http://www.opensearch.org/Specifications/OpenSearch/1.1#Autodiscovery_in_HTML.2FXHTML">Autodiscovery
;;   in HTML/XHTML</a></cite>. In <cite>OpenSearch 1.1 Draft 4</cite>,
;;   Section 4.6.2. OpenSearch.org.</dd>
;;
;;   <dt id="refsORIGIN">[ORIGIN]</dt>
;;   <dd><cite><a
;;   href="http://tools.ietf.org/html/draft-abarth-origin">The HTTP
;;   Origin Header</a></cite>, A. Barth, C. Jackson, I. Hickson. IETF.</dd>
;;
;;   <dt id="refsPINGBACK">[PINGBACK]</dt>
;;   <dd><cite><a
;;   href="http://www.hixie.ch/specs/pingback/pingback">Pingback
;;   1.0</a></cite>, S. Langridge, I. Hickson.</dd>
;;
;;   <dt id="refsPNG">[PNG]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/PNG/">Portable Network
;;   Graphics (PNG) Specification</a></cite>, D. Duce. W3C.</dd>
;;
;;   <dt id="refsPORTERDUFF">[PORTERDUFF]</dt>
;;   <dd><cite><a
;;   href="http://keithp.com/~keithp/porterduff/p253-porter.pdf">Compositing
;;   Digital Images</a></cite>, T. Porter, T. Duff. In <cite>Computer
;;   graphics</cite>, volume 18, number 3, pp. 253-259. ACM Press, July
;;   1984.</dd>
;;
;;   <dt id="refsPPUTF8">[PPUTF8]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.ifi.uzh.ch/mml/mduerst/papers/PDF/IUC11-UTF-8.pdf">The
;;   Properties and Promises <!-- Promizes (sic) --> of
;;   UTF-8</a></cite>, M. D&uuml;rst. University of Z&uuml;rich. In <cite>Proceedings of the 11th International
;;   Unicode Conference</cite>.</dd>
;;
;;   <dt id="refsPROGRESS">[PROGRESS]</dt>
;;   <!--
;;   <dd><cite><a href="http://www.w3.org/TR/progress-events/">Progress
;;   Events</a></cite>, C. McCathieNevile. W3C.</dd>
;;   -->
;;   <dd><cite><a
;;   href="http://dev.w3.org/2006/webapi/progress/Progress.html">Progress
;;   Events</a></cite>, C. McCathieNevile. W3C.</dd>
;;
;;   <dt id="refsPSL">[PSL]</dt>
;;   <dd><cite><a href="http://publicsuffix.org/">Public Suffix List</a></cite>.
;;   Mozilla Foundation.</dd>
;;
;;   <dt id="refsRFC1034">[RFC1034]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc1034.txt">Domain
;;   Names - Concepts and Facilities</a></cite>, P. Mockapetris. IETF,
;;   November 1987.</dd>
;;
;;   <dt id="refsRFC1321">[RFC1321]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc1321.txt">The MD5
;;   Message-Digest Algorithm</a></cite>, R. Rivest. IETF.</dd>
;;
;;   <dt id="refsRFC1345">[RFC1345]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc1345.txt">Character Mnemonics
;;   and Character Sets</a></cite>, K. Simonsen. IETF.</dd>
;;
;;   <dt id="refsRFC1468">[RFC1468]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc1468.txt">Japanese Character
;;   Encoding for Internet Messages</a></cite>, J. Murai, M. Crispin, E. van der
;;   Poel. IETF.</dd>
;;
;;   <dt id="refsRFC1494">[RFC1494]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.ietf.org/rfc/rfc1494.txt">Equivalences between
;;   1988 X.400 and RFC-822 Message Bodies</a></cite>, H. Alvestrand,
;;   S. Thompson. IETF.</dd>
;;
;;   <dt id="refsRFC1554">[RFC1554]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc1554.txt">ISO-2022-JP-2:
;;   Multilingual Extension of ISO-2022-JP</a></cite>, M. Ohta, K. Handa. IETF.</dd>
;;
;;   <dt id="refsRFC1557">[RFC1557]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc1557.txt">Korean Character
;;   Encoding for Internet Messages</a></cite>, U. Choi, K. Chon, H. Park. IETF.</dd>
;;
;;   <dt id="refsRFC1842">[RFC1842]</dt>
;;
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc1842.txt">ASCII
;;   Printable Characters-Based Chinese Character Encoding for Internet
;;   Messages</a></cite>, Y. Wei, Y. Zhang, J. Li, J. Ding, Y. Jiang.
;;   IETF.</dd>
;;
;;   <dt id="refsRFC1922">[RFC1922]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc1922.txt">Chinese Character
;;   Encoding for Internet Messages</a></cite>, HF. Zhu, DY. Hu, ZG. Wang, TC. Kao,
;;   WCH. Chang, M. Crispin. IETF.</dd>
;;
;;   <dt id="refsRFC2045">[RFC2045]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2045.txt">Multipurpose Internet
;;   Mail Extensions (MIME) Part One: Format of Internet Message Bodies</a></cite>,
;;   N. Freed, N. Borenstein. IETF.</dd>
;;
;;   <dt id="refsRFC2046">[RFC2046]</dt>
;;   <dd><cite><a
;;   href="http://www.ietf.org/rfc/rfc2046.txt">Multipurpose Internet
;;   Mail Extensions (MIME) Part Two: Media Types</a></cite>, N. Freed,
;;   N.  Borenstein. IETF.</dd> <!-- for text/plain and
;;   "Internet Media type"; not for definition of "valid MIME type". -->
;;
;;   <dt id="refsRFC2119">[RFC2119]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2119.txt">Key words for use in
;;   RFCs to Indicate Requirement Levels</a></cite>, S. Bradner. IETF.</dd>
;;
;;   <dt id="refsRFC2237">[RFC2237]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2237.txt">Japanese Character
;;   Encoding for Internet Messages</a></cite>, K. Tamaru. IETF.</dd>
;;
;;   <dt id="refsRFC2246">[RFC2246]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2246.txt">The TLS Protocol
;;   Version 1.0</a></cite>, T. Dierks, C. Allen. IETF.</dd>
;;
;;   <dt id="refsRFC2313">[RFC2313]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2313.txt">PKCS #1:
;;   RSA Encryption</a></cite>, B. Kaliski. IETF.</dd>
;;
;;   <dt id="refsRFC2318">[RFC2318]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2318.txt">The
;;   text/css Media Type</a></cite>, H. Lie, B. Bos, C. Lilley. IETF.</dd>
;;
;;   <dt id="refsRFC2388">[RFC2388]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2388.txt">Returning Values from
;;   Forms: multipart/form-data</a></cite>, L. Masinter. IETF.</dd>
;;
;;   <dt id="refsRFC2425">[RFC2425]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2425.txt">A MIME
;;   Content-Type for Directory Information</a></cite>, T. Howes,
;;   M. Smith, F. Dawson. IETF.</dd>
;;
;;   <dt id="refsRFC2426">[RFC2426]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2426.txt">vCard MIME Directory
;;   Profile</a></cite>, F. Dawson, T. Howes. IETF.</dd>
;;
;;   <dt id="refsRFC2445">[RFC2445]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2445.txt">Internet Calendaring
;;   and Scheduling Core Object Specification (iCalendar)</a></cite>, F. Dawson, D.
;;   Stenerson. IETF.</dd>
;;
;;   <dt id="refsRFC2483">[RFC2483]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2483.txt">URI Resolution
;;   Services Necessary for URN Resolution</a></cite>, M. Mealling, R. Daniel.
;;   IETF.</dd>
;;
;;   <dt id="refsRFC2781">[RFC2781]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2781.txt">UTF-16, an
;;   encoding of ISO 10646</a></cite>, P. Hoffman, F. Yergeau. IETF.</dd>
;;
;;   <dt id="refsRFC2646">[RFC2646]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2646.txt">The Text/Plain Format
;;   Parameter</a></cite>, R. Gellens. IETF.</dd>
;;
;;   <dt id="refsRFC2806">[RFC2806]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.ietf.org/rfc/rfc2806.txt">URLs for Telephone
;;   Calls</a></cite>, A. Vaha-Sipila. IETF.</dd>
;;
;;   <dt id="refsRFC3023">[RFC3023]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc3023.txt">XML Media
;;   Types</a></cite>, M. Murata, S. St. Laurent, D. Kohn. IETF.</dd>
;;
;;   <dt id="refsRFC3279">[RFC3279]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc3279.txt">Algorithms
;;   and Identifiers for the Internet X.509 Public Key Infrastructure
;;   Certificate and Certificate Revocation List (CRL)
;;   Profile</a></cite>, W. Polk, R. Housley, L. Bassham. IETF.</dd>
;;
;;   <dt id="refsRFC3490">[RFC3490]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc3490.txt">Internationalizing
;;   Domain Names in Applications (IDNA)</a></cite>, P. Faltstrom, P. Hoffman, A.
;;   Costello. IETF.</dd>
;;
;;   <dt id="refsRFC3548">[RFC3548]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc3548.txt">The Base16, Base32,
;;   and Base64 Data Encodings</a></cite>, S. Josefsson. IETF.</dd>
;;
;;   <dt id="refsRFC3629">[RFC3629]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc3629.txt">UTF-8, a
;;   transformation format of ISO 10646</a></cite>, F. Yergeau. IETF.</dd>
;;
;;   <dt id="refsRFC3864">[RFC3864]</dt>
;;   <dd><cite><a
;;   href="http://www.ietf.org/rfc/rfc3864.txt">Registration Procedures
;;   for Message Header Fields</a></cite>, G. Klyne, M. Nottingham,
;;   J. Mogul. IETF.</dd>
;;
;;   <dt id="refsRFC3986">[RFC3986]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc3986.txt">Uniform Resource
;;   Identifier (URI): Generic Syntax</a></cite>, T. Berners-Lee, R. Fielding, L.
;;   Masinter. IETF.</dd>
;;
;;   <dt id="refsRFC3987">[RFC3987]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc3987.txt">Internationalized
;;   Resource Identifiers (IRIs)</a></cite>, M. D&uuml;rst, M. Suignard. IETF.</dd>
;;
;;   <dt id="refsRFC4281">[RFC4281]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc4281.txt">The Codecs Parameter
;;   for "Bucket" Media Types</a></cite>, R. Gellens, D. Singer, P. Frojdh. IETF.</dd>
;;
;;   <dt id="refsRFC4329">[RFC4329]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.ietf.org/rfc/rfc4329.txt">Scripting Media
;;   Types</a></cite>, B. H&ouml;hrmann. IETF.</dd>
;;
;;   <dt id="refsRFC4366">[RFC4366]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc4366.txt">Transport
;;   Layer Security (TLS) Extensions</a></cite>, S. Blake-Wilson,
;;   M. Nystrom, D. Hopwood, J. Mikkelsen, T. Wright. IETF.</dd>
;;
;;   <dt id="refsRFC4770">[RFC4770]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc4770.txt">vCard Extensions for
;;   Instant Messaging (IM)</a></cite>, C. Jennings, J. Reschke. IETF.</dd>
;;
;;   <dt id="refsRFC5280">[RFC5280]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc5280.txt">Internet
;;   X.509 Public Key Infrastructure Certificate and Certificate
;;   Revocation List (CRL) Profile</a></cite>, D. Cooper, S. Santesson,
;;   S. Farrell, S. Boeyen, R. Housley, W. Polk. IETF.</dd>
;;
;;   <dt id="refsRFC5322">[RFC5322]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc5322.txt">Internet Message
;;   Format</a></cite>, P. Resnick. IETF.</dd>
;;
;;   <dt id="refsRFC5724">[RFC5724]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc5724.txt">URI Scheme
;;   for Global System for Mobile Communications (GSM) Short Message
;;   Service (SMS)</a></cite>, E. Wilde, A. Vaha-Sipila. IETF.</dd>
;;
;;   <dt id="refsSCSU">[SCSU]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.unicode.org/reports/tr6/">UTR #6: A Standard
;;   Compression Scheme For Unicode</a></cite>, M. Wolf, K. Whistler,
;;   C. Wicksteed, M. Davis, A. Freytag, M. Scherer. Unicode Consortium.</dd>
;;
;;   <dt id="refsSELECTORS">[SELECTORS]</dt>
;;   <dd><cite><a
;;   href="http://www.w3.org/TR/css3-selectors">Selectors</a></cite>,
;;   T. &Ccedil;elik, E. Etemad, D.  Glazman, I. Hickson, P. Linss,
;;   J. Williams. W3C.</dd>
;;
;;   <dt id="refsSHIFTJIS">[SHIFTJIS]</dt>
;;   <dd><cite>JIS X0208: 7-bit and 8-bit double byte coded KANJI sets
;;   for information interchange</cite>. Japanese Standards Association.</dd>
;;
;;   <dt id="refsSQL">[SQL]</dt>
;;   <dd>The precise dialect has not yet been specified.</dd>
;;
;;   <dt id="refsSRGB">[SRGB]</dt>
;;   <dd><cite lang="en-GB"><a
;;   href="http://webstore.iec.ch/webstore/webstore.nsf/artnum/025408!OpenDocument&amp;Click=">IEC
;;   61966-2-1: Multimedia systems and equipment &mdash; Colour measurement
;;   and management &mdash; Part 2-1: Colour management &mdash; Default RGB colour
;;   space &mdash; sRGB</a></cite>. IEC.</dd>
;;
;;   <dt id="refsSVG">[SVG]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/SVGTiny12/">Scalable Vector
;;   Graphics (SVG) Tiny 1.2 Specification</a></cite>, O. Andersson,
;;   R. Berjon, E. Dahlstr&ouml;m, A. Emmons, J. Ferraiolo, A. Grasso,
;;   V. Hardy, S. Hayman, D. Jackson, C. Lilley, C. McCormack,
;;   A. Neumann, C. Northway, A. Quint, N. Ramani, D. Schepers,
;;   A. Shellshear. W3C.</dd>
;;
;;   <dt id="refsTIS620">[TIS620]</dt>
;;   <dd><cite><a
;;   href="http://www.nectec.or.th/it-standards/std620/std620.htm">UDC
;;   681.3.04:003.62</a></cite>. Thai Industrial Standards Institute,
;;   Ministry of Industry, Royal Thai Government. ISBN
;;   974-606-153-4.</dd>
;;
;;   <dt id="refsUAAG">[UAAG]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.w3.org/TR/UAAG20/">Web Content Accessibility
;;   Guidelines (UAAG) 2.0</a></cite>, J. Allan, K. Ford, J. Richards,
;;   J. Spellman. W3C.</dd>
;;
;;   <dt id="refsUNICODE">[UNICODE]</dt>
;;   <dd><cite><a href="http://www.unicode.org/versions/">The Unicode Standard</a></cite>. Unicode Consortium.</dd>
;;
;;   <dt id="refsUNIVCHARDET">[UNIVCHARDET]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.mozilla.org/projects/intl/UniversalCharsetDetection.html">A
;;   composite approach to language/encoding
;;   detection</a></cite>, S. Li, K. Momoi. Netscape. In
;;   <cite>Proceedings of the 19th International Unicode
;;   Conference</cite>.</dd>
;;
;;   <dt id="refsUTF7">[UTF7]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2152.txt">UTF-7: A
;;   Mail-Safe Transformation Format of Unicode</a></cite>,
;;   D. Goldsmith, M. Davis. IETF.</dd>
;;
;;   <dt id="refsUTF8DET">[UTF8DET]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.w3.org/International/questions/qa-forms-utf-8">Multilingual
;;   form encoding</a></cite>, M. D&uuml;rst. W3C.</dd>
;;
;;   <dt id="refsUTR36">[UTR36]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.unicode.org/reports/tr36/">UTR #36: Unicode
;;   Security Considerations</a></cite>, M. Davis, M. Suignard. Unicode
;;   Consortium.</dd>
;;
;;   <dt id="refsWCAG">[WCAG]</dt>
;;   <dd>(Non-normative) <cite><a
;;   href="http://www.w3.org/TR/WCAG20/">Web Content Accessibility
;;   Guidelines (WCAG) 2.0</a></cite>, B. Caldwell, M. Cooper, L. Reid,
;;   G. Vanderheiden. W3C.</dd>
;;
;;   <dt id="refsWEBADDRESSES">[WEBADDRESSES]</dt>
;;   <dd><cite><a href="http://www.w3.org/html/wg/href/draft">Web
;;   addresses in HTML5</a></cite>, D. Connolly,
;;   C. Sperberg-McQueen.</dd>
;;
;;   <dt id="refsWEBGL">[WEBGL]</dt>
;;   <dd><cite><a
;;   href="https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/doc/spec/WebGL-spec.html">WebGL
;;   Specification</a></cite>, C. Marrin. Khronos Group.</dd>
;;
;;   <dt id="refsWEBIDL">[WEBIDL]</dt>
;;   <!--
;;   <dd><cite><a href="http://www.w3.org/TR/WebIDL/">Web
;;   IDL</a></cite>, C. McCormack. W3C.</dd>
;;   -->
;;   <dd><cite><a href="http://dev.w3.org/2006/webapi/WebIDL/">Web
;;   IDL</a></cite>, C. McCormack. W3C.</dd>
;;
;;   <dt id="refsWEBLINK">[WEBLINK]</dt>
;;   <dd><cite><a
;;   href="http://tools.ietf.org/html/draft-nottingham-http-link-header">Web
;;   Linking</a></cite>, M. Nottingham. IETF.</dd>
;;
;;   <dt id="refsWEBSOCKET">[WEBSOCKET]</dt>
;;   <!--
;;   <dd><cite><a href="http://www.w3.org/TR/websockets/">The WebSocket
;;   API</a></cite>, I. Hickson. W3C.</dd>
;;   -->
;;   <dd><cite><a href="http://dev.w3.org/html5/websockets/">The WebSocket
;;   API</a></cite>, I. Hickson. W3C.</dd>
;;
;;   <dt id="refsWEBSQL">[WEBSQL]</dt>
;;   <dd><cite><a href="http://dev.w3.org/html5/webdatabase/">Web SQL
;;   Database</a></cite>, I. Hickson. W3C.</dd>
;;
;;   <dt id="refsWEBSTORAGE">[WEBSTORAGE]</dt>
;;   <dd><cite><a href="http://dev.w3.org/html5/webstorage/">Web
;;   Storage</a></cite>, I. Hickson. W3C.</dd>
;;
;;   <dt id="refsWEBWORKERS">[WEBWORKERS]</dt>
;;   <!--
;;   <dd><cite><a
;;   href="http://www.w3.org/TR/webworkers/">Workers</a></cite>,
;;   I. Hickson. W3C.</dd>
;;   -->
;;   <dd><cite><a href="http://dev.w3.org/html5/workers/">Web
;;   Workers</a></cite>, I. Hickson. W3C.</dd>
;;
;;   <dt id="refsWHATWGBLOG">[WHATWGBLOG]</dt>
;;   <dd><cite><a href="http://blog.whatwg.org/">The WHATWG Blog</a></cite>. WHATWG.</dd>
;;
;;   <dt id="refsWHATWGWIKI">[WHATWGWIKI]</dt>
;;   <dd><cite><a href="http://wiki.whatwg.org/">The WHATWG Wiki</a></cite>. WHATWG.</dd>
;;
;;   <dt id="refsWIN1252">[WIN1252]</dt>
;;   <dd><cite><a href="http://www.microsoft.com/globaldev/reference/sbcs/1252.htm">Windows 1252</a></cite>. Microsoft.</dd>
;;
;;   <dt id="refsWIN1254">[WIN1254]</dt>
;;   <dd><cite><a href="http://www.microsoft.com/globaldev/reference/sbcs/1254.htm">Windows 1254</a></cite>. Microsoft.</dd>
;;
;;   <dt id="refsWIN31J">[WIN31J]</dt>
;;   <dd><cite><a href="http://www.microsoft.com/globaldev/reference/dbcs/932.mspx">Windows Codepage 932</a></cite>. Microsoft.</dd>
;;
;;   <dt id="refsWIN874">[WIN874]</dt>
;;   <dd><cite><a href="http://www.microsoft.com/globaldev/reference/sbcs/874.mspx">Windows 874</a></cite>. Microsoft.</dd>
;;
;;   <dt id="refsWIN949">[WIN949]</dt>
;;   <dd><cite><a href="http://www.microsoft.com/globaldev/reference/dbcs/949.mspx">Windows Codepage 949</a></cite>. Microsoft.</dd>
;;
;;   <dt id="refsWSP">[WSP]</dt>
;;   <dd><cite><a
;;   href="http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol">The
;;   WebSocket protocol</a></cite>, I. Fette. IETF.</dd>
;;
;;   <dt id="refsX121">[X121]</dt>
;;   <dd><cite>Recommendation X.121 &mdash; International Numbering Plan for
;;   Public Data Networks</cite>, CCITT Blue Book, Fascicle VIII.3,
;;   pp. 317-332.</dd>
;;
;;   <dt id="refsX690">[X690]</dt>
;;   <dd><cite><a
;;   href="http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf">Recommendation
;;   X.690 &mdash; Information Technology &mdash; ASN.1 Encoding Rules &mdash;
;;   Specification of Basic Encoding Rules (BER), Canonical Encoding
;;   Rules (CER), and Distinguished Encoding Rules
;;   (DER)</a></cite>. International Telecommunication Union.</dd>
;;
;;   <dt id="refsXHR">[XHR]</dt>
;;   <!--
;;   <dd><cite><a href="http://www.w3.org/TR/XMLHttpRequest/">The XMLHttpRequest
;;   Object</a></cite>, A. van Kesteren. W3C.</dd>
;;   -->
;;   <dd><cite><a
;;   href="http://dev.w3.org/2006/webapi/XMLHttpRequest-2/"><code>XMLHttpRequest</code></a></cite>,
;;   A. van Kesteren. W3C.</dd>
;;
;;   <dt id="refsXHTML1">[XHTML1]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/xhtml1/">XHTML(TM) 1.0 The
;;   Extensible HyperText Markup Language (Second Edition)</a></cite>. W3C.</dd>
;;
;;   <dt id="refsXHTMLMOD">[XHTMLMOD]</dt>
;;   <dd><cite><a
;;   href="http://www.w3.org/TR/xhtml-modularization">Modularization of
;;   XHTML(TM)</a></cite>, M. Altheim, F. Boumphrey, S. Dooley, S.
;;   McCarron, S. Schnitzenbaumer, T. Wugofski. W3C.</dd>
;;
;;   <dt id="refsXML">[XML]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/xml/">Extensible Markup
;;   Language</a></cite>, T. Bray, J. Paoli, C. Sperberg-McQueen,
;;   E. Maler, F. Yergeau. W3C.</dd>
;;
;;   <dt id="refsXMLBASE">[XMLBASE]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/xmlbase/">XML
;;   Base</a></cite>, J. Marsh, R. Tobin. W3C.</dd>
;;
;;   <dt id="refsXMLNS">[XMLNS]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/xml-names/">Namespaces in
;;   XML</a></cite>, T. Bray, D. Hollander, A. Layman, R. Tobin. W3C.</dd>
;;
;;   <dt id="refsXPATH10">[XPATH10]</dt>
;;   <dd><cite><a
;;   href="http://www.w3.org/TR/1999/REC-xpath-19991116">XML Path
;;   Language (XPath) Version 1.0</a></cite>, J. Clark, S. DeRose. W3C.</dd>
;;
;;   <dt id="refsXSLT10">[XSLT10]</dt>
;;   <dd><cite><a href="http://www.w3.org/TR/1999/REC-xslt-19991116">XSL
;;   Transformations (XSLT) Version 1.0</a></cite>, J. Clark. W3C.</dd>
;;
;;<!--END complete--><!--END epub-->
;;
;;   <dt id="refsRFC2109">[RFC2109]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2109.txt">HTTP State
;;   Management Mechanism</a></cite>, D. Kristol,
;;   L. Montulli. IETF.</dd>
;;
;;   <dt id="refsRFC2616">[RFC2616]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2616.txt">Hypertext
;;   Transfer Protocol &mdash; HTTP/1.1</a></cite>, R. Fielding, J. Gettys,
;;   J. Mogul, H.  Frystyk, L. Masinter, P. Leach, T. Berners-Lee. IETF.</dd>
;;
;;   <dt id="refsRFC2965">[RFC2965]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/rfc2965.txt">HTTP State
;;   Management Mechanism</a></cite>, D. Kristol,
;;   L. Montulli. IETF.</dd>
;;
;;   <dt id="refsRFC5234">[RFC5234]</dt>
;;   <dd><cite><a href="http://www.ietf.org/rfc/std/std68.txt">Augmented
;;   BNF for Syntax Specifications: ABNF</a></cite>, D. Crocker,
;;   P. Overell. IETF.</dd>
;;
;;<!--START complete--><!--START epub-->
;;
;;<!--REFERENCES OFF-->
;;  </dl>
;;
;;<!--END websrt-->
;;<!--END whatwg-workers--><!--END vocabs--><!--END vCard--><!--END vEvent--><!--END work-->
;;<!--END websocket-api--><!--END storage--><!--END database--><!--END eventsource--><!--END workers-->
;;<!--END html-device--><!--END microdata--><!--END 2dcontext--><!--END postmsg--><!--END w3c-html-->
;;
;;<!--START w3c-html-->
;;
;;  <h2 class="no-num">Acknowledgements</h2> <!-- ACKS -->
;;
;;  <p>Thanks to
;;
;;  Aankhen,
;;  Aaron Boodman,
;;  Aaron Leventhal,
;;  Adam Barth,
;;  Adam de Boor,
;;  Adam Hepton,
;;  Adam Roben,
;;  Addison Phillips,
;;  Adele Peterson,
;;  Adrian Bateman,
;;  Adrian Sutton,
;;  Agust&iacute;n Fern&aacute;ndez,
;;  Ajai Tirumali,
;;  Akatsuki Kitamura,
;;  Alan Plum,
;;  Alastair Campbell,
;;  Alejandro G. Castro,
;;  Alex Bishop,
;;  Alex Nicolaou,
;;  Alex Rousskov,
;;  Alexander J. Vincent,
;;  Alexey Feldgendler,
;;  &#1040;&#1083;&#1077;&#1082;&#1089;&#1077;&#1081; &#1055;&#1088;&#1086;&#1089;&#1082;&#1091;&#1088;&#1103;&#1082;&#1086;&#1074; (Alexey Proskuryakov),
;;  Alexis Deveria,
;;  Allan Clements,
;;  Amos Jeffries,
;;  Anders Carlsson,
;;  Andreas<!-- mqmq87 -->,
;;  Andreas Kling,
;;  Andrei Popescu,
;;  Andr&eacute; E. Veltstra,
;;  Andrew Clover,
;;  Andrew Gove,
;;  Andrew Grieve,
;;  Andrew Oakley,
;;  Andrew Sidwell,
;;  Andrew Smith,
;;  Andrew W. Hagen,
;;  Andrey V. Lukyanov,
;;  Andy Heydon,
;;  Andy Palay,
;;  Anne van Kesteren,
;;  Anthony Boyd,
;;  Anthony Bryan,
;;  Anthony Hickson,
;;  Anthony Ricaud,
;;  Antti Koivisto,
;;  Arne Thomassen,
;;  Aron Spohr,
;;  Arphen Lin,
;;  Aryeh Gregor,
;;  Asbj&oslash;rn Ulsberg,
;;  Ashley Sheridan,
;;  Atsushi Takayama,
;;  Aurelien Levy,
;;  Ave Wrigley,
;;  Ben Boyle,
;;  Ben Godfrey,
;;  Ben Lerner,
;;  Ben Leslie,
;;  Ben Meadowcroft,
;;  Ben Millard,
;;  Benjamin Carl Wiley Sittler,
;;  Benjamin Hawkes-Lewis,
;;  Bert Bos,
;;  Bijan Parsia,
;;  Bil Corry,
;;  Bill Mason,
;;  Bill McCoy,
;;  Billy Wong,
;;  Bjartur Thorlacius,
;;  Bj&ouml;rn H&ouml;hrmann,
;;  Blake Frantz,
;;  Boris Zbarsky,
;;  Brad Fults,
;;  Brad Neuberg,
;;  Brad Spencer,
;;  Brady Eidson,
;;  Brendan Eich,
;;  Brenton Simpson,
;;  Brett Wilson,
;;  Brett Zamir,
;;  Brian Campbell,
;;  Brian Korver,
;;  Brian Kuhn,
;;  Brian Ryner,
;;  Brian Smith,
;;  Brian Wilson,
;;  Bryan Sullivan,
;;  Bruce D'Arcus,
;;  Bruce Lawson,
;;  Bruce Miller,
;;  C. Williams,
;;  Cameron McCormack,
;;  Cao Yipeng,
;;  Carlos Gabriel Cardona,
;;  Carlos Perell&oacute; Mar&iacute;n,
;;  Chao Cai,
;;  &#xc724;&#xc11d;&#xcc2c; (Channy Yun),
;;  Charl van Niekerk,
;;  Charles Iliya Krempeaux,
;;  Charles McCathieNevile,
;;  Chris Apers,
;;  Chris Cressman,
;;  Chris Evans,
;;  Chris Morris,
;;  Chris Pearce,
;;  Christian Biesinger,
;;  Christian Johansen,
;;  Christian Schmidt,
;;  Christopher Aillon,
;;  Chriswa,
;;  Clark Buehler,
;;  Cole Robison,
;;  Colin Fine,
;;  Collin Jackson,
;;  Corprew Reed,
;;  Craig Cockburn,
;;  Csaba Gabor,
;;  Csaba Marton,
;;  Daniel Barclay,
;;  Daniel Bratell,
;;  Daniel Brooks,
;;  Daniel Brumbaugh Keeney,
;;  Daniel Cheng,
;;  Daniel Davis,
;;  Daniel Glazman,
;;  Daniel Peng,
;;  Daniel Schattenkirchner,
;;  Daniel Sp&aring;ng,
;;  Daniel Steinberg,
;;  Danny Sullivan,
;;  Darin Adler,
;;  Darin Fisher,
;;  Darxus,
;;  Dave Camp,
;;  Dave Hodder,
;;  Dave Lampton,
;;  Dave Singer,
;;  Dave Townsend<!-- Mossop on moz irc -->,
;;  David Baron,
;;  David Bloom,
;;  David Bruant,
;;  David Carlisle,
;;  David E. Cleary,
;;  David Egan Evans,
;;  David Flanagan,
;;  David Gerard,
;;  David H&aring;s&auml;ther,
;;  David Hyatt,
;;  David I. Lehn,
;;  David John Burrowes,
;;  David Matja,
;;  David Remahl,
;;  David Smith,
;;  David Woolley,
;;  DeWitt Clinton,
;;  Dean Edridge,
;;  Dean Edwards,
;;  Debi Orton,
;;  Derek Featherstone,
;;  Devdatta,
;;  Dimitri Glazkov,
;;  Dimitry Golubovsky,
;;  Dirk Pranke,
;;  Divya Manian,
;;  Dmitry Titov,
;;  dolphinling,
;;  Dominique Haza&euml;l-Massieux,
;;  Don Brutzman,
;;  Doron Rosenberg,
;;  Doug Kramer,
;;  Doug Simpkinson,
;;  Drew Wilson,
;;  Edmund Lai,
;;  Eduard Pascual,
;;  Eduardo Vela,
;;  Edward O'Connor,
;;  Edward Welbourne,
;;  Edward Z. Yang,
;;  Eira Monstad,
;;  Eitan Adler,
;;  Eliot Graff,
;;  Elizabeth Castro,
;;  Elliott Sprehn,
;;  Elliotte Harold,
;;  Eric Carlson,
;;  Eric Law,
;;  Eric Rescorla,
;;  Eric Semling,
;;  Erik Arvidsson,
;;  Erik Rose,
;;  Evan Martin,
;;  Evan Prodromou,
;;  Evert,
;;  fantasai,
;;  Felix Sasaki,
;;  Francesco Schwarz,
;;  Francis Brosnan Blazquez,
;;  Franck 'Shift' Qu&eacute;lain,
;;  Frank Barchard,
;;  &#40284;&#39164;&#25991;&#25935; (Fumitoshi Ukai),
;;  Futomi Hatano,
;;  Gavin Carothers,
;;  Gareth Rees,
;;  Garrett Smith,
;;  Geoffrey Garen,
;;  Geoffrey Sneddon,
;;  George Lund,
;;  Gianmarco Armellin,
;;  Giovanni Campagna,
;;  Graham Klyne,
;;  Greg Botten,
;;  Greg Houston,
;;  Greg Wilkins,
;;  Gregg Tavares,
;;  Gregory J. Rosmaita,
;;  Grey,
;;  Gytis Jakutonis,
;;  H&aring;kon Wium Lie,
;;  Hallvord Reiar Michaelsen Steen,
;;  Hans S. T&oslash;mmerhalt,
;;  Hans Stimer,
;;  Henri Sivonen,
;;  Henrik Lied,
;;  Henry Mason,
;;  Hugh Winkler,
;;  Ian Bicking,
;;  Ian Davis,
;;  Ignacio Javier,
;;  Ivan Enderlin,
;;  Ivo Emanuel Gon&ccedil;alves,
;;  J. King,
;;  Jacques Distler,
;;  James Craig,
;;  James Graham,
;;  James Justin Harrell,
;;  James M Snell,
;;  James Perrett,
;;  James Robinson,
;;  Jamie Lokier,
;;  Jan-Klaas Kollhof,
;;  Jason Kersey,
;;  Jason Lustig,
;;  Jason White,
;;  Jasper Bryant-Greene,
;;  Jatinder Mann,
;;  Jed Hartman,
;;  Jeff Balogh,
;;  Jeff Cutsinger,
;;  Jeff Schiller,
;;  Jeff Walden,
;;  Jeffrey Zeldman,
;;  &#32993;&#24935;&#37586; (Jennifer Braithwaite),
;;  Jens Bannmann,
;;  Jens Fendler,
;;  Jens Lindstr&ouml;m,
;;  Jens Meiert,
;;  Jeremy Keith,
;;  Jeremy Orlow,
;;  Jeroen van der Meer,
;;  Jian Li,
;;  Jim Jewett,
;;  Jim Ley,
;;  Jim Meehan,
;;  Jjgod Jiang,
;;  Jo&atilde;o Eiras,
;;  Joe Clark,
;;  Joe Gregorio,
;;  Joel Spolsky,
;;  Johan Herland,
;;  John Boyer,
;;  John Bussjaeger,
;;  John Carpenter,
;;  John Fallows,
;;  John Foliot,
;;  John Harding,
;;  John Keiser,
;;  John Snyders,
;;  John-Mark Bell,
;;  Johnny Stenback,
;;  Jon Ferraiolo,
;;  Jon Gibbins,
;;  Jon Perlow,
;;  Jonas Sicking,
;;  Jonathan Cook,
;;  Jonathan Rees,
;;  Jonathan Worent,
;;  Jonny Axelsson,
;;  Jorgen Horstink,
;;  Jorunn Danielsen Newth,
;;  Joseph Kesselman,
;;  Joseph Pecoraro,
;;  Josh Aas,
;;  Josh Levenberg,
;;  Joshua Randall,
;;  Jukka K. Korpela,
;;  Jules Cl&eacute;ment-Ripoche,
;;  Julian Reschke,
;;  J&uuml;rgen Jeka,
;;  Justin Lebar,
;;  Justin Sinclair,
;;  Kai Hendry,
;;  Kartikaya Gupta,
;;  Kathy Walton,
;;  Kelly Norton,
;;  Kevin Benson,
;;  Korn&eacute;l P&aacute;l,
;;  Kornel Lesinski,
;;  Kristof Zelechovski,
;;  Krzysztof Maczy&#x0144;ski,
;;  &#x9ed2;&#x6fa4;&#x525b;&#x5fd7; (Kurosawa Takeshi),
;;  Kyle Hofmann<!-- Ozob -->,
;;  L&eacute;onard Bouchet,
;;  Lachlan Hunt,
;;  Larry Masinter,
;;  Larry Page,
;;  Lars Gunther<!-- Keryx Web -->,
;;  Lars Solberg,
;;  Laura Carlson,
;;  Laura Granka,
;;  Laura L. Carlson,
;;  Laura Wisewell,
;;  Laurens Holst,
;;  Lee Kowalkowski,
;;  Leif Halvard Silli,
;;  Lenny Domnitser,
;;  Leons Petrazickis,
;;  Lobotom Dysmon,
;;  Logan<!-- on moz irc -->,
;;  Loune,
;;  Luke Kenneth Casson Leighton,
;;  Maciej Stachowiak,
;;  Magnus Kristiansen<!-- Dashiva -->,
;;  Maik Merten,
;;  Malcolm Rowe,
;;  Mark Birbeck,
;;  Mark Miller,
;;  Mark Nottingham,
;;  Mark Pilgrim,
;;  Mark Rowe<!--bdash-->,
;;  Mark Schenk,
;;  Mark Wilton-Jones,
;;  Martijn Wargers,
;;  Martin Atkins,
;;  Martin D&uuml;rst,
;;  Martin Honnen,
;;  Martin Kutschker,
;;  Martin Thomson,
;;  Masataka Yakura,
;;  Mathieu Henri,
;;  Matias Larsson,
;;  Matt Schmidt,
;;  Matt Wright,
;;  Matthew Gregan,
;;  Matthew Mastracci,
;;  Matthew Raymond,
;;  Matthew Thomas,
;;  Mattias Waldau,
;;  Max Romantschuk,
;;  Menno van Slooten,
;;  Micah Dubinko,
;;  Michael 'Ratt' Iannarelli,
;;  Michael A. Nachbaur,
;;  Michael A. Puls II<!--Shadow2531-->,
;;  Michael Carter,
;;  Michael Daskalov,
;;  Michael Enright,
;;  Michael Gratton,
;;  Michael Nordman,
;;  Michael Powers,
;;  Michael Rakowski,
;;  Michael(tm) Smith,
;;  Michal Zalewski,
;;  Michel Fortin,
;;  Michelangelo De Simone,
;;  Michiel van der Blonk,
;;  Mihai &#x015E;ucan<!-- from ROBO Design -->,
;;  Mihai Parparita,
;;  Mike Brown,
;;  Mike Dierken<!-- S. Mike Dierken -->,
;;  Mike Dixon,
;;  Mike Schinkel,
;;  Mike Shaver,
;;  Mikko Rantalainen,
;;  Mohamed Zergaoui<!-- Innovimax SARL -->,
;;  Mounir Lamouri,
;;  Ms2ger,
;;  NARUSE Yui,
;;  Neil Deakin,
;;  Neil Rashbrook,
;;  Neil Soiffer,
;;  Nicholas Shanks,
;;  Nicholas Stimpson,
;;  Nicholas Zakas,
;;  Nickolay Ponomarev,
;;  Nicolas Gallagher,
;;  Noah Mendelsohn,
;;  Noah Slater,
;;  NoozNooz42,
;;  Ojan Vafai,
;;  Olaf Hoffmann,
;;  Olav Junker Kj&aelig;r,
;;  Old&#345;ich Vete&#353;n&#237;k,
;;  Oli Studholme,
;;  Oliver Hunt,
;;  Oliver Rigby,
;;  Olivier Gendrin,
;;  Olli Pettay,
;;  Patrick H. Lauke,
;;  Paul Norman,
;;  Per-Erik Brodin,
;;  Perry Smith,
;;  Peter Karlsson,
;;  Peter Kasting,
;;  Peter Stark,
;;  Peter-Paul Koch,
;;  Phil Pickering,
;;  Philip J&auml;genstedt,
;;  Philip Taylor,
;;  Philip TAYLOR<!-- a different one -->,
;;  Prateek Rungta,
;;  Pravir Gupta,
;;  Rachid Finge,
;;  Rajas Moonka,
;;  Ralf Stoltze,
;;  Ralph Giles,
;;  Raphael Champeimont,
;;  Remco,
;;  Remy Sharp,
;;  Rene Saarsoo,
;;  Rene Stach,
;;  Ric Hardacre,
;;  Rich Doughty,
;;  Richard Ishida,
;;  Rigo Wenning,
;;  Rikkert Koppes,
;;  Rimantas Liubertas,
;;  Riona Macnamara,
;;  Rob Ennals,
;;  Rob Jellinghaus,
;;  Robert Blaut,
;;  Robert Collins,
;;  Robert O'Callahan,
;;  Robert Sayre,
;;  Robin Berjon,
;;  Rodger Combs,
;;  Roland Steiner,
;;  Roman Ivanov,
;;  Roy Fielding,
;;  Ryan King,
;;  S. Mike Dierken,
;;  Salvatore Loreto,
;;  Sam Dutton,
;;  Sam Kuper,
;;  Sam Ruby,
;;  Sam Weinig,
;;  Sander van Lambalgen,
;;  Sarven Capadisli,
;;  Scott Gonz&aacute;lez,
;;  Scott Hess,
;;  Sean Fraser,
;;  Sean Hayes,
;;  Sean Hogan,
;;  Sean Knapp,
;;  Sebastian Markb&aring;ge,
;;  Sebastian Schnitzenbaumer,
;;  Seth Call,
;;  Shanti Rao,
;;  Shaun Inman,
;;  Shiki Okasaka,
;;  Sierk Bornemann,
;;  Sigbj&oslash;rn Vik,
;;  Silvia Pfeiffer,
;;  Simon Montagu,
;;  Simon Pieters,
;;  Simon Spiegel,
;;  skeww, <!-- on reddit -->
;;  Stanton McCandlish,
;;  Stefan Haustein,
;;  Stefan Santesson,
;;  Steffen Meschkat,
;;  Stephen Ma,
;;  Steve Faulkner,
;;  Steve Runyon,
;;  Steven Bennett,
;;  Steven Garrity,
;;  Steven Tate,
;;  Stewart Brodie,
;;  Stuart Ballard,
;;  Stuart Parmenter,
;;  Subramanian Peruvemba,
;;  Sunava Dutta,
;;  Susan Borgrink,
;;  Susan <!--G.--> Lesch,
;;  Sylvain Pasche,
;;  T. J. Crowder,
;;  Tab Atkins,
;;  <span title="" lang="tr">Tantek &Ccedil;elik</span>,
;;  &#30000;&#26449;&#20581;&#20154; (TAMURA Kent),
;;  Ted Mielczarek,
;;  Terrence Wood,
;;  Thomas Broyer,
;;  Thomas Koetter,
;;  Thomas O'Connor,
;;  Tim Altman,
;;  Tim Johansson,
;;  Toby Inkster,
;;  Todd Moody,
;;  Tom Pike,
;;  Tommy Thorsen,
;;  Travis Leithead,
;;  Tyler Close,
;;  Vladimir Katardjiev,
;;  Vladimir Vuki&#x0107;evi&#x0107;,
;;  voracity,
;;  Wakaba,
;;  Wayne Carr,
;;  Wayne Pollock,
;;  Wellington Fernando de Macedo,
;;  Weston Ruter,
;;  Will Levine,
;;  William Swanson,
;;  Wladimir Palant,
;;  Wojciech Mach,
;;  Wolfram Kriesing,
;;  Yang Chen,
;;  Ye-Kui Wang,
;;  Yehuda Katz,
;;  Yi-An Huang,
;;  Yngve Nysaeter Pettersen,
;;  Yuzo Fujishima,
;;  Zhenbin Xu,
;;  Zoltan Herczeg,
;;  and
;;  &Oslash;istein E. Andersen,
;;
;;  for their useful comments, both large and small, that have led to
;;  changes to this specification over the years.</p>
;;
;;  <p>Thanks also to everyone who has ever posted about HTML to their
;;  blogs, public mailing lists, or forums, including all the
;;  contributors to the <a
;;  href="http://www.w3.org/html/wg/lists/">various W3C HTML WG
;;  lists</a> and the <a
;;  href="http://www.whatwg.org/mailing-list">various WHATWG lists</a>.
;;
;;  <p>Special thanks to Richard Williamson for creating the first
;;  implementation of <code>canvas</code> in Safari, from which the
;;  canvas feature was designed.</p>
;;
;;  <p>Special thanks also to the Microsoft employees who first
;;  implemented the event-based drag-and-drop mechanism, <code
;;  title="attr-contenteditable">contenteditable</code>, and other
;;  features first widely deployed by the Windows Internet Explorer
;;  browser.</p>
;;
;;  <p>Thanks to the participants of the microdata usability study for
;;  allowing us to use their mistakes as a guide for designing the
;;  microdata feature.</p>
;;
;;<!--END w3c-html--><!--TT-->
;;  <p>Thanks to the SubRip community, including in particular Zuggy and
;;  ai4spam, for their work on the SubRip software program whose SRT
;;  file format was used as the basis for the WebSRT timed track file
;;  format.</p>
;;<!--START w3c-html--><!--TT-->
;;
;;  <div class="impl">
;;
;;  <p>Special thanks and $10,000 to David Hyatt who came up with a
;;  broken implementation of the <a href="#adoptionAgency">adoption
;;  agency algorithm</a> that the editor had to reverse engineer and fix
;;  before using it in the parsing section.</p>
;;
;;  </div>
;;
;;  <p>Thanks to the many sources that provided inspiration for the
;;  examples used in the specification.</p>
;;
;;  <!--END html--><!--END w3c-html-->
;;
;;  <div itemscope itemtype="http://n.whatwg.org/work">
;;   <p>The abstract is based on <a itemprop="work" href="http://www.flickr.com/photos/wonderlane/2986252088/">a photo</a>
;;   by <a itemprop="http://creativecommons.org/ns#attributionURL" href="http://www.flickr.com/photos/wonderlane/">Wonderlane</a>.
;;   (<a itemprop="license" href="http://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>)
;;  </div>
;;
;;  <!--START html--><!--START w3c-html-->
;;
;;  <p>Thanks also to the Microsoft blogging community for some ideas,
;;  to the attendees of the W3C Workshop on Web Applications and
;;  Compound Documents for inspiration, to the #mrt crew, the #mrt.no
;;  crew, and the #whatwg crew, and to Pillar and Hedral for their ideas
;;  and support.</p>
;;
;;  <!-- Hopefully Kam won't notice he's covered by these
;;  acknowledgements three times! -->
;;
;;<!--
;; v2  * library of resources:
;;        var library = new ZipFile("data.zip");
;;        library.onload = function() {
;;          var sound1 = library.getAudio("sound1.wav"); // returns an Audio object
;;          var image1 = library.getImage("image1.png"); // returns an HTMLImageElement
;;          var doc1 = library.getXMLDocument("doc1.xml"); // returns a Document
;;          var doc2 = library.getHTMLDocument("doc1.html"); // returns an HTMLDocument
;;        }
;;       or:
;;        var library = new ResourceLoader("data.zip");
;;        library.add("moredata.zip");
;;        library.onload = function() { ... }
;;        library.onloading = function() {
;;          reportLoadProgress(library.progress); // 0.0 .. 1.0
;;        }
;;       or:
;;        var library = new AudioZip("sounds.zip");
;;        library.onload = function() {
;;          var sound1 = library["sound1.wav"];
;;          sound.play();
;;        }
;; v2  * a fairly common situation for web authors is to have two lists, where
;;       the contents of the second depends on the value of the first. Is there
;;       any way we could extend the current model to include this functionality?
;;       (e.g. bugzilla product/component ui)
;; v2  * quick-searchable select
;; v2  * include/exclude selectors (two multi-select columns with arrows to
;;       move selected items) and that sort of thing.
;;       http://slashdot.org/comments.pl?sid=110240&cid=9357022
;; v2  * Oh, and forms need a standardized Help widget/icon. I know I can
;;       turn my cursor into a question mark, but I'm looking for something
;;       simple and pervasive. Maybe you can wrap fields in a help tag, just
;;       as you do for fieldsets. And in that help tag, attributes are
;;       available that allow for a nice, formatted, clean, full help text
;;       popup/area/thing.
;;       http://slashdot.org/comments.pl?sid=110240&cid=9359006
;; v2  * Validating only part of a form. - Anja Lehmann
;; v2  * Reminder to add a way to expose access keys in buttons, i.e.
;;       Sub&mit where & signifies the m is the access key to use. Possibly
;;       automatic? <input accesskey="m" value="Submit"> browser would be
;;       smart enough to underline the first instance of the access key if
;;       it exists (case insensitive)? - kerz
;;       [or deprecate the lot (->web apps)]
;; v2  * need an attribute that says "the children of this element are in
;;       their own tabbing universe, tabindex should be relative to each
;;       other, not to the document"
;;       -> web apps?
;; v2  * make select widgets have multiple columns
;;       or ->web apps with list view
;; v2  * required as a group (one of the following must be available):
;;       + i propose something like the following:
;;           <input type="text" group="contact" name="voicephone"> Voice phone
;;           <input type="text" group="contact" name="fax"> Fax
;;           <input type="text" group="contact" name="mobile"> Mobile phone
;;           <input type="text" group="contact" name="email"> E-mail
;;         if the user fills out none of the form fields in the "contact"
;;         group, an error message is shown and the form is not submitted.
;;         - Peter-Paul Koch
;; v2  * formatting of number fields, text fields, etc, so that when the
;;       field is not focused, the value is displayed differently. Seems
;;       like this would also be useful e.g. for <output> or something so
;;       you can display localised dates, etc.
;; v2  * being able to select date range (from day x to day y)
;; v2  * ways of visualizing a linefeed in a <textarea> so it looks different
;;       from wrapping text
;; v2  * all login systems have
;;         1. enter username and password
;;         2. create new account
;;         3. lost password
;;       some way of integrating this into one system, since it's so common
;; v2  * way of identifying different sorts of mailadresses
;;         a) mailing-list
;;         b) person
;;         c) department in a company ("support", "marketing" and such)
;;         d) general mail (like "info", "mail", "contact" and such)
;;         e) other sorts of groupings
;;       (or ->web apps; this is talking about in mailto: links, I think)
;; v2  * hotswapping login identities like in windows xp
;;         you are logged in on operamail.com, and you want to check the mail
;;         of another user. somehow, combined with the wand or whatever,
;;         the browser will remember the login page, and it can re-submit it
;;         without having to load the initial page (saving time)
;; v2  * provide different measuring systems, like having the html indicate
;;       fluid in both fluid ounces and liters, and the browser can display
;;       one or the other based on regional settings in the browser or ui,
;;       display conversions in a tooltip, or let the user decide which
;;       format to display.
;; v2  * indicate "x days ago" or "y days into the future" rather than date
;; v2  * input control for anniversaries
;; v2  * only submit fields that have changed, or a way to include in the
;;       submission a list of which form controls were changed from their
;;       default value
;; v2  * type="time" value="now"
;; v2  * add something to type="number" to support basic currency and unit
;;       formatting of input
;; v2  * <fieldset enabled-if-checked="myCheckboxOrRadioButton">
;;       ...to allow sections to only be enabled if a radio button makes it
;;       relevant, for instance.
;; v2  * Yan Morin proposed a multi-column dropdown <select> or <datalist>:
;;         _________________
;;        |_New_York______|V|_________________  <- input  with a table link and a down arrow
;;        |_City__________|_State_|_Country_|_| <- header of the table
;;        | Montreal      |  QC   | Canada  |A| <- top arrow of the scroll
;;        |>New York     <|  NY   | US      | | <- selected row
;;        | Washington    |  DC   | US      |X| <- cursor scroll
;;        | San Francisco |  CA   | US      | |
;;        |_Toronto_______|__ON___|_Canada__|V| <- bottom arrow of the scroll
;;
;; v2  * add for="" attribute to <input type="password"> so that you can
;;       link usernames and passwords. (Jonas Sicking)
;; v2  * value for unchecked checkbox?
;; v2  * A way to specify the default button - Michael Gratton
;; v2  * <fieldset readonly>?
;; v2  * dolphinling suggests having a way to mark certain parts of a
;;       form as being dependent on another (mutually exclusive parts of
;;       a form)
;; v2  * expose the form data set, either as an object (on which one can
;;       invoke the JSON serialiser), or in the form of a method on
;;       HTMLFormElement that returns the form data set serialised
;;       according to a particular encoding (defaulting to the form's
;;       enctype="" one, probably). This would allow forms to be used
;;       with XHR-like systems without having to manually construct the
;;       form data set the way that is done today.
;; v2  * expose the file upload progress when uploading files in a form
;;       (ideally using the same mechanism as XHR2?); ack Rob Evans
;;
;;Consistency in editorial style:
;; v2  * need to become consistent about whether or not to quote keyword
;;       ("<code title="">foo</code>" vs <code>foo</code>)
;; v2  * make the spec consistent about whether the word "algorithm" is part of
;;       an algorithm's name or not ("</dfn> algorithm", "</span> algorithm")
;; v2  * make the spec more consistent about its use of "hexadecimal"
;;       and "base-sixteen", the order that 0-9 A-Z a-z is mentioned,
;;       and the detail to which the spec explains how to interpret a
;;       string as a hexadecimal number.
;; v2  * become more consistent about what markup we use to mark up
;;       productions (nothing? <i>? <code>?)
;; v2  * use <code>Document</code> consistently instead of 'document'.
;; v2  * s/raise/throw/g
;; v2  * be clearer about arrays/lists/collections being zero-based
;;       despite using the term "/index/th".
;; v2  * use the sample widgets:
;;          <li><img alt="A text field with editable sections for each
;;          value, with a button to pop up a dialog showing a calendar or
;;          clock." src="sample-datetime-ui-2"></li>
;;          <li><img alt="A calendar grid with a clock in the upper right
;;          hand corner." src="sample-datetime-ui-3"></li>
;;-->
;;<!--START websrt-->
;; </body>
;;</html>
;;<!--END websrt-->
;;<!--END html--><!--END w3c-html-->
;;<!--END complete--><!--END epub-->
;;<!--END validation-->
